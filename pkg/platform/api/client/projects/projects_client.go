// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDistro creates a distro

Add a distro to an existing project release
*/
func (a *Client) AddDistro(params *AddDistroParams, authInfo runtime.ClientAuthInfoWriter) (*AddDistroOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDistroParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDistro",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDistroReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDistroOK), nil

}

/*
AddFormat adds a format

Add a format to an existing distro
*/
func (a *Client) AddFormat(params *AddFormatParams, authInfo runtime.ClientAuthInfoWriter) (*AddFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFormatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFormat",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros/{distroID}/formats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddFormatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddFormatOK), nil

}

/*
AddProject creates a project

Add a new project to an organization
*/
func (a *Client) AddProject(params *AddProjectParams, authInfo runtime.ClientAuthInfoWriter) (*AddProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addProject",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddProjectOK), nil

}

/*
AddRelease cuts a release

Add a release to an existing project
*/
func (a *Client) AddRelease(params *AddReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*AddReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRelease",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddReleaseOK), nil

}

/*
EditProject edits a project

Edit a project
*/
func (a *Client) EditProject(params *EditProjectParams, authInfo runtime.ClientAuthInfoWriter) (*EditProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editProject",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EditProjectOK), nil

}

/*
EditRelease edits a release

Edit a release
*/
func (a *Client) EditRelease(params *EditReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*EditReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editRelease",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EditReleaseOK), nil

}

/*
GetDistro releases distro

fetch a specific distro for a release
*/
func (a *Client) GetDistro(params *GetDistroParams, authInfo runtime.ClientAuthInfoWriter) (*GetDistroOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistro",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros/{distroID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroOK), nil

}

/*
GetFormat releases distro format

fetch a specific format for a distro
*/
func (a *Client) GetFormat(params *GetFormatParams, authInfo runtime.ClientAuthInfoWriter) (*GetFormatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFormatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFormat",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros/{distroID}/formats/{formatID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFormatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFormatOK), nil

}

/*
GetProject organizations project info

Get project details
*/
func (a *Client) GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectOK), nil

}

/*
GetRelease projects release info

Get release details
*/
func (a *Client) GetRelease(params *GetReleaseParams, authInfo runtime.ClientAuthInfoWriter) (*GetReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReleaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRelease",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReleaseOK), nil

}

/*
ListDistros releases distros

Return a list of distros for a release
*/
func (a *Client) ListDistros(params *ListDistrosParams, authInfo runtime.ClientAuthInfoWriter) (*ListDistrosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDistrosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDistros",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDistrosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDistrosOK), nil

}

/*
ListFormats releases formats for a distro

Return a list of formats for a specific distro
*/
func (a *Client) ListFormats(params *ListFormatsParams, authInfo runtime.ClientAuthInfoWriter) (*ListFormatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFormatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFormats",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases/{releaseID}/distros/{distroID}/formats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFormatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFormatsOK), nil

}

/*
ListProjects organizations projects

Return a list of projects for an organization
*/
func (a *Client) ListProjects(params *ListProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProjects",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProjectsOK), nil

}

/*
ListReleases projects releases

Return a list of releases for a project
*/
func (a *Client) ListReleases(params *ListReleasesParams, authInfo runtime.ClientAuthInfoWriter) (*ListReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListReleasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listReleases",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationName}/projects/{projectName}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListReleasesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package version_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCommitHistoryParams creates a new GetCommitHistoryParams object
// with the default values initialized.
func NewGetCommitHistoryParams() *GetCommitHistoryParams {
	var ()
	return &GetCommitHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCommitHistoryParamsWithTimeout creates a new GetCommitHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCommitHistoryParamsWithTimeout(timeout time.Duration) *GetCommitHistoryParams {
	var ()
	return &GetCommitHistoryParams{

		timeout: timeout,
	}
}

// NewGetCommitHistoryParamsWithContext creates a new GetCommitHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCommitHistoryParamsWithContext(ctx context.Context) *GetCommitHistoryParams {
	var ()
	return &GetCommitHistoryParams{

		Context: ctx,
	}
}

// NewGetCommitHistoryParamsWithHTTPClient creates a new GetCommitHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCommitHistoryParamsWithHTTPClient(client *http.Client) *GetCommitHistoryParams {
	var ()
	return &GetCommitHistoryParams{
		HTTPClient: client,
	}
}

/*GetCommitHistoryParams contains all the parameters to send to the API endpoint
for the get commit history operation typically these are written to a http.Request
*/
type GetCommitHistoryParams struct {

	/*CommitID*/
	CommitID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get commit history params
func (o *GetCommitHistoryParams) WithTimeout(timeout time.Duration) *GetCommitHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get commit history params
func (o *GetCommitHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get commit history params
func (o *GetCommitHistoryParams) WithContext(ctx context.Context) *GetCommitHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get commit history params
func (o *GetCommitHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get commit history params
func (o *GetCommitHistoryParams) WithHTTPClient(client *http.Client) *GetCommitHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get commit history params
func (o *GetCommitHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommitID adds the commitID to the get commit history params
func (o *GetCommitHistoryParams) WithCommitID(commitID strfmt.UUID) *GetCommitHistoryParams {
	o.SetCommitID(commitID)
	return o
}

// SetCommitID adds the commitId to the get commit history params
func (o *GetCommitHistoryParams) SetCommitID(commitID strfmt.UUID) {
	o.CommitID = commitID
}

// WriteToRequest writes these params to a swagger request
func (o *GetCommitHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param commitID
	if err := r.SetPathParam("commitID", o.CommitID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

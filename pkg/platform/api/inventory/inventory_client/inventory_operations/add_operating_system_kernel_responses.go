// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// AddOperatingSystemKernelReader is a Reader for the AddOperatingSystemKernel structure.
type AddOperatingSystemKernelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddOperatingSystemKernelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddOperatingSystemKernelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddOperatingSystemKernelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAddOperatingSystemKernelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddOperatingSystemKernelOK creates a AddOperatingSystemKernelOK with default headers values
func NewAddOperatingSystemKernelOK() *AddOperatingSystemKernelOK {
	return &AddOperatingSystemKernelOK{}
}

/*AddOperatingSystemKernelOK handles this case with default header values.

The kernel added to the operating system
*/
type AddOperatingSystemKernelOK struct {
	Payload *inventory_models.V1Kernel
}

func (o *AddOperatingSystemKernelOK) Error() string {
	return fmt.Sprintf("[POST /v1/operating-systems/{operating_system_id}/kernels][%d] addOperatingSystemKernelOK  %+v", 200, o.Payload)
}

func (o *AddOperatingSystemKernelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.V1Kernel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOperatingSystemKernelBadRequest creates a AddOperatingSystemKernelBadRequest with default headers values
func NewAddOperatingSystemKernelBadRequest() *AddOperatingSystemKernelBadRequest {
	return &AddOperatingSystemKernelBadRequest{}
}

/*AddOperatingSystemKernelBadRequest handles this case with default header values.

If the kernel ID doesn't exist
*/
type AddOperatingSystemKernelBadRequest struct {
	Payload *inventory_models.RestAPIValidationError
}

func (o *AddOperatingSystemKernelBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/operating-systems/{operating_system_id}/kernels][%d] addOperatingSystemKernelBadRequest  %+v", 400, o.Payload)
}

func (o *AddOperatingSystemKernelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddOperatingSystemKernelDefault creates a AddOperatingSystemKernelDefault with default headers values
func NewAddOperatingSystemKernelDefault(code int) *AddOperatingSystemKernelDefault {
	return &AddOperatingSystemKernelDefault{
		_statusCode: code,
	}
}

/*AddOperatingSystemKernelDefault handles this case with default header values.

generic error response
*/
type AddOperatingSystemKernelDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the add operating system kernel default response
func (o *AddOperatingSystemKernelDefault) Code() int {
	return o._statusCode
}

func (o *AddOperatingSystemKernelDefault) Error() string {
	return fmt.Sprintf("[POST /v1/operating-systems/{operating_system_id}/kernels][%d] addOperatingSystemKernel default  %+v", o._statusCode, o.Payload)
}

func (o *AddOperatingSystemKernelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddOperatingSystemKernelBody add operating system kernel body
swagger:model AddOperatingSystemKernelBody
*/
type AddOperatingSystemKernelBody struct {

	// The ID of the kernel that can be used with this operating system
	// Required: true
	// Format: uuid
	KernelID *strfmt.UUID `json:"kernel_id"`
}

// Validate validates this add operating system kernel body
func (o *AddOperatingSystemKernelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKernelID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddOperatingSystemKernelBody) validateKernelID(formats strfmt.Registry) error {

	if err := validate.Required("kernel_id"+"."+"kernel_id", "body", o.KernelID); err != nil {
		return err
	}

	if err := validate.FormatOf("kernel_id"+"."+"kernel_id", "body", "uuid", o.KernelID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddOperatingSystemKernelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOperatingSystemKernelBody) UnmarshalBinary(b []byte) error {
	var res AddOperatingSystemKernelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewSolveOrderParams creates a new SolveOrderParams object
// with the default values initialized.
func NewSolveOrderParams() *SolveOrderParams {
	var (
		useCacheDefault = bool(true)
	)
	return &SolveOrderParams{
		UseCache: &useCacheDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSolveOrderParamsWithTimeout creates a new SolveOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSolveOrderParamsWithTimeout(timeout time.Duration) *SolveOrderParams {
	var (
		useCacheDefault = bool(true)
	)
	return &SolveOrderParams{
		UseCache: &useCacheDefault,

		timeout: timeout,
	}
}

// NewSolveOrderParamsWithContext creates a new SolveOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewSolveOrderParamsWithContext(ctx context.Context) *SolveOrderParams {
	var (
		useCacheDefault = bool(true)
	)
	return &SolveOrderParams{
		UseCache: &useCacheDefault,

		Context: ctx,
	}
}

// NewSolveOrderParamsWithHTTPClient creates a new SolveOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSolveOrderParamsWithHTTPClient(client *http.Client) *SolveOrderParams {
	var (
		useCacheDefault = bool(true)
	)
	return &SolveOrderParams{
		UseCache:   &useCacheDefault,
		HTTPClient: client,
	}
}

/*SolveOrderParams contains all the parameters to send to the API endpoint
for the solve order operation typically these are written to a http.Request
*/
type SolveOrderParams struct {

	/*Order*/
	Order *inventory_models.V1Order
	/*OrganizationID
	  Include ingredient information for private ingredients belong to this organization. The requesting user must be a member of the relevant organization.

	*/
	OrganizationID *string
	/*UseCache*/
	UseCache *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the solve order params
func (o *SolveOrderParams) WithTimeout(timeout time.Duration) *SolveOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the solve order params
func (o *SolveOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the solve order params
func (o *SolveOrderParams) WithContext(ctx context.Context) *SolveOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the solve order params
func (o *SolveOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the solve order params
func (o *SolveOrderParams) WithHTTPClient(client *http.Client) *SolveOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the solve order params
func (o *SolveOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrder adds the order to the solve order params
func (o *SolveOrderParams) WithOrder(order *inventory_models.V1Order) *SolveOrderParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the solve order params
func (o *SolveOrderParams) SetOrder(order *inventory_models.V1Order) {
	o.Order = order
}

// WithOrganizationID adds the organizationID to the solve order params
func (o *SolveOrderParams) WithOrganizationID(organizationID *string) *SolveOrderParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the solve order params
func (o *SolveOrderParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithUseCache adds the useCache to the solve order params
func (o *SolveOrderParams) WithUseCache(useCache *bool) *SolveOrderParams {
	o.SetUseCache(useCache)
	return o
}

// SetUseCache adds the useCache to the solve order params
func (o *SolveOrderParams) SetUseCache(useCache *bool) {
	o.UseCache = useCache
}

// WriteToRequest writes these params to a swagger request
func (o *SolveOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Order != nil {
		if err := r.SetBodyParam(o.Order); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organization_id
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organization_id", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.UseCache != nil {

		// query param use_cache
		var qrUseCache bool
		if o.UseCache != nil {
			qrUseCache = *o.UseCache
		}
		qUseCache := swag.FormatBool(qrUseCache)
		if qUseCache != "" {
			if err := r.SetQueryParam("use_cache", qUseCache); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// OrderRecipesReader is a Reader for the OrderRecipes structure.
type OrderRecipesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderRecipesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrderRecipesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewOrderRecipesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewOrderRecipesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrderRecipesOK creates a OrderRecipesOK with default headers values
func NewOrderRecipesOK() *OrderRecipesOK {
	return &OrderRecipesOK{}
}

/*OrderRecipesOK handles this case with default header values.

Returns one or more recipes that fulfill the requirements of the order
*/
type OrderRecipesOK struct {
	Payload *inventory_models.RecipeResponse
}

func (o *OrderRecipesOK) Error() string {
	return fmt.Sprintf("[POST /orders/{orderId}/recipes][%d] orderRecipesOK  %+v", 200, o.Payload)
}

func (o *OrderRecipesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RecipeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderRecipesBadRequest creates a OrderRecipesBadRequest with default headers values
func NewOrderRecipesBadRequest() *OrderRecipesBadRequest {
	return &OrderRecipesBadRequest{}
}

/*OrderRecipesBadRequest handles this case with default header values.

If the order is invalid
*/
type OrderRecipesBadRequest struct {
	Payload *inventory_models.RestAPIValidationError
}

func (o *OrderRecipesBadRequest) Error() string {
	return fmt.Sprintf("[POST /orders/{orderId}/recipes][%d] orderRecipesBadRequest  %+v", 400, o.Payload)
}

func (o *OrderRecipesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderRecipesDefault creates a OrderRecipesDefault with default headers values
func NewOrderRecipesDefault(code int) *OrderRecipesDefault {
	return &OrderRecipesDefault{
		_statusCode: code,
	}
}

/*OrderRecipesDefault handles this case with default header values.

If there is an error processing the order
*/
type OrderRecipesDefault struct {
	_statusCode int

	Payload *inventory_models.RestAPIError
}

// Code gets the status code for the order recipes default response
func (o *OrderRecipesDefault) Code() int {
	return o._statusCode
}

func (o *OrderRecipesDefault) Error() string {
	return fmt.Sprintf("[POST /orders/{orderId}/recipes][%d] orderRecipes default  %+v", o._statusCode, o.Payload)
}

func (o *OrderRecipesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(inventory_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

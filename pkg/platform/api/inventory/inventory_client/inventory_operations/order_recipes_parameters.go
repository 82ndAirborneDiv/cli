// Code generated by go-swagger; DO NOT EDIT.

package inventory_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	inventory_models "github.com/ActiveState/cli/pkg/platform/api/inventory/inventory_models"
)

// NewOrderRecipesParams creates a new OrderRecipesParams object
// with the default values initialized.
func NewOrderRecipesParams() *OrderRecipesParams {
	var ()
	return &OrderRecipesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrderRecipesParamsWithTimeout creates a new OrderRecipesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrderRecipesParamsWithTimeout(timeout time.Duration) *OrderRecipesParams {
	var ()
	return &OrderRecipesParams{

		timeout: timeout,
	}
}

// NewOrderRecipesParamsWithContext creates a new OrderRecipesParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrderRecipesParamsWithContext(ctx context.Context) *OrderRecipesParams {
	var ()
	return &OrderRecipesParams{

		Context: ctx,
	}
}

// NewOrderRecipesParamsWithHTTPClient creates a new OrderRecipesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrderRecipesParamsWithHTTPClient(client *http.Client) *OrderRecipesParams {
	var ()
	return &OrderRecipesParams{
		HTTPClient: client,
	}
}

/*OrderRecipesParams contains all the parameters to send to the API endpoint
for the order recipes operation typically these are written to a http.Request
*/
type OrderRecipesParams struct {

	/*Order*/
	Order *inventory_models.Order
	/*OrderID*/
	OrderID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the order recipes params
func (o *OrderRecipesParams) WithTimeout(timeout time.Duration) *OrderRecipesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the order recipes params
func (o *OrderRecipesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the order recipes params
func (o *OrderRecipesParams) WithContext(ctx context.Context) *OrderRecipesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the order recipes params
func (o *OrderRecipesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the order recipes params
func (o *OrderRecipesParams) WithHTTPClient(client *http.Client) *OrderRecipesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the order recipes params
func (o *OrderRecipesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrder adds the order to the order recipes params
func (o *OrderRecipesParams) WithOrder(order *inventory_models.Order) *OrderRecipesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the order recipes params
func (o *OrderRecipesParams) SetOrder(order *inventory_models.Order) {
	o.Order = order
}

// WithOrderID adds the orderID to the order recipes params
func (o *OrderRecipesParams) WithOrderID(orderID strfmt.UUID) *OrderRecipesParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the order recipes params
func (o *OrderRecipesParams) SetOrderID(orderID strfmt.UUID) {
	o.OrderID = orderID
}

// WriteToRequest writes these params to a swagger request
func (o *OrderRecipesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Order != nil {
		if err := r.SetBodyParam(o.Order); err != nil {
			return err
		}
	}

	// path param orderId
	if err := r.SetPathParam("orderId", o.OrderID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IngredientVersion Ingredient Version
//
// The full ingredient version data model. Returned from all read requests.
// swagger:model v1IngredientVersion
type V1IngredientVersion struct {

	// creation timestamp
	// Required: true
	// Format: date-time
	CreationTimestamp *strfmt.DateTime `json:"creation_timestamp"`

	// ingredient id
	// Required: true
	// Format: uuid
	IngredientID *strfmt.UUID `json:"ingredient_id"`

	// ingredient version id
	// Required: true
	// Format: uuid
	IngredientVersionID *strfmt.UUID `json:"ingredient_version_id"`

	// links
	// Required: true
	Links struct {

		// The URI of this resource
		// Required: true
		// Format: uri
		Self *strfmt.URI `json:"self"`

		// The URI of the ingredient this is a version of
		// Required: true
		// Format: uri
		Ingredient *strfmt.URI `json:"ingredient"`
	} `json:"links"`

	// The revision number of this revision of the resource. This number increases monotonically with each new revision.
	// Required: true
	// Minimum: 1
	Revision *int64 `json:"revision"`

	// The date and time at which this revision of the resource was created
	// Required: true
	// Format: date-time
	RevisionTimestamp *strfmt.DateTime `json:"revision_timestamp"`

	V1IngredientVersionAllOf2

	V1IngredientVersionAllOf3
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CreationTimestamp *strfmt.DateTime `json:"creation_timestamp"`

		IngredientID *strfmt.UUID `json:"ingredient_id"`

		IngredientVersionID *strfmt.UUID `json:"ingredient_version_id"`

		Links struct {

			// The URI of this resource
			// Required: true
			// Format: uri
			Self *strfmt.URI `json:"self"`

			// The URI of the ingredient this is a version of
			// Required: true
			// Format: uri
			Ingredient *strfmt.URI `json:"ingredient"`
		} `json:"links"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CreationTimestamp = dataAO0.CreationTimestamp

	m.IngredientID = dataAO0.IngredientID

	m.IngredientVersionID = dataAO0.IngredientVersionID

	m.Links = dataAO0.Links

	// AO1
	var dataAO1 struct {
		Revision *int64 `json:"revision"`

		RevisionTimestamp *strfmt.DateTime `json:"revision_timestamp"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Revision = dataAO1.Revision

	m.RevisionTimestamp = dataAO1.RevisionTimestamp

	// AO2
	var aO2 V1IngredientVersionAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.V1IngredientVersionAllOf2 = aO2

	// AO3
	var aO3 V1IngredientVersionAllOf3
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.V1IngredientVersionAllOf3 = aO3

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	var dataAO0 struct {
		CreationTimestamp *strfmt.DateTime `json:"creation_timestamp"`

		IngredientID *strfmt.UUID `json:"ingredient_id"`

		IngredientVersionID *strfmt.UUID `json:"ingredient_version_id"`

		Links struct {

			// The URI of this resource
			// Required: true
			// Format: uri
			Self *strfmt.URI `json:"self"`

			// The URI of the ingredient this is a version of
			// Required: true
			// Format: uri
			Ingredient *strfmt.URI `json:"ingredient"`
		} `json:"links"`
	}

	dataAO0.CreationTimestamp = m.CreationTimestamp

	dataAO0.IngredientID = m.IngredientID

	dataAO0.IngredientVersionID = m.IngredientVersionID

	dataAO0.Links = m.Links

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		Revision *int64 `json:"revision"`

		RevisionTimestamp *strfmt.DateTime `json:"revision_timestamp"`
	}

	dataAO1.Revision = m.Revision

	dataAO1.RevisionTimestamp = m.RevisionTimestamp

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	aO2, err := swag.WriteJSON(m.V1IngredientVersionAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.V1IngredientVersionAllOf3)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version
func (m *V1IngredientVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientVersionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisionTimestamp(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with V1IngredientVersionAllOf2
	if err := m.V1IngredientVersionAllOf2.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1IngredientVersionAllOf3
	if err := m.V1IngredientVersionAllOf3.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersion) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("creation_timestamp", "body", m.CreationTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("creation_timestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersion) validateIngredientID(formats strfmt.Registry) error {

	if err := validate.Required("ingredient_id", "body", m.IngredientID); err != nil {
		return err
	}

	if err := validate.FormatOf("ingredient_id", "body", "uuid", m.IngredientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersion) validateIngredientVersionID(formats strfmt.Registry) error {

	if err := validate.Required("ingredient_version_id", "body", m.IngredientVersionID); err != nil {
		return err
	}

	if err := validate.FormatOf("ingredient_version_id", "body", "uuid", m.IngredientVersionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersion) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"self", "body", m.Links.Self); err != nil {
		return err
	}

	if err := validate.FormatOf("links"+"."+"self", "body", "uri", m.Links.Self.String(), formats); err != nil {
		return err
	}

	if err := validate.Required("links"+"."+"ingredient", "body", m.Links.Ingredient); err != nil {
		return err
	}

	if err := validate.FormatOf("links"+"."+"ingredient", "body", "uri", m.Links.Ingredient.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersion) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	if err := validate.MinimumInt("revision", "body", int64(*m.Revision), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersion) validateRevisionTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("revision_timestamp", "body", m.RevisionTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("revision_timestamp", "body", "date-time", m.RevisionTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersion) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf2 Ingredient Version Core
//
// The fields of an ingredient version that can be set when an ingredient version is created
// swagger:model V1IngredientVersionAllOf2
type V1IngredientVersionAllOf2 struct {

	// The text from the license or elsewhere that declares the copyright holder(s) and year(s)
	// Required: true
	CopyrightText *string `json:"copyright_text"`

	// The URL of a webpage where the documentation for this ingredient version is hosted, if available
	// Format: uri
	DocumentationURI strfmt.URI `json:"documentation_uri,omitempty"`

	// Tells if this ingredient version consists of only a binary without any source.
	IsBinaryOnly *bool `json:"is_binary_only,omitempty"`

	// An SPDX 2.1 license expression describing the exact licensing for this ingredient version
	// Required: true
	LicenseExpression *string `json:"license_expression"`

	// The date and time this ingredient version was first released
	// Required: true
	// Format: date-time
	ReleaseTimestamp *strfmt.DateTime `json:"release_timestamp"`

	// The URL from which we initially retrieved the source for this ingredient version.
	// Format: uri
	SourceURI *strfmt.URI `json:"source_uri,omitempty"`

	// An array of decimal values representing all segments of a version, ordered from most to least significant. How a version string is rendered into a list of decimals will vary depending on the format of the source string and is therefore left up to the caller, but it must be done consistently across all versions of the same resource for sorting to work properly. This is represented as a string to avoid losing precision when converting to a floating point number.
	// Required: true
	// Min Length: 1
	SortableVersion []string `json:"sortable_version"`

	// The canonical version string for the resource. Should be as specific as possible (e.g. '10.9.6' of macOS instead of just '10.9'). May contain non-numeric version segments and other formatting characters if necessary.
	// Required: true
	Version *string `json:"version"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersionAllOf2) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CopyrightText *string `json:"copyright_text"`

		DocumentationURI strfmt.URI `json:"documentation_uri,omitempty"`

		IsBinaryOnly *bool `json:"is_binary_only,omitempty"`

		LicenseExpression *string `json:"license_expression"`

		ReleaseTimestamp *strfmt.DateTime `json:"release_timestamp"`

		SourceURI *strfmt.URI `json:"source_uri,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CopyrightText = dataAO0.CopyrightText

	m.DocumentationURI = dataAO0.DocumentationURI

	m.IsBinaryOnly = dataAO0.IsBinaryOnly

	m.LicenseExpression = dataAO0.LicenseExpression

	m.ReleaseTimestamp = dataAO0.ReleaseTimestamp

	m.SourceURI = dataAO0.SourceURI

	// AO1
	var dataAO1 struct {
		SortableVersion []string `json:"sortable_version"`

		Version *string `json:"version"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SortableVersion = dataAO1.SortableVersion

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersionAllOf2) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CopyrightText *string `json:"copyright_text"`

		DocumentationURI strfmt.URI `json:"documentation_uri,omitempty"`

		IsBinaryOnly *bool `json:"is_binary_only,omitempty"`

		LicenseExpression *string `json:"license_expression"`

		ReleaseTimestamp *strfmt.DateTime `json:"release_timestamp"`

		SourceURI *strfmt.URI `json:"source_uri,omitempty"`
	}

	dataAO0.CopyrightText = m.CopyrightText

	dataAO0.DocumentationURI = m.DocumentationURI

	dataAO0.IsBinaryOnly = m.IsBinaryOnly

	dataAO0.LicenseExpression = m.LicenseExpression

	dataAO0.ReleaseTimestamp = m.ReleaseTimestamp

	dataAO0.SourceURI = m.SourceURI

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		SortableVersion []string `json:"sortable_version"`

		Version *string `json:"version"`
	}

	dataAO1.SortableVersion = m.SortableVersion

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version all of2
func (m *V1IngredientVersionAllOf2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCopyrightText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentationURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortableVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf2) validateCopyrightText(formats strfmt.Registry) error {

	if err := validate.Required("copyright_text", "body", m.CopyrightText); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateDocumentationURI(formats strfmt.Registry) error {

	if swag.IsZero(m.DocumentationURI) { // not required
		return nil
	}

	if err := validate.FormatOf("documentation_uri", "body", "uri", m.DocumentationURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateLicenseExpression(formats strfmt.Registry) error {

	if err := validate.Required("license_expression", "body", m.LicenseExpression); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateReleaseTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("release_timestamp", "body", m.ReleaseTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("release_timestamp", "body", "date-time", m.ReleaseTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateSourceURI(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceURI) { // not required
		return nil
	}

	if err := validate.FormatOf("source_uri", "body", "uri", m.SourceURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateSortableVersion(formats strfmt.Registry) error {

	if err := validate.Required("sortable_version", "body", m.SortableVersion); err != nil {
		return err
	}

	for i := 0; i < len(m.SortableVersion); i++ {

		if err := validate.MinLength("sortable_version"+"."+strconv.Itoa(i), "body", string(m.SortableVersion[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf2) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf2) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3 Ingredient Version Revision Core
//
// The fields of an ingredient version that can be updated by creating a new revision
// swagger:model V1IngredientVersionAllOf3
type V1IngredientVersionAllOf3 struct {

	// Camel-specific metadata needed to build this ingredient version revision in camel, if there is any.
	CamelExtras interface{} `json:"camel_extras,omitempty"`

	// dependency sets
	DependencySets []*V1IngredientVersionAllOf3DependencySetsItems0 `json:"dependency_sets"`

	// Whether or not this is a stable release of the package
	IsStableRelease *bool `json:"is_stable_release,omitempty"`

	// S3 URL where the source distribution is stored for our platform
	// Format: uri
	PlatformSourceURI *strfmt.URI `json:"platform_source_uri,omitempty"`

	// A checksum of the source distribution. The actual type of the checksum (MD5, S3 Etag, etc.) is not specified. It's assumed that the system that populates and uses this data will know how to work with these checksums.
	SourceChecksum *string `json:"source_checksum,omitempty"`

	// Whether this revision should be considered 'stable'. When a new stable revision is created, it supercedes any existing stable revision and becomes the default revision of the revisioned resource going forward.
	IsStableRevision *bool `json:"is_stable_revision,omitempty"`

	// provided features
	// Required: true
	ProvidedFeatures []*V1IngredientVersionAllOf3ProvidedFeaturesItems0 `json:"provided_features"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersionAllOf3) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CamelExtras interface{} `json:"camel_extras,omitempty"`

		DependencySets []*V1IngredientVersionAllOf3DependencySetsItems0 `json:"dependency_sets,omitempty"`

		IsStableRelease *bool `json:"is_stable_release,omitempty"`

		PlatformSourceURI *strfmt.URI `json:"platform_source_uri,omitempty"`

		SourceChecksum *string `json:"source_checksum,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CamelExtras = dataAO0.CamelExtras

	m.DependencySets = dataAO0.DependencySets

	m.IsStableRelease = dataAO0.IsStableRelease

	m.PlatformSourceURI = dataAO0.PlatformSourceURI

	m.SourceChecksum = dataAO0.SourceChecksum

	// AO1
	var dataAO1 struct {
		IsStableRevision *bool `json:"is_stable_revision,omitempty"`

		ProvidedFeatures []*V1IngredientVersionAllOf3ProvidedFeaturesItems0 `json:"provided_features"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.IsStableRevision = dataAO1.IsStableRevision

	m.ProvidedFeatures = dataAO1.ProvidedFeatures

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersionAllOf3) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CamelExtras interface{} `json:"camel_extras,omitempty"`

		DependencySets []*V1IngredientVersionAllOf3DependencySetsItems0 `json:"dependency_sets,omitempty"`

		IsStableRelease *bool `json:"is_stable_release,omitempty"`

		PlatformSourceURI *strfmt.URI `json:"platform_source_uri,omitempty"`

		SourceChecksum *string `json:"source_checksum,omitempty"`
	}

	dataAO0.CamelExtras = m.CamelExtras

	dataAO0.DependencySets = m.DependencySets

	dataAO0.IsStableRelease = m.IsStableRelease

	dataAO0.PlatformSourceURI = m.PlatformSourceURI

	dataAO0.SourceChecksum = m.SourceChecksum

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		IsStableRevision *bool `json:"is_stable_revision,omitempty"`

		ProvidedFeatures []*V1IngredientVersionAllOf3ProvidedFeaturesItems0 `json:"provided_features"`
	}

	dataAO1.IsStableRevision = m.IsStableRevision

	dataAO1.ProvidedFeatures = m.ProvidedFeatures

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version all of3
func (m *V1IngredientVersionAllOf3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencySets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformSourceURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvidedFeatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf3) validateDependencySets(formats strfmt.Registry) error {

	if swag.IsZero(m.DependencySets) { // not required
		return nil
	}

	for i := 0; i < len(m.DependencySets); i++ {
		if swag.IsZero(m.DependencySets[i]) { // not required
			continue
		}

		if m.DependencySets[i] != nil {
			if err := m.DependencySets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependency_sets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf3) validatePlatformSourceURI(formats strfmt.Registry) error {

	if swag.IsZero(m.PlatformSourceURI) { // not required
		return nil
	}

	if err := validate.FormatOf("platform_source_uri", "body", "uri", m.PlatformSourceURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3) validateProvidedFeatures(formats strfmt.Registry) error {

	if err := validate.Required("provided_features", "body", m.ProvidedFeatures); err != nil {
		return err
	}

	for i := 0; i < len(m.ProvidedFeatures); i++ {
		if swag.IsZero(m.ProvidedFeatures[i]) { // not required
			continue
		}

		if m.ProvidedFeatures[i] != nil {
			if err := m.ProvidedFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provided_features" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3DependencySetsItems0 v1 ingredient version all of3 dependency sets items0
// swagger:model V1IngredientVersionAllOf3DependencySetsItems0
type V1IngredientVersionAllOf3DependencySetsItems0 struct {

	// dependencies
	// Required: true
	// Min Items: 1
	Dependencies []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0 `json:"dependencies"`

	// A description of this set.
	Description string `json:"description,omitempty"`

	// Whatever text or metadata was parsed to create this set.
	OriginalRequirement string `json:"original_requirement,omitempty"`

	// Recipe
	//
	// The different types of dependencies supported by the platform.
	// Required: true
	// Enum: [build runtime test]
	Type *string `json:"type"`
}

// Validate validates this v1 ingredient version all of3 dependency sets items0
func (m *V1IngredientVersionAllOf3DependencySetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	iDependenciesSize := int64(len(m.Dependencies))

	if err := validate.MinItems("dependencies", "body", iDependenciesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var v1IngredientVersionAllOf3DependencySetsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build","runtime","test"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IngredientVersionAllOf3DependencySetsItems0TypeTypePropEnum = append(v1IngredientVersionAllOf3DependencySetsItems0TypeTypePropEnum, v)
	}
}

const (

	// V1IngredientVersionAllOf3DependencySetsItems0TypeBuild captures enum value "build"
	V1IngredientVersionAllOf3DependencySetsItems0TypeBuild string = "build"

	// V1IngredientVersionAllOf3DependencySetsItems0TypeRuntime captures enum value "runtime"
	V1IngredientVersionAllOf3DependencySetsItems0TypeRuntime string = "runtime"

	// V1IngredientVersionAllOf3DependencySetsItems0TypeTest captures enum value "test"
	V1IngredientVersionAllOf3DependencySetsItems0TypeTest string = "test"
)

// prop value enum
func (m *V1IngredientVersionAllOf3DependencySetsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1IngredientVersionAllOf3DependencySetsItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3DependencySetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0 Dependency
//
// A single dependency for an ingredient version revision
// swagger:model V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0
type V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0 struct {

	// The features that must already be present in the recipe for this requirement to apply. For example, can be used to create requirements that only apply on specific operating systems.
	Conditions []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0 `json:"conditions"`

	// The name of the feature this ingredient version is dependent on
	// Required: true
	Feature *string `json:"feature"`

	// The namespace the feature depended on is contained in
	// Required: true
	Namespace *string `json:"namespace"`

	// Whatever text or data structure we parsed to generate this dependency
	OriginalRequirement string `json:"original_requirement,omitempty"`

	// Requirements Sub Schema
	//
	// The version constraints that an ingredient version's requirement or condition puts on a feature
	// Required: true
	// Min Length: 1
	Requirements []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0 `json:"requirements"`
}

// Validate validates this v1 ingredient version all of3 dependency sets items0 dependencies items0
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0 v1 ingredient version all of3 dependency sets items0 dependencies items0 conditions items0
// swagger:model V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0
type V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0 struct {

	// What feature must be present for the containing entity to apply
	// Required: true
	Feature *string `json:"feature"`

	// The namespace the conditional feature is contained in
	// Required: true
	Namespace *string `json:"namespace"`

	// Requirements Sub Schema
	//
	// The version constraints that an ingredient version's requirement or condition puts on a feature
	// Required: true
	// Min Length: 1
	Requirements []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0 `json:"requirements"`

	// Whatever text or data structure we parsed to generate this condition
	OriginalCondition string `json:"original_condition,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Feature *string `json:"feature"`

		Namespace *string `json:"namespace"`

		Requirements []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0 `json:"requirements"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Feature = dataAO0.Feature

	m.Namespace = dataAO0.Namespace

	m.Requirements = dataAO0.Requirements

	// AO1
	var dataAO1 struct {
		OriginalCondition string `json:"original_condition,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.OriginalCondition = dataAO1.OriginalCondition

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Feature *string `json:"feature"`

		Namespace *string `json:"namespace"`

		Requirements []*V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0 `json:"requirements"`
	}

	dataAO0.Feature = m.Feature

	dataAO0.Namespace = m.Namespace

	dataAO0.Requirements = m.Requirements

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		OriginalCondition string `json:"original_condition,omitempty"`
	}

	dataAO1.OriginalCondition = m.OriginalCondition

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version all of3 dependency sets items0 dependencies items0 conditions items0
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0 v1 ingredient version all of3 dependency sets items0 dependencies items0 conditions items0 requirements items0
// swagger:model V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0
type V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0 struct {

	// The operator used to compare the sortable_version against a given provided feature to determine if it meets the requirement
	// Required: true
	// Enum: [eq gt gte lt lte ne]
	Comparator *string `json:"comparator"`

	// An array of decimal values representing all segments of a version, ordered from most to least significant. How a version string is rendered into a list of decimals will vary depending on the format of the source string and is therefore left up to the caller, but it must be done consistently across all versions of the same resource for sorting to work properly. This is represented as a string to avoid losing precision when converting to a floating point number.
	// Min Length: 1
	SortableVersion []string `json:"sortable_version"`

	// The required version in its original form.
	// Min Length: 1
	Version *string `json:"version,omitempty"`
}

// Validate validates this v1 ingredient version all of3 dependency sets items0 dependencies items0 conditions items0 requirements items0
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortableVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0TypeComparatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eq","gt","gte","lt","lte","ne"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0TypeComparatorPropEnum = append(v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0TypeComparatorPropEnum, v)
	}
}

const (

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorEq captures enum value "eq"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorEq string = "eq"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorGt captures enum value "gt"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorGt string = "gt"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorGte captures enum value "gte"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorGte string = "gte"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorLt captures enum value "lt"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorLt string = "lt"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorLte captures enum value "lte"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorLte string = "lte"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorNe captures enum value "ne"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0ComparatorNe string = "ne"
)

// prop value enum
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) validateComparatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0TypeComparatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) validateComparator(formats strfmt.Registry) error {

	if err := validate.Required("comparator", "body", m.Comparator); err != nil {
		return err
	}

	// value enum
	if err := m.validateComparatorEnum("comparator", "body", *m.Comparator); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) validateSortableVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.SortableVersion) { // not required
		return nil
	}

	for i := 0; i < len(m.SortableVersion); i++ {

		if err := validate.MinLength("sortable_version"+"."+strconv.Itoa(i), "body", string(m.SortableVersion[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinLength("version", "body", string(*m.Version), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0ConditionsItems0RequirementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0 v1 ingredient version all of3 dependency sets items0 dependencies items0 requirements items0
// swagger:model V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0
type V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0 struct {

	// The operator used to compare the sortable_version against a given provided feature to determine if it meets the requirement
	// Required: true
	// Enum: [eq gt gte lt lte ne]
	Comparator *string `json:"comparator"`

	// An array of decimal values representing all segments of a version, ordered from most to least significant. How a version string is rendered into a list of decimals will vary depending on the format of the source string and is therefore left up to the caller, but it must be done consistently across all versions of the same resource for sorting to work properly. This is represented as a string to avoid losing precision when converting to a floating point number.
	// Min Length: 1
	SortableVersion []string `json:"sortable_version"`

	// The required version in its original form.
	// Min Length: 1
	Version *string `json:"version,omitempty"`
}

// Validate validates this v1 ingredient version all of3 dependency sets items0 dependencies items0 requirements items0
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortableVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0TypeComparatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eq","gt","gte","lt","lte","ne"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0TypeComparatorPropEnum = append(v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0TypeComparatorPropEnum, v)
	}
}

const (

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorEq captures enum value "eq"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorEq string = "eq"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorGt captures enum value "gt"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorGt string = "gt"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorGte captures enum value "gte"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorGte string = "gte"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorLt captures enum value "lt"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorLt string = "lt"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorLte captures enum value "lte"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorLte string = "lte"

	// V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorNe captures enum value "ne"
	V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0ComparatorNe string = "ne"
)

// prop value enum
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) validateComparatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0TypeComparatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) validateComparator(formats strfmt.Registry) error {

	if err := validate.Required("comparator", "body", m.Comparator); err != nil {
		return err
	}

	// value enum
	if err := m.validateComparatorEnum("comparator", "body", *m.Comparator); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) validateSortableVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.SortableVersion) { // not required
		return nil
	}

	for i := 0; i < len(m.SortableVersion); i++ {

		if err := validate.MinLength("sortable_version"+"."+strconv.Itoa(i), "body", string(m.SortableVersion[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinLength("version", "body", string(*m.Version), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3DependencySetsItems0DependenciesItems0RequirementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// V1IngredientVersionAllOf3ProvidedFeaturesItems0 Provided Feature
//
// A feature that is provided by a revisioned resource
// swagger:model V1IngredientVersionAllOf3ProvidedFeaturesItems0
type V1IngredientVersionAllOf3ProvidedFeaturesItems0 struct {

	// feature
	// Required: true
	Feature *string `json:"feature"`

	// If this is true then it means that we assigned a version to this feature ourselves rather than getting it directly from metadata in the source ingredient.
	IsActivestateVersion *bool `json:"is_activestate_version,omitempty"`

	// Whether the provider of this feature is the default provider. There can only be one default provider per feature namespace, name, and version.
	// Required: true
	IsDefaultProvider *bool `json:"is_default_provider"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// An array of decimal values representing all segments of a version, ordered from most to least significant. How a version string is rendered into a list of decimals will vary depending on the format of the source string and is therefore left up to the caller, but it must be done consistently across all versions of the same resource for sorting to work properly. This is represented as a string to avoid losing precision when converting to a floating point number.
	// Required: true
	// Min Length: 1
	SortableVersion []string `json:"sortable_version"`

	// The canonical version string for the resource. Should be as specific as possible (e.g. '10.9.6' of macOS instead of just '10.9'). May contain non-numeric version segments and other formatting characters if necessary.
	// Required: true
	Version *string `json:"version"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Feature *string `json:"feature"`

		IsActivestateVersion *bool `json:"is_activestate_version,omitempty"`

		IsDefaultProvider *bool `json:"is_default_provider"`

		Namespace *string `json:"namespace"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Feature = dataAO0.Feature

	m.IsActivestateVersion = dataAO0.IsActivestateVersion

	m.IsDefaultProvider = dataAO0.IsDefaultProvider

	m.Namespace = dataAO0.Namespace

	// AO1
	var dataAO1 struct {
		SortableVersion []string `json:"sortable_version"`

		Version *string `json:"version"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SortableVersion = dataAO1.SortableVersion

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1IngredientVersionAllOf3ProvidedFeaturesItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Feature *string `json:"feature"`

		IsActivestateVersion *bool `json:"is_activestate_version,omitempty"`

		IsDefaultProvider *bool `json:"is_default_provider"`

		Namespace *string `json:"namespace"`
	}

	dataAO0.Feature = m.Feature

	dataAO0.IsActivestateVersion = m.IsActivestateVersion

	dataAO0.IsDefaultProvider = m.IsDefaultProvider

	dataAO0.Namespace = m.Namespace

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		SortableVersion []string `json:"sortable_version"`

		Version *string `json:"version"`
	}

	dataAO1.SortableVersion = m.SortableVersion

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 ingredient version all of3 provided features items0
func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsDefaultProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortableVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) validateFeature(formats strfmt.Registry) error {

	if err := validate.Required("feature", "body", m.Feature); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) validateIsDefaultProvider(formats strfmt.Registry) error {

	if err := validate.Required("is_default_provider", "body", m.IsDefaultProvider); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) validateSortableVersion(formats strfmt.Registry) error {

	if err := validate.Required("sortable_version", "body", m.SortableVersion); err != nil {
		return err
	}

	for i := 0; i < len(m.SortableVersion); i++ {

		if err := validate.MinLength("sortable_version"+"."+strconv.Itoa(i), "body", string(m.SortableVersion[i]), 1); err != nil {
			return err
		}

	}

	return nil
}

func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IngredientVersionAllOf3ProvidedFeaturesItems0) UnmarshalBinary(b []byte) error {
	var res V1IngredientVersionAllOf3ProvidedFeaturesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DependencySet Dependency Set
//
// swagger:model dependencySet
type DependencySet struct {

	// dependencies
	// Required: true
	// Min Items: 1
	Dependencies []Dependency `json:"dependencies"`

	// A description of this set.
	Description string `json:"description,omitempty"`

	// Whatever text or metadata was parsed to create this set.
	OriginalRequirement string `json:"original_requirement,omitempty"`

	// type
	// Required: true
	Type DependencyType `json:"type"`
}

// Validate validates this dependency set
func (m *DependencySet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DependencySet) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	iDependenciesSize := int64(len(m.Dependencies))

	if err := validate.MinItems("dependencies", "body", iDependenciesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Dependencies); i++ {

		if err := m.Dependencies[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DependencySet) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DependencySet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DependencySet) UnmarshalBinary(b []byte) error {
	var res DependencySet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ingredient Ingredient
//
// An ingredient is a single source code item that we build, such as a language core, C library, or language package.
// swagger:model ingredient
type Ingredient struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// ingredient id
	// Required: true
	// Format: uuid
	IngredientID *strfmt.UUID `json:"ingredient_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// The language which this ingredient requires. The 'any' option is for things like C libraries which may be used by many languages.
	// Enum: [any go perl python ruby tcl]
	ForLanguage string `json:"for_language,omitempty"`

	// Is this the ingredient for a language core (Perl, Python, etc.)?
	IsLanguageCore bool `json:"is_language_core,omitempty"`

	// versions
	Versions []string `json:"versions"`

	// A link to this ingredient's website, if one exists.
	// Format: uri
	WebsiteURI strfmt.URI `json:"website_uri,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Ingredient) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Description *string `json:"description"`

		IngredientID *strfmt.UUID `json:"ingredient_id"`

		Name *string `json:"name"`

		Namespace string `json:"namespace,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Description = dataAO0.Description

	m.IngredientID = dataAO0.IngredientID

	m.Name = dataAO0.Name

	m.Namespace = dataAO0.Namespace

	// AO1
	var dataAO1 struct {
		ForLanguage string `json:"for_language,omitempty"`

		IsLanguageCore bool `json:"is_language_core,omitempty"`

		Versions []string `json:"versions"`

		WebsiteURI strfmt.URI `json:"website_uri,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ForLanguage = dataAO1.ForLanguage

	m.IsLanguageCore = dataAO1.IsLanguageCore

	m.Versions = dataAO1.Versions

	m.WebsiteURI = dataAO1.WebsiteURI

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Ingredient) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Description *string `json:"description"`

		IngredientID *strfmt.UUID `json:"ingredient_id"`

		Name *string `json:"name"`

		Namespace string `json:"namespace,omitempty"`
	}

	dataAO0.Description = m.Description

	dataAO0.IngredientID = m.IngredientID

	dataAO0.Name = m.Name

	dataAO0.Namespace = m.Namespace

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	var dataAO1 struct {
		ForLanguage string `json:"for_language,omitempty"`

		IsLanguageCore bool `json:"is_language_core,omitempty"`

		Versions []string `json:"versions"`

		WebsiteURI strfmt.URI `json:"website_uri,omitempty"`
	}

	dataAO1.ForLanguage = m.ForLanguage

	dataAO1.IsLanguageCore = m.IsLanguageCore

	dataAO1.Versions = m.Versions

	dataAO1.WebsiteURI = m.WebsiteURI

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ingredient
func (m *Ingredient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebsiteURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ingredient) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateIngredientID(formats strfmt.Registry) error {

	if err := validate.Required("ingredient_id", "body", m.IngredientID); err != nil {
		return err
	}

	if err := validate.FormatOf("ingredient_id", "body", "uuid", m.IngredientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var ingredientTypeForLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","go","perl","python","ruby","tcl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingredientTypeForLanguagePropEnum = append(ingredientTypeForLanguagePropEnum, v)
	}
}

// property enum
func (m *Ingredient) validateForLanguageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ingredientTypeForLanguagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Ingredient) validateForLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.ForLanguage) { // not required
		return nil
	}

	// value enum
	if err := m.validateForLanguageEnum("for_language", "body", m.ForLanguage); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateWebsiteURI(formats strfmt.Registry) error {

	if swag.IsZero(m.WebsiteURI) { // not required
		return nil
	}

	if err := validate.FormatOf("website_uri", "body", "uri", m.WebsiteURI.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Ingredient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ingredient) UnmarshalBinary(b []byte) error {
	var res Ingredient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion Ingredient Version
//
// The full ingredient version data model. Returned from all read requests.
// swagger:model v1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion
type V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion struct {
	V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0

	V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1

	V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2

	V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0 = aO0

	// AO1
	var aO1 V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1 = aO1

	// AO2
	var aO2 V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2 = aO2

	// AO3
	var aO3 V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3 = aO3

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this v1 recipe response recipes items resolved ingredients items ingredient version
func (m *V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0
	if err := m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1
	if err := m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2
	if err := m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf2.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3
	if err := m.V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersionAllOf3.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion) UnmarshalBinary(b []byte) error {
	var res V1RecipeResponseRecipesItemsResolvedIngredientsItemsIngredientVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

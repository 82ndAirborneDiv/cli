// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Platform Platform
//
// A platform summarizes all the information about a single build system.
// swagger:model platform
type Platform struct {

	// A generalized description of the plaform suitable for display to end users.
	DisplayName string `json:"display_name,omitempty"`

	// If there is a planned end of support date for this platform, this will be populated.
	// Format: date
	EndOfSupportDate *strfmt.Date `json:"end_of_support_date,omitempty"`

	// If true, the platform should be shown to the user as a selectable platform for an order. If false, the platform should be hidden from the user.
	// Required: true
	IsUserVisible *bool `json:"is_user_visible"`

	// This can be omitted except for linux systems. On non-linux systems this value is not meaningful.
	LibcVersion string `json:"libc_version,omitempty"`

	// os name
	// Required: true
	// Enum: [AIX HP-UX Linux macOS Solaris Windows]
	OsName *string `json:"os_name"`

	// The version of the operating system. This will be empty on Linux systems, where what we care about is the libc_version.
	OsVersion string `json:"os_version,omitempty"`

	// platform id
	// Required: true
	// Format: uuid
	PlatformID *strfmt.UUID `json:"platform_id"`

	// processor
	Processor *PlatformProcessor `json:"processor,omitempty"`
}

// Validate validates this platform
func (m *Platform) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndOfSupportDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsUserVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Platform) validateEndOfSupportDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndOfSupportDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_of_support_date", "body", "date", m.EndOfSupportDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validateIsUserVisible(formats strfmt.Registry) error {

	if err := validate.Required("is_user_visible", "body", m.IsUserVisible); err != nil {
		return err
	}

	return nil
}

var platformTypeOsNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AIX","HP-UX","Linux","macOS","Solaris","Windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformTypeOsNamePropEnum = append(platformTypeOsNamePropEnum, v)
	}
}

const (

	// PlatformOsNameAIX captures enum value "AIX"
	PlatformOsNameAIX string = "AIX"

	// PlatformOsNameHPUX captures enum value "HP-UX"
	PlatformOsNameHPUX string = "HP-UX"

	// PlatformOsNameLinux captures enum value "Linux"
	PlatformOsNameLinux string = "Linux"

	// PlatformOsNameMacOS captures enum value "macOS"
	PlatformOsNameMacOS string = "macOS"

	// PlatformOsNameSolaris captures enum value "Solaris"
	PlatformOsNameSolaris string = "Solaris"

	// PlatformOsNameWindows captures enum value "Windows"
	PlatformOsNameWindows string = "Windows"
)

// prop value enum
func (m *Platform) validateOsNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Platform) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("os_name", "body", m.OsName); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsNameEnum("os_name", "body", *m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platform_id", "body", m.PlatformID); err != nil {
		return err
	}

	if err := validate.FormatOf("platform_id", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Platform) validateProcessor(formats strfmt.Registry) error {

	if swag.IsZero(m.Processor) { // not required
		return nil
	}

	if m.Processor != nil {
		if err := m.Processor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Platform) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Platform) UnmarshalBinary(b []byte) error {
	var res Platform
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PlatformProcessor platform processor
// swagger:model PlatformProcessor
type PlatformProcessor struct {

	// bit width
	// Enum: [32 64]
	BitWidth string `json:"bit_width,omitempty"`

	// cpu type
	// Enum: [IA64 PowerPC Sparc x86]
	CPUType string `json:"cpu_type,omitempty"`
}

// Validate validates this platform processor
func (m *PlatformProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBitWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var platformProcessorTypeBitWidthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["32","64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformProcessorTypeBitWidthPropEnum = append(platformProcessorTypeBitWidthPropEnum, v)
	}
}

const (

	// PlatformProcessorBitWidthNr32 captures enum value "32"
	PlatformProcessorBitWidthNr32 string = "32"

	// PlatformProcessorBitWidthNr64 captures enum value "64"
	PlatformProcessorBitWidthNr64 string = "64"
)

// prop value enum
func (m *PlatformProcessor) validateBitWidthEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformProcessorTypeBitWidthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PlatformProcessor) validateBitWidth(formats strfmt.Registry) error {

	if swag.IsZero(m.BitWidth) { // not required
		return nil
	}

	// value enum
	if err := m.validateBitWidthEnum("processor"+"."+"bit_width", "body", m.BitWidth); err != nil {
		return err
	}

	return nil
}

var platformProcessorTypeCPUTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IA64","PowerPC","Sparc","x86"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformProcessorTypeCPUTypePropEnum = append(platformProcessorTypeCPUTypePropEnum, v)
	}
}

const (

	// PlatformProcessorCPUTypeIA64 captures enum value "IA64"
	PlatformProcessorCPUTypeIA64 string = "IA64"

	// PlatformProcessorCPUTypePowerPC captures enum value "PowerPC"
	PlatformProcessorCPUTypePowerPC string = "PowerPC"

	// PlatformProcessorCPUTypeSparc captures enum value "Sparc"
	PlatformProcessorCPUTypeSparc string = "Sparc"

	// PlatformProcessorCPUTypeX86 captures enum value "x86"
	PlatformProcessorCPUTypeX86 string = "x86"
)

// prop value enum
func (m *PlatformProcessor) validateCPUTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, platformProcessorTypeCPUTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PlatformProcessor) validateCPUType(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCPUTypeEnum("processor"+"."+"cpu_type", "body", m.CPUType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlatformProcessor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformProcessor) UnmarshalBinary(b []byte) error {
	var res PlatformProcessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1PlatformPagedListPlatformsItems Platform
//
// A platform upon which a build can be built.
// swagger:model v1PlatformPagedListPlatformsItems
type V1PlatformPagedListPlatformsItems struct {

	// cpu architecture
	// Required: true
	CPUArchitecture *V1PlatformPagedListPlatformsItemsCPUArchitecture `json:"cpu_architecture"`

	// cpu extensions
	CPUExtensions []*V1PlatformPagedListPlatformsItemsCPUExtensionsItems `json:"cpu_extensions"`

	// The date and time this platform was created.
	// Required: true
	// Format: date-time
	CreationTimestamp *strfmt.DateTime `json:"creation_timestamp"`

	// display name
	// Required: true
	DisplayName *string `json:"display_name"`

	// The last day on which this platform will be supported. Can be omitted if no last day has yet been determined.
	// Format: date
	EndOfSupportDate *strfmt.Date `json:"end_of_support_date,omitempty"`

	// gpu architecture
	GpuArchitecture *V1PlatformPagedListPlatformsItemsGpuArchitecture `json:"gpu_architecture,omitempty"`

	// images
	// Required: true
	Images []*V1PlatformPagedListPlatformsItemsImagesItems `json:"images"`

	// If true, the platform should be shown to the user as a selectable platform for an order. If false, the platform should be hidden from the user.
	IsUserVisible *bool `json:"is_user_visible,omitempty"`

	// kernel
	// Required: true
	Kernel *V1PlatformPagedListPlatformsItemsKernel `json:"kernel"`

	// kernel version
	// Required: true
	KernelVersion *V1PlatformPagedListPlatformsItemsKernelVersion `json:"kernel_version"`

	// libc
	Libc *V1PlatformPagedListPlatformsItemsLibc `json:"libc,omitempty"`

	// libc version
	LibcVersion *V1PlatformPagedListPlatformsItemsLibcVersion `json:"libc_version,omitempty"`

	// links
	// Required: true
	Links *V1PlatformPagedListPlatformsItemsLinks `json:"links"`

	// operating system
	// Required: true
	OperatingSystem *V1PlatformPagedListPlatformsItemsOperatingSystem `json:"operating_system"`

	// operating system version
	// Required: true
	OperatingSystemVersion *V1PlatformPagedListPlatformsItemsOperatingSystemVersion `json:"operating_system_version"`

	// platform id
	// Required: true
	// Format: uuid
	PlatformID *strfmt.UUID `json:"platform_id"`
}

// Validate validates this v1 platform paged list platforms items
func (m *V1PlatformPagedListPlatformsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndOfSupportDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKernel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKernelVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibcVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystemVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateCPUArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("cpu_architecture", "body", m.CPUArchitecture); err != nil {
		return err
	}

	if m.CPUArchitecture != nil {
		if err := m.CPUArchitecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu_architecture")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateCPUExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUExtensions) { // not required
		return nil
	}

	for i := 0; i < len(m.CPUExtensions); i++ {
		if swag.IsZero(m.CPUExtensions[i]) { // not required
			continue
		}

		if m.CPUExtensions[i] != nil {
			if err := m.CPUExtensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cpu_extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("creation_timestamp", "body", m.CreationTimestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("creation_timestamp", "body", "date-time", m.CreationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateEndOfSupportDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndOfSupportDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_of_support_date", "body", "date", m.EndOfSupportDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateGpuArchitecture(formats strfmt.Registry) error {

	if swag.IsZero(m.GpuArchitecture) { // not required
		return nil
	}

	if m.GpuArchitecture != nil {
		if err := m.GpuArchitecture.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpu_architecture")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateKernel(formats strfmt.Registry) error {

	if err := validate.Required("kernel", "body", m.Kernel); err != nil {
		return err
	}

	if m.Kernel != nil {
		if err := m.Kernel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kernel")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateKernelVersion(formats strfmt.Registry) error {

	if err := validate.Required("kernel_version", "body", m.KernelVersion); err != nil {
		return err
	}

	if m.KernelVersion != nil {
		if err := m.KernelVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kernel_version")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateLibc(formats strfmt.Registry) error {

	if swag.IsZero(m.Libc) { // not required
		return nil
	}

	if m.Libc != nil {
		if err := m.Libc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libc")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateLibcVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.LibcVersion) { // not required
		return nil
	}

	if m.LibcVersion != nil {
		if err := m.LibcVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libc_version")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateOperatingSystem(formats strfmt.Registry) error {

	if err := validate.Required("operating_system", "body", m.OperatingSystem); err != nil {
		return err
	}

	if m.OperatingSystem != nil {
		if err := m.OperatingSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validateOperatingSystemVersion(formats strfmt.Registry) error {

	if err := validate.Required("operating_system_version", "body", m.OperatingSystemVersion); err != nil {
		return err
	}

	if m.OperatingSystemVersion != nil {
		if err := m.OperatingSystemVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system_version")
			}
			return err
		}
	}

	return nil
}

func (m *V1PlatformPagedListPlatformsItems) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platform_id", "body", m.PlatformID); err != nil {
		return err
	}

	if err := validate.FormatOf("platform_id", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PlatformPagedListPlatformsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PlatformPagedListPlatformsItems) UnmarshalBinary(b []byte) error {
	var res V1PlatformPagedListPlatformsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

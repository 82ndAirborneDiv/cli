// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1NamespacePagedListNamespacesItemsAllOf1 Namespace Core
//
// The properties of a namespace needed to create a new one
// swagger:model v1NamespacePagedListNamespacesItemsAllOf1
type V1NamespacePagedListNamespacesItemsAllOf1 struct {

	// The name of the language the ingredients in this namespace are for. Will be set based on namespace type.
	// Enum: [perl python tcl]
	ForLanguage string `json:"for_language,omitempty"`

	// is public
	// Required: true
	IsPublic *bool `json:"is_public"`

	// The algorithm to use for name normalization in this namespace
	// Required: true
	// Enum: [none python]
	NameNormalizationAlgorithm *string `json:"name_normalization_algorithm"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// owner platform organization id
	// Required: true
	// Format: uuid
	OwnerPlatformOrganizationID *strfmt.UUID `json:"owner_platform_organization_id"`

	// The type of the namespace. A namespace type tells what the namespace contains.
	// Required: true
	// Enum: [bundle internal language-core language-ingredient platform-component shared-ingredient]
	Type *string `json:"type"`

	// The algorithm to use for version parsing in this namespace
	// Required: true
	// Enum: [feature generic perl python semver]
	VersionParsingAlgorithm *string `json:"version_parsing_algorithm"`
}

// Validate validates this v1 namespace paged list namespaces items all of1
func (m *V1NamespacePagedListNamespacesItemsAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPublic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameNormalizationAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerPlatformOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionParsingAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v1NamespacePagedListNamespacesItemsAllOf1TypeForLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["perl","python","tcl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NamespacePagedListNamespacesItemsAllOf1TypeForLanguagePropEnum = append(v1NamespacePagedListNamespacesItemsAllOf1TypeForLanguagePropEnum, v)
	}
}

const (

	// V1NamespacePagedListNamespacesItemsAllOf1ForLanguagePerl captures enum value "perl"
	V1NamespacePagedListNamespacesItemsAllOf1ForLanguagePerl string = "perl"

	// V1NamespacePagedListNamespacesItemsAllOf1ForLanguagePython captures enum value "python"
	V1NamespacePagedListNamespacesItemsAllOf1ForLanguagePython string = "python"

	// V1NamespacePagedListNamespacesItemsAllOf1ForLanguageTcl captures enum value "tcl"
	V1NamespacePagedListNamespacesItemsAllOf1ForLanguageTcl string = "tcl"
)

// prop value enum
func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateForLanguageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1NamespacePagedListNamespacesItemsAllOf1TypeForLanguagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateForLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.ForLanguage) { // not required
		return nil
	}

	// value enum
	if err := m.validateForLanguageEnum("for_language", "body", m.ForLanguage); err != nil {
		return err
	}

	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateIsPublic(formats strfmt.Registry) error {

	if err := validate.Required("is_public", "body", m.IsPublic); err != nil {
		return err
	}

	return nil
}

var v1NamespacePagedListNamespacesItemsAllOf1TypeNameNormalizationAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","python"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NamespacePagedListNamespacesItemsAllOf1TypeNameNormalizationAlgorithmPropEnum = append(v1NamespacePagedListNamespacesItemsAllOf1TypeNameNormalizationAlgorithmPropEnum, v)
	}
}

const (

	// V1NamespacePagedListNamespacesItemsAllOf1NameNormalizationAlgorithmNone captures enum value "none"
	V1NamespacePagedListNamespacesItemsAllOf1NameNormalizationAlgorithmNone string = "none"

	// V1NamespacePagedListNamespacesItemsAllOf1NameNormalizationAlgorithmPython captures enum value "python"
	V1NamespacePagedListNamespacesItemsAllOf1NameNormalizationAlgorithmPython string = "python"
)

// prop value enum
func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateNameNormalizationAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1NamespacePagedListNamespacesItemsAllOf1TypeNameNormalizationAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateNameNormalizationAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("name_normalization_algorithm", "body", m.NameNormalizationAlgorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameNormalizationAlgorithmEnum("name_normalization_algorithm", "body", *m.NameNormalizationAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateOwnerPlatformOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("owner_platform_organization_id", "body", m.OwnerPlatformOrganizationID); err != nil {
		return err
	}

	if err := validate.FormatOf("owner_platform_organization_id", "body", "uuid", m.OwnerPlatformOrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

var v1NamespacePagedListNamespacesItemsAllOf1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bundle","internal","language-core","language-ingredient","platform-component","shared-ingredient"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NamespacePagedListNamespacesItemsAllOf1TypeTypePropEnum = append(v1NamespacePagedListNamespacesItemsAllOf1TypeTypePropEnum, v)
	}
}

const (

	// V1NamespacePagedListNamespacesItemsAllOf1TypeBundle captures enum value "bundle"
	V1NamespacePagedListNamespacesItemsAllOf1TypeBundle string = "bundle"

	// V1NamespacePagedListNamespacesItemsAllOf1TypeInternal captures enum value "internal"
	V1NamespacePagedListNamespacesItemsAllOf1TypeInternal string = "internal"

	// V1NamespacePagedListNamespacesItemsAllOf1TypeLanguageCore captures enum value "language-core"
	V1NamespacePagedListNamespacesItemsAllOf1TypeLanguageCore string = "language-core"

	// V1NamespacePagedListNamespacesItemsAllOf1TypeLanguageIngredient captures enum value "language-ingredient"
	V1NamespacePagedListNamespacesItemsAllOf1TypeLanguageIngredient string = "language-ingredient"

	// V1NamespacePagedListNamespacesItemsAllOf1TypePlatformComponent captures enum value "platform-component"
	V1NamespacePagedListNamespacesItemsAllOf1TypePlatformComponent string = "platform-component"

	// V1NamespacePagedListNamespacesItemsAllOf1TypeSharedIngredient captures enum value "shared-ingredient"
	V1NamespacePagedListNamespacesItemsAllOf1TypeSharedIngredient string = "shared-ingredient"
)

// prop value enum
func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1NamespacePagedListNamespacesItemsAllOf1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var v1NamespacePagedListNamespacesItemsAllOf1TypeVersionParsingAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feature","generic","perl","python","semver"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NamespacePagedListNamespacesItemsAllOf1TypeVersionParsingAlgorithmPropEnum = append(v1NamespacePagedListNamespacesItemsAllOf1TypeVersionParsingAlgorithmPropEnum, v)
	}
}

const (

	// V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmFeature captures enum value "feature"
	V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmFeature string = "feature"

	// V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmGeneric captures enum value "generic"
	V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmGeneric string = "generic"

	// V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmPerl captures enum value "perl"
	V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmPerl string = "perl"

	// V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmPython captures enum value "python"
	V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmPython string = "python"

	// V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmSemver captures enum value "semver"
	V1NamespacePagedListNamespacesItemsAllOf1VersionParsingAlgorithmSemver string = "semver"
)

// prop value enum
func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateVersionParsingAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v1NamespacePagedListNamespacesItemsAllOf1TypeVersionParsingAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V1NamespacePagedListNamespacesItemsAllOf1) validateVersionParsingAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("version_parsing_algorithm", "body", m.VersionParsingAlgorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateVersionParsingAlgorithmEnum("version_parsing_algorithm", "body", *m.VersionParsingAlgorithm); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1NamespacePagedListNamespacesItemsAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1NamespacePagedListNamespacesItemsAllOf1) UnmarshalBinary(b []byte) error {
	var res V1NamespacePagedListNamespacesItemsAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order Order
//
// An order to create recipes for a set of requirements, for one or more platforms.
// swagger:model order
type Order struct {

	// List of k/v pair build options
	BuildOptions []*OrderBuildOptionsItems0 `json:"build_options"`

	// Order UUID, supplied by client to be copied to all resulting recipes
	// Required: true
	// Format: uuid
	OrderID *strfmt.UUID `json:"order_id"`

	// List of Platform IDs for the order
	// Required: true
	Platforms []strfmt.UUID `json:"platforms"`

	// List of requirements with version specifiers needed to satisfy the order
	// Required: true
	Requirements []*OrderRequirementsItems0 `json:"requirements"`

	// The date and time that the order was originally submitted
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateBuildOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildOptions); i++ {
		if swag.IsZero(m.BuildOptions[i]) { // not required
			continue
		}

		if m.BuildOptions[i] != nil {
			if err := m.BuildOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("build_options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	if err := validate.FormatOf("order_id", "body", "uuid", m.OrderID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Order) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("platforms", "body", m.Platforms); err != nil {
		return err
	}

	for i := 0; i < len(m.Platforms); i++ {

		if err := validate.FormatOf("platforms"+"."+strconv.Itoa(i), "body", "uuid", m.Platforms[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Order) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderBuildOptionsItems0 Build Option
//
// A build option is a setting for all ingredients in a recipe.
// swagger:model OrderBuildOptionsItems0
type OrderBuildOptionsItems0 struct {

	// Build option name
	// Required: true
	// Enum: [debug static threaded]
	Option *string `json:"option"`
}

// Validate validates this order build options items0
func (m *OrderBuildOptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderBuildOptionsItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["debug","static","threaded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderBuildOptionsItems0TypeOptionPropEnum = append(orderBuildOptionsItems0TypeOptionPropEnum, v)
	}
}

const (

	// OrderBuildOptionsItems0OptionDebug captures enum value "debug"
	OrderBuildOptionsItems0OptionDebug string = "debug"

	// OrderBuildOptionsItems0OptionStatic captures enum value "static"
	OrderBuildOptionsItems0OptionStatic string = "static"

	// OrderBuildOptionsItems0OptionThreaded captures enum value "threaded"
	OrderBuildOptionsItems0OptionThreaded string = "threaded"
)

// prop value enum
func (m *OrderBuildOptionsItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderBuildOptionsItems0TypeOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrderBuildOptionsItems0) validateOption(formats strfmt.Registry) error {

	if err := validate.Required("option", "body", m.Option); err != nil {
		return err
	}

	// value enum
	if err := m.validateOptionEnum("option", "body", *m.Option); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderBuildOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderBuildOptionsItems0) UnmarshalBinary(b []byte) error {
	var res OrderBuildOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderRequirementsItems0 Requirement Sub Schema
//
// A requirement is a single package name and version specifier.
// swagger:model OrderRequirementsItems0
type OrderRequirementsItems0 struct {

	// The ID of the ingredient that should be used to fulfill this requirement. Can be used to override the default choice of provider for the specified package. Must be an ingredient that actually provides the specified package.
	// Format: uuid
	IngredientID strfmt.UUID `json:"ingredient_id,omitempty"`

	// The namespace for the required package. For now, this can be empty as it is only used to request pre-platform installer ingredients.
	Namespace string `json:"namespace,omitempty"`

	// The name of the required package, If no ingredient ID is specified, the default provider of this package will be chosen.
	// Required: true
	PackageName *string `json:"package_name"`

	// The specifier for the acceptable versions of this package. This can be omitted, in which case any version is acceptable.
	VersionSpecifier string `json:"version_specifier,omitempty"`
}

// Validate validates this order requirements items0
func (m *OrderRequirementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderRequirementsItems0) validateIngredientID(formats strfmt.Registry) error {

	if swag.IsZero(m.IngredientID) { // not required
		return nil
	}

	if err := validate.FormatOf("ingredient_id", "body", "uuid", m.IngredientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderRequirementsItems0) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("package_name", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderRequirementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderRequirementsItems0) UnmarshalBinary(b []byte) error {
	var res OrderRequirementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

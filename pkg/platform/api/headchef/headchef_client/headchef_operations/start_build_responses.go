// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// StartBuildReader is a Reader for the StartBuild structure.
type StartBuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartBuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewStartBuildCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewStartBuildAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewStartBuildDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartBuildCreated creates a StartBuildCreated with default headers values
func NewStartBuildCreated() *StartBuildCreated {
	return &StartBuildCreated{}
}

/*StartBuildCreated handles this case with default header values.

The requested build has already ended
*/
type StartBuildCreated struct {
	Payload headchef_models.BuildEndedResponse
}

func (o *StartBuildCreated) Error() string {
	return fmt.Sprintf("[POST /builds][%d] startBuildCreated  %+v", 201, o.Payload)
}

func (o *StartBuildCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildAccepted creates a StartBuildAccepted with default headers values
func NewStartBuildAccepted() *StartBuildAccepted {
	return &StartBuildAccepted{}
}

/*StartBuildAccepted handles this case with default header values.

The requested build has been started but hasn't yet completed
*/
type StartBuildAccepted struct {
	Payload *headchef_models.BuildStartedResponse
}

func (o *StartBuildAccepted) Error() string {
	return fmt.Sprintf("[POST /builds][%d] startBuildAccepted  %+v", 202, o.Payload)
}

func (o *StartBuildAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildStartedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartBuildDefault creates a StartBuildDefault with default headers values
func NewStartBuildDefault(code int) *StartBuildDefault {
	return &StartBuildDefault{
		_statusCode: code,
	}
}

/*StartBuildDefault handles this case with default header values.

If there is an error processing the request
*/
type StartBuildDefault struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the start build default response
func (o *StartBuildDefault) Code() int {
	return o._statusCode
}

func (o *StartBuildDefault) Error() string {
	return fmt.Sprintf("[POST /builds][%d] startBuild default  %+v", o._statusCode, o.Payload)
}

func (o *StartBuildDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// NewHackParams creates a new HackParams object
// with the default values initialized.
func NewHackParams() *HackParams {
	var ()
	return &HackParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHackParamsWithTimeout creates a new HackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHackParamsWithTimeout(timeout time.Duration) *HackParams {
	var ()
	return &HackParams{

		timeout: timeout,
	}
}

// NewHackParamsWithContext creates a new HackParams object
// with the default values initialized, and the ability to set a context for a request
func NewHackParamsWithContext(ctx context.Context) *HackParams {
	var ()
	return &HackParams{

		Context: ctx,
	}
}

// NewHackParamsWithHTTPClient creates a new HackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHackParamsWithHTTPClient(client *http.Client) *HackParams {
	var ()
	return &HackParams{
		HTTPClient: client,
	}
}

/*HackParams contains all the parameters to send to the API endpoint
for the hack operation typically these are written to a http.Request
*/
type HackParams struct {

	/*Recipe*/
	Recipe *headchef_models.BuildRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the hack params
func (o *HackParams) WithTimeout(timeout time.Duration) *HackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the hack params
func (o *HackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the hack params
func (o *HackParams) WithContext(ctx context.Context) *HackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the hack params
func (o *HackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the hack params
func (o *HackParams) WithHTTPClient(client *http.Client) *HackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the hack params
func (o *HackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRecipe adds the recipe to the hack params
func (o *HackParams) WithRecipe(recipe *headchef_models.BuildRequest) *HackParams {
	o.SetRecipe(recipe)
	return o
}

// SetRecipe adds the recipe to the hack params
func (o *HackParams) SetRecipe(recipe *headchef_models.BuildRequest) {
	o.Recipe = recipe
}

// WriteToRequest writes these params to a swagger request
func (o *HackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Recipe != nil {
		if err := r.SetBodyParam(o.Recipe); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

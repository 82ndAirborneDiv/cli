// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// HackReader is a Reader for the Hack structure.
type HackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewHackCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewHackAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewHackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewHackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHackOK creates a HackOK with default headers values
func NewHackOK() *HackOK {
	return &HackOK{}
}

/*HackOK handles this case with default header values.

Hack success
*/
type HackOK struct {
	Payload *headchef_models.StatusMessageEnvelope
}

func (o *HackOK) Error() string {
	return fmt.Sprintf("[GET /][%d] hackOK  %+v", 200, o.Payload)
}

func (o *HackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.StatusMessageEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHackCreated creates a HackCreated with default headers values
func NewHackCreated() *HackCreated {
	return &HackCreated{}
}

/*HackCreated handles this case with default header values.

build_completed
*/
type HackCreated struct {
	Payload *headchef_models.BuildCompleted
}

func (o *HackCreated) Error() string {
	return fmt.Sprintf("[GET /][%d] hackCreated  %+v", 201, o.Payload)
}

func (o *HackCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildCompleted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHackAccepted creates a HackAccepted with default headers values
func NewHackAccepted() *HackAccepted {
	return &HackAccepted{}
}

/*HackAccepted handles this case with default header values.

build_started
*/
type HackAccepted struct {
	Payload *headchef_models.BuildStarted
}

func (o *HackAccepted) Error() string {
	return fmt.Sprintf("[GET /][%d] hackAccepted  %+v", 202, o.Payload)
}

func (o *HackAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildStarted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHackBadRequest creates a HackBadRequest with default headers values
func NewHackBadRequest() *HackBadRequest {
	return &HackBadRequest{}
}

/*HackBadRequest handles this case with default header values.

Hack validation error
*/
type HackBadRequest struct {
	Payload *headchef_models.RestAPIValidationError
}

func (o *HackBadRequest) Error() string {
	return fmt.Sprintf("[GET /][%d] hackBadRequest  %+v", 400, o.Payload)
}

func (o *HackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHackInternalServerError creates a HackInternalServerError with default headers values
func NewHackInternalServerError() *HackInternalServerError {
	return &HackInternalServerError{}
}

/*HackInternalServerError handles this case with default header values.

build_failed
*/
type HackInternalServerError struct {
	Payload *headchef_models.BuildFailed
}

func (o *HackInternalServerError) Error() string {
	return fmt.Sprintf("[GET /][%d] hackInternalServerError  %+v", 500, o.Payload)
}

func (o *HackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.BuildFailed)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package headchef_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	headchef_models "github.com/ActiveState/cli/pkg/platform/api/headchef/headchef_models"
)

// WebsocketReader is a Reader for the Websocket structure.
type WebsocketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WebsocketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewWebsocketOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewWebsocketDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWebsocketOK creates a WebsocketOK with default headers values
func NewWebsocketOK() *WebsocketOK {
	return &WebsocketOK{}
}

/*WebsocketOK handles this case with default header values.

Build status
*/
type WebsocketOK struct {
	Payload *headchef_models.StatusMessageEnvelope
}

func (o *WebsocketOK) Error() string {
	return fmt.Sprintf("[GET /][%d] websocketOK  %+v", 200, o.Payload)
}

func (o *WebsocketOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.StatusMessageEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWebsocketDefault creates a WebsocketDefault with default headers values
func NewWebsocketDefault(code int) *WebsocketDefault {
	return &WebsocketDefault{
		_statusCode: code,
	}
}

/*WebsocketDefault handles this case with default header values.

If there is an error processing the request
*/
type WebsocketDefault struct {
	_statusCode int

	Payload *headchef_models.RestAPIError
}

// Code gets the status code for the websocket default response
func (o *WebsocketDefault) Code() int {
	return o._statusCode
}

func (o *WebsocketDefault) Error() string {
	return fmt.Sprintf("[GET /][%d] websocket default  %+v", o._statusCode, o.Payload)
}

func (o *WebsocketDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(headchef_models.RestAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

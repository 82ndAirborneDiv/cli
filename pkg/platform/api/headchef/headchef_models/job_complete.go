// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobComplete JobComplete
//
// A Job reports status details from the scheduler API.
// swagger:model jobComplete
type JobComplete struct {

	// The timestamp for when this job completed.
	// Required: true
	// Format: date-time
	Finished *strfmt.DateTime `json:"finished"`

	// Job UUID. Returns by the scheduler when a job is created.
	// Required: true
	// Format: uuid
	JobID *strfmt.UUID `json:"job_id"`

	// The state of the job at time of completion.
	// Required: true
	// Enum: [TASK_DROPPED TASK_ERROR TASK_FAILED TASK_FINISHED TASK_GONE TASK_GONE_BY_OPERATOR TASK_KILLED TASK_KILLING TASK_LOST TASK_RUNNING TASK_STAGING TASK_STARTING TASK_UNKNOWN TASK_UNREACHABLE]
	State *string `json:"state"`
}

// Validate validates this job complete
func (m *JobComplete) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobComplete) validateFinished(formats strfmt.Registry) error {

	if err := validate.Required("finished", "body", m.Finished); err != nil {
		return err
	}

	if err := validate.FormatOf("finished", "body", "date-time", m.Finished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobComplete) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	if err := validate.FormatOf("job_id", "body", "uuid", m.JobID.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobCompleteTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TASK_DROPPED","TASK_ERROR","TASK_FAILED","TASK_FINISHED","TASK_GONE","TASK_GONE_BY_OPERATOR","TASK_KILLED","TASK_KILLING","TASK_LOST","TASK_RUNNING","TASK_STAGING","TASK_STARTING","TASK_UNKNOWN","TASK_UNREACHABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobCompleteTypeStatePropEnum = append(jobCompleteTypeStatePropEnum, v)
	}
}

const (

	// JobCompleteStateTASKDROPPED captures enum value "TASK_DROPPED"
	JobCompleteStateTASKDROPPED string = "TASK_DROPPED"

	// JobCompleteStateTASKERROR captures enum value "TASK_ERROR"
	JobCompleteStateTASKERROR string = "TASK_ERROR"

	// JobCompleteStateTASKFAILED captures enum value "TASK_FAILED"
	JobCompleteStateTASKFAILED string = "TASK_FAILED"

	// JobCompleteStateTASKFINISHED captures enum value "TASK_FINISHED"
	JobCompleteStateTASKFINISHED string = "TASK_FINISHED"

	// JobCompleteStateTASKGONE captures enum value "TASK_GONE"
	JobCompleteStateTASKGONE string = "TASK_GONE"

	// JobCompleteStateTASKGONEBYOPERATOR captures enum value "TASK_GONE_BY_OPERATOR"
	JobCompleteStateTASKGONEBYOPERATOR string = "TASK_GONE_BY_OPERATOR"

	// JobCompleteStateTASKKILLED captures enum value "TASK_KILLED"
	JobCompleteStateTASKKILLED string = "TASK_KILLED"

	// JobCompleteStateTASKKILLING captures enum value "TASK_KILLING"
	JobCompleteStateTASKKILLING string = "TASK_KILLING"

	// JobCompleteStateTASKLOST captures enum value "TASK_LOST"
	JobCompleteStateTASKLOST string = "TASK_LOST"

	// JobCompleteStateTASKRUNNING captures enum value "TASK_RUNNING"
	JobCompleteStateTASKRUNNING string = "TASK_RUNNING"

	// JobCompleteStateTASKSTAGING captures enum value "TASK_STAGING"
	JobCompleteStateTASKSTAGING string = "TASK_STAGING"

	// JobCompleteStateTASKSTARTING captures enum value "TASK_STARTING"
	JobCompleteStateTASKSTARTING string = "TASK_STARTING"

	// JobCompleteStateTASKUNKNOWN captures enum value "TASK_UNKNOWN"
	JobCompleteStateTASKUNKNOWN string = "TASK_UNKNOWN"

	// JobCompleteStateTASKUNREACHABLE captures enum value "TASK_UNREACHABLE"
	JobCompleteStateTASKUNREACHABLE string = "TASK_UNREACHABLE"
)

// prop value enum
func (m *JobComplete) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobCompleteTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobComplete) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobComplete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobComplete) UnmarshalBinary(b []byte) error {
	var res JobComplete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

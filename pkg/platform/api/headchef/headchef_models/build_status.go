// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildStatus Build Result
//
// The fields that all build status messages have in common.
// swagger:model BuildStatus
type BuildStatus struct {

	// Build Request UUID Sub Schema
	//
	// A unique identifier for a build request.
	// Required: true
	// Format: uuid
	BuildRequestID *strfmt.UUID `json:"build_request_id"`

	// recipe id
	// Required: true
	// Format: uuid
	RecipeID *strfmt.UUID `json:"recipe_id"`

	// The timestamp for the message.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// Indicates the type of the contained message.
	// Required: true
	// Enum: [build_completed build_failed build_started]
	Type *string `json:"type"`
}

// Validate validates this build status
func (m *BuildStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildStatus) validateBuildRequestID(formats strfmt.Registry) error {

	if err := validate.Required("build_request_id", "body", m.BuildRequestID); err != nil {
		return err
	}

	if err := validate.FormatOf("build_request_id", "body", "uuid", m.BuildRequestID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatus) validateRecipeID(formats strfmt.Registry) error {

	if err := validate.Required("recipe_id", "body", m.RecipeID); err != nil {
		return err
	}

	if err := validate.FormatOf("recipe_id", "body", "uuid", m.RecipeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildStatus) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var buildStatusTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["build_completed","build_failed","build_started"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		buildStatusTypeTypePropEnum = append(buildStatusTypeTypePropEnum, v)
	}
}

const (

	// BuildStatusTypeBuildCompleted captures enum value "build_completed"
	BuildStatusTypeBuildCompleted string = "build_completed"

	// BuildStatusTypeBuildFailed captures enum value "build_failed"
	BuildStatusTypeBuildFailed string = "build_failed"

	// BuildStatusTypeBuildStarted captures enum value "build_started"
	BuildStatusTypeBuildStarted string = "build_started"
)

// prop value enum
func (m *BuildStatus) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, buildStatusTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BuildStatus) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildStatus) UnmarshalBinary(b []byte) error {
	var res BuildStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatusMessageEnvelopeBody12 General log message
//
// A general status message
// swagger:model statusMessageEnvelopeBody12
type StatusMessageEnvelopeBody12 struct {

	// facility
	// Required: true
	// Enum: [DIE DUMP ERROR INFO LOG WARN]
	Facility *string `json:"facility"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this status message envelope body12
func (m *StatusMessageEnvelopeBody12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusMessageEnvelopeBody12TypeFacilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DIE","DUMP","ERROR","INFO","LOG","WARN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusMessageEnvelopeBody12TypeFacilityPropEnum = append(statusMessageEnvelopeBody12TypeFacilityPropEnum, v)
	}
}

const (

	// StatusMessageEnvelopeBody12FacilityDIE captures enum value "DIE"
	StatusMessageEnvelopeBody12FacilityDIE string = "DIE"

	// StatusMessageEnvelopeBody12FacilityDUMP captures enum value "DUMP"
	StatusMessageEnvelopeBody12FacilityDUMP string = "DUMP"

	// StatusMessageEnvelopeBody12FacilityERROR captures enum value "ERROR"
	StatusMessageEnvelopeBody12FacilityERROR string = "ERROR"

	// StatusMessageEnvelopeBody12FacilityINFO captures enum value "INFO"
	StatusMessageEnvelopeBody12FacilityINFO string = "INFO"

	// StatusMessageEnvelopeBody12FacilityLOG captures enum value "LOG"
	StatusMessageEnvelopeBody12FacilityLOG string = "LOG"

	// StatusMessageEnvelopeBody12FacilityWARN captures enum value "WARN"
	StatusMessageEnvelopeBody12FacilityWARN string = "WARN"
)

// prop value enum
func (m *StatusMessageEnvelopeBody12) validateFacilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statusMessageEnvelopeBody12TypeFacilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusMessageEnvelopeBody12) validateFacility(formats strfmt.Registry) error {

	if err := validate.Required("facility", "body", m.Facility); err != nil {
		return err
	}

	// value enum
	if err := m.validateFacilityEnum("facility", "body", *m.Facility); err != nil {
		return err
	}

	return nil
}

func (m *StatusMessageEnvelopeBody12) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusMessageEnvelopeBody12) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusMessageEnvelopeBody12) UnmarshalBinary(b []byte) error {
	var res StatusMessageEnvelopeBody12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

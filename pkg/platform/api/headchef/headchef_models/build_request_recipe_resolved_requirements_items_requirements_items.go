// Code generated by go-swagger; DO NOT EDIT.

package headchef_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildRequestRecipeResolvedRequirementsItemsRequirementsItems Requirement Sub Schema
//
// A requirement is a single package name and version specifier.
// swagger:model buildRequestRecipeResolvedRequirementsItemsRequirementsItems
type BuildRequestRecipeResolvedRequirementsItemsRequirementsItems struct {

	// The ID of the ingredient that should be used to fulfill this requirement. Can be used to override the default choice of provider for the specified package. Must be an ingredient that actually provides the specified package.
	// Format: uuid
	IngredientID strfmt.UUID `json:"ingredient_id,omitempty"`

	// The namespace for the required package. For now, this can be empty as it is only used to request pre-platform installer ingredients.
	Namespace string `json:"namespace,omitempty"`

	// The name of the required package, If no ingredient ID is specified, the default provider of this package will be chosen.
	// Required: true
	PackageName *string `json:"package_name"`

	// The specifier for the acceptable versions of this package. This can be omitted, in which case any version is acceptable.
	VersionSpecifier string `json:"version_specifier,omitempty"`
}

// Validate validates this build request recipe resolved requirements items requirements items
func (m *BuildRequestRecipeResolvedRequirementsItemsRequirementsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildRequestRecipeResolvedRequirementsItemsRequirementsItems) validateIngredientID(formats strfmt.Registry) error {

	if swag.IsZero(m.IngredientID) { // not required
		return nil
	}

	if err := validate.FormatOf("ingredient_id", "body", "uuid", m.IngredientID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BuildRequestRecipeResolvedRequirementsItemsRequirementsItems) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("package_name", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildRequestRecipeResolvedRequirementsItemsRequirementsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildRequestRecipeResolvedRequirementsItemsRequirementsItems) UnmarshalBinary(b []byte) error {
	var res BuildRequestRecipeResolvedRequirementsItemsRequirementsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

#! /usr/bin/env bash

function availableCalls() {
	grep "func.*Client) \w*(params.*error) {" ./api/* -r |
		grep -E "(\w|/)*.go:.*\w\(params" -o |
		sed 's/:func (\w* \*Client) /\t/g; s/(params//g' |
		sed 's#^/##g' |
		column -c 2
}

function probableCalls() {
	local func="${1}"
	grep ".*=.*${func}(.*" * -nr |
		grep ".*.go:\d*:func" -v
}

function flagsBool() {
	local args=${1}
	local flags=${@:2}
	[[ "${args}" == "--" ]] && echo "false" && return

	for arg in ${args}; do
		for flag in ${flags}; do
			[[ "${arg}" == "${flag}" ]] && echo true && return
		done
	done

	echo "false" && return
}

function main() {
	local shouldRepeatMethods="$(flagsBool "${*}" "-r" "--repeat-methods")"

	echo "This is \"best effort\" since it is based on text and not AST analysis."

	local file func lastFile pkg funcInfo
	echo "$(availableCalls)" | while read -r line; do
		file="${line%%$'\t'*}"
		func="${line##*$'\t'}"

		if [[ "${file}" != "${lastFile}" ]]; then
			pkg="$(grep "package .*" "${file}" | sed 's/package //g')"
			echo "${file}"
			lastFile="${file}"
		fi

		funcInfo="\t${pkg}.Client.${func}"
		echo -e "${funcInfo}"

		echo "$(probableCalls "${func}")" | while read -r l; do
			[[ -z "${l}" ]] && continue

			l="$(echo "${l}" | tr -s "\t")"

			$shouldRepeatMethods && echo -en "${funcInfo}" || echo -en "\t"
			echo -e "\t${l}"
		done
	done
}

[[ $# -gt 0 ]] && main ${@} || main "--"

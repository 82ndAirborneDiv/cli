// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package idl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VersionSvcClient is the client API for VersionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionSvcClient interface {
	StateVersion(ctx context.Context, in *StateVersionRequest, opts ...grpc.CallOption) (*StateVersionResponse, error)
}

type versionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionSvcClient(cc grpc.ClientConnInterface) VersionSvcClient {
	return &versionSvcClient{cc}
}

func (c *versionSvcClient) StateVersion(ctx context.Context, in *StateVersionRequest, opts ...grpc.CallOption) (*StateVersionResponse, error) {
	out := new(StateVersionResponse)
	err := c.cc.Invoke(ctx, "/main.VersionSvc/StateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionSvcServer is the server API for VersionSvc service.
// All implementations must embed UnimplementedVersionSvcServer
// for forward compatibility
type VersionSvcServer interface {
	StateVersion(context.Context, *StateVersionRequest) (*StateVersionResponse, error)
	mustEmbedUnimplementedVersionSvcServer()
}

// UnimplementedVersionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedVersionSvcServer struct {
}

func (UnimplementedVersionSvcServer) StateVersion(context.Context, *StateVersionRequest) (*StateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateVersion not implemented")
}
func (UnimplementedVersionSvcServer) mustEmbedUnimplementedVersionSvcServer() {}

// UnsafeVersionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionSvcServer will
// result in compilation errors.
type UnsafeVersionSvcServer interface {
	mustEmbedUnimplementedVersionSvcServer()
}

func RegisterVersionSvcServer(s grpc.ServiceRegistrar, srv VersionSvcServer) {
	s.RegisterService(&VersionSvc_ServiceDesc, srv)
}

func _VersionSvc_StateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionSvcServer).StateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.VersionSvc/StateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionSvcServer).StateVersion(ctx, req.(*StateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VersionSvc_ServiceDesc is the grpc.ServiceDesc for VersionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VersionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.VersionSvc",
	HandlerType: (*VersionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StateVersion",
			Handler:    _VersionSvc_StateVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}

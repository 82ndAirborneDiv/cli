// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package locale

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiBvbmJlcGFhbGQKCnN0YXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbgphY3RpdmF0ZV9wcm9qZWN0OiAKICBvdGhlcjogYWN0aXZlZXIgZWVuIHByb2plY3QKdXNhZ2VfdHBsOiAKICBvdGhlcjogIgpHZWJydWlrOgogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0KICBbWy5Vc2VMaW5lXV0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNzZW46W1tCUl1dCiAgW1suTmFtZUFuZEFsaWFzZXNdXVtbZW5kXV0KCltbaWYgLkhhc0V4YW1wbGVdXQpbW0JSXV1bW0JSXV0KVm9vcmJlZWxkZW46W1tCUl1dCiAgW1suRXhhbXBsZV1dCltbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsZSBGbGFnczogCltbQlJdXVtbLkluaGVyaXRlZEZsYWdzLkZsYWdVc2FnZXMgfCB0cmltVHJhaWxpbmdXaGl0ZXNwYWNlc11dCltbZW5kXV0KCltbaWYgLkhhc0hlbHBTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpNZWVyZGVyZSBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KR2VicnVpayBcIltbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdIC0taGVscFwiIHZvb3IgbWVlciBpbmZvcm1hdGllIG92ZXIgZWVuIGNvbW1hbmQuW1tlbmRdXVtbQlJdXSIKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IExva2FsaXNhdGllCgpzZWNyZXRzX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogQmVoZWVyIGdlaGVpbWVuCnNlY3JldHNfc2V0X2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2V0IHRoZSB2YWx1ZSBvZiBhIHNlY3JldApzZWNyZXRzX3NldF9hcmdfbmFtZV9uYW1lOgogIG90aGVyOiBzZWNyZXQtbmFtZQpzZWNyZXRzX3NldF9hcmdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiBTZWNyZXQKc2VjcmV0c19zZXRfYXJnX3ZhbHVlX25hbWU6CiAgb3RoZXI6IHNlY3JldC12YWx1ZQpzZWNyZXRzX3NldF9hcmdfdmFsdWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFZhbHVlIG9mIHVuZW5jcnlwdGVkIFNlY3JldApzZWNyZXRzX3NldF9mbGFnX3Byb2plY3Q6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgcHJvamVjdApzZWNyZXRzX3NldF9mbGFnX3VzZXI6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgdXNlcgpzZWNyZXRzX3NoYXJlX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2hhcmUgeW91ciBvcmdhbml6YXRpb24gYW5kIHByb2plY3Qgc2VjcmV0cyB3aXRoIGFub3RoZXIgdXNlcgpzZWNyZXRzX3NoYXJlX2FyZ191c2VyX25hbWU6CiAgb3RoZXI6IHVzZXItaGFuZGxlCnNlY3JldHNfc2hhcmVfYXJnX3VzZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IFVzZXJuYW1lIG9mIHVzZXIgaW4geW91ciBvcmdhbml6YXRpb24Kc2VjcmV0c19jb2xfbmFtZToKICBvdGhlcjogTmFtZQpzZWNyZXRzX2NvbF9zY29wZToKICBvdGhlcjogU2NvcGUKc2VjcmV0c19zY29wZV91c2VyX3Byb2plY3Q6CiAgb3RoZXI6IFVzZXIgUHJvamVjdApzZWNyZXRzX3Njb3BlX3VzZXJfb3JnOgogIG90aGVyOiBVc2VyIE9yZ2FuaXphdGlvbgpzZWNyZXRzX3Njb3BlX3Byb2plY3Q6CiAgb3RoZXI6IFByb2plY3QKc2VjcmV0c19zY29wZV9vcmc6CiAgb3RoZXI6IE9yZ2FuaXphdGlvbgpzZWNyZXRzX2VycjoKICBvdGhlcjogRXJyb3IgbWFuYWdpbmcgdXNlcidzIFNlY3JldHMKc2VjcmV0c19lcnJfbm9fc2VjcmV0c19mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgYW55IFNlY3JldHMgZm9yIFVzZXIKc2VjcmV0c19lcnJfZW5jcnlwdGluZzoKICBvdGhlcjogIkVycm9yIGVuY3J5cHRpbmcgYSB1c2VyJ3MgU2VjcmV0OiB7ey5WMH19IgpzZWNyZXRzX2Vycl9kZWNyeXB0aW5nOgogIG90aGVyOiAiRXJyb3IgZGVjcnlwdGluZyBhIHVzZXIncyBTZWNyZXQ6IHt7LlYwfX0iCnNlY3JldHNfZXJyX3NhdmU6CiAgb3RoZXI6IEVycm9yIHVwZGF0aW5nIHVzZXIncyBTZWNyZXRzCnNlY3JldHNfZXJyX2Jhc2U2NF9kZWNvZGluZzoKICBvdGhlcjogRXJyb3IgYmFzZTY0IGRlY29kaW5nIHNlY3JldCB2YWx1ZQoKc2VjcmV0c19leHBhbmRfZXJyX3NwZWNfdW5kZWZpbmVkOgogIG90aGVyOiAic2VjcmV0IHNwZWNpZmljYXRpb24gZm9yIGB7ey5WMH19YCBub3QgZGVmaW5lZCBpbiBwcm9qZWN0IgpzZWNyZXRzX2V4cGFuZF9lcnJfbm90X2ZvdW5kOgogIG90aGVyOiAidW5hYmxlIHRvIGxvY2F0ZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgc2VjcmV0IGB7ey5WMH19YCIKCmtleXBhaXJfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNYW5hZ2UgWW91ciBLZXlwYWlyCmtleXBhaXJfZ2VuZXJhdGVfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBHZW5lcmF0ZSBhbmQgdXBsb2FkIGEgbmV3IEtleXBhaXIKa2V5cGFpcl9lcnI6CiAgb3RoZXI6IFVuYWJsZSB0byBhY2Nlc3MgdXNlcidzIEtleXBhaXIKa2V5cGFpcl9lcnJfbm90X2ZvdW5kOgogIG90aGVyOiBLZXlwYWlyIG5vdCB5ZXQgZ2VuZXJhdGVkCmtleXBhaXJfZXJyX3NhdmU6CiAgb3RoZXI6IEtleXBhaXIgY291bGQgbm90IGJlIHNhdmVkCmtleXBhaXJfZXJyX3B1YmxpY2tleV9ub3RfZm91bmQ6CiAgb3RoZXI6IE5vIHB1YmxpYy1rZXkgZm91bmQgZm9yIHVzZXIgYHt7LlYwfX1gICh7ey5WMX19KQoKa2V5cGFpcnNfZXJyX2JpdGxlbmd0aF90b29fc2hvcnQ6CiAgb3RoZXI6IGJpdC1sZW5ndGggdG9vIHNob3J0CmtleXBhaXJzX2Vycl9wZW1fZW5jb2Rpbmc6CiAgb3RoZXI6IGludmFsaWQgUEVNIGVuY29kaW5nCmtleXBhaXJzX2Vycl9pbnZhbGlkX3JzYV9wdWJsaWNrZXk6CiAgb3RoZXI6IHByb3ZpZGVkIGtleSBub3QgYW4gUlNBIHB1YmxpYy1rZXkK\"")
}

// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package locale

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiBvbmJlcGFhbGQKCnN0YXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbgphY3RpdmF0ZV9wcm9qZWN0OiAKICBvdGhlcjogYWN0aXZlZXIgZWVuIHByb2plY3QKdXNhZ2VfdHBsOiAKICBvdGhlcjogIgpHZWJydWlrOgogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0KICBbWy5Vc2VMaW5lXV0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNzZW46W1tCUl1dCiAgW1suTmFtZUFuZEFsaWFzZXNdXVtbZW5kXV0KCltbaWYgLkhhc0V4YW1wbGVdXQpbW0JSXV1bW0JSXV0KVm9vcmJlZWxkZW46W1tCUl1dCiAgW1suRXhhbXBsZV1dCltbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsZSBGbGFnczogCltbQlJdXVtbLkluaGVyaXRlZEZsYWdzLkZsYWdVc2FnZXMgfCB0cmltVHJhaWxpbmdXaGl0ZXNwYWNlc11dCltbZW5kXV0KCltbaWYgLkhhc0hlbHBTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpNZWVyZGVyZSBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KR2VicnVpayBcIltbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdIC0taGVscFwiIHZvb3IgbWVlciBpbmZvcm1hdGllIG92ZXIgZWVuIGNvbW1hbmQuW1tlbmRdXVtbQlJdXSIKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IExva2FsaXNhdGllCgpzZWNyZXRzX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogQmVoZWVyIGdlaGVpbWVuCnNlY3JldHNfc2V0X2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2V0IHRoZSB2YWx1ZSBvZiBhIHNlY3JldApzZWNyZXRzX3NldF9hcmdfbmFtZV9uYW1lOgogIG90aGVyOiBzZWNyZXQtbmFtZQpzZWNyZXRzX3NldF9hcmdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiBTZWNyZXQKc2VjcmV0c19zZXRfYXJnX3ZhbHVlX25hbWU6CiAgb3RoZXI6IHNlY3JldC12YWx1ZQpzZWNyZXRzX3NldF9hcmdfdmFsdWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFZhbHVlIG9mIHVuZW5jcnlwdGVkIFNlY3JldApzZWNyZXRzX3NldF9mbGFnX3Byb2plY3Q6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgcHJvamVjdApzZWNyZXRzX3NldF9mbGFnX3VzZXI6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgdXNlcgpzZWNyZXRzX3NoYXJlX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2hhcmUgeW91ciBvcmdhbml6YXRpb24gYW5kIHByb2plY3Qgc2VjcmV0cyB3aXRoIGFub3RoZXIgdXNlcgpzZWNyZXRzX3NoYXJlX2FyZ191c2VyX25hbWU6CiAgb3RoZXI6IHVzZXItaGFuZGxlCnNlY3JldHNfc2hhcmVfYXJnX3VzZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IFVzZXJuYW1lIG9mIHVzZXIgaW4geW91ciBvcmdhbml6YXRpb24Kc2VjcmV0c19jb2xfbmFtZToKICBvdGhlcjogTmFtZQpzZWNyZXRzX2NvbF9zY29wZToKICBvdGhlcjogU2NvcGUKc2VjcmV0c19zY29wZV91c2VyX3Byb2plY3Q6CiAgb3RoZXI6IFVzZXIgUHJvamVjdApzZWNyZXRzX3Njb3BlX3VzZXJfb3JnOgogIG90aGVyOiBVc2VyIE9yZ2FuaXphdGlvbgpzZWNyZXRzX3Njb3BlX3Byb2plY3Q6CiAgb3RoZXI6IFByb2plY3QKc2VjcmV0c19zY29wZV9vcmc6CiAgb3RoZXI6IE9yZ2FuaXphdGlvbgpzZWNyZXRzX2VycjoKICBvdGhlcjogRXJyb3IgbWFuYWdpbmcgdXNlcidzIFNlY3JldHMKc2VjcmV0c19lcnJfbm9fc2VjcmV0c19mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgYW55IFNlY3JldHMgZm9yIFVzZXIKc2VjcmV0c19lcnJfZW5jcnlwdGluZzoKICBvdGhlcjogRXJyb3IgZW5jcnlwdGluZyBhIHVzZXIncyBTZWNyZXQKc2VjcmV0c19lcnJfZGVjcnlwdGluZzoKICBvdGhlcjogRXJyb3IgZGVjcnlwdGluZyBhIHVzZXIncyBTZWNyZXQKc2VjcmV0c19lcnJfc2F2ZToKICBvdGhlcjogRXJyb3IgdXBkYXRpbmcgdXNlcidzIFNlY3JldHMKc2VjcmV0c19lcnJfYmFzZTY0X2RlY29kaW5nOgogIG90aGVyOiBFcnJvciBiYXNlNjQgZGVjb2Rpbmcgc2VjcmV0IHZhbHVlCgpzZWNyZXRzX2V4cGFuZF9lcnJfc3BlY191bmRlZmluZWQ6CiAgb3RoZXI6ICJzZWNyZXQgc3BlY2lmaWNhdGlvbiBmb3IgYHt7LlYwfX1gIG5vdCBkZWZpbmVkIGluIHByb2plY3QiCnNlY3JldHNfZXhwYW5kX2Vycl9ub3RfZm91bmQ6CiAgb3RoZXI6ICJ1bmFibGUgdG8gbG9jYXRlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBzZWNyZXQgYHt7LlYwfX1gIgoKa2V5cGFpcl9jbWRfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1hbmFnZSBZb3VyIEtleXBhaXIKa2V5cGFpcl9nZW5lcmF0ZV9jbWRfZGVzY3JpcHRpb246CiAgb3RoZXI6IEdlbmVyYXRlIGFuZCB1cGxvYWQgYSBuZXcgS2V5cGFpcgprZXlwYWlyX2VycjoKICBvdGhlcjogVW5hYmxlIHRvIGFjY2VzcyB1c2VyJ3MgS2V5cGFpcgprZXlwYWlyX2Vycl9ub3RfZm91bmQ6CiAgb3RoZXI6IEtleXBhaXIgbm90IHlldCBnZW5lcmF0ZWQKa2V5cGFpcl9lcnJfc2F2ZToKICBvdGhlcjogS2V5cGFpciBjb3VsZCBub3QgYmUgc2F2ZWQKa2V5cGFpcl9lcnJfcGFyc2luZzoKICBvdGhlcjogS2V5cGFpciBjb3VsZCBub3QgYmUgcGFyc2VkIGZvciBzb21lIHJlYXNvbgo=\"")
}

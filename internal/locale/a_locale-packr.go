// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package locale

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiB1bmRlZmluZWQKc3RhdGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFRoZSBBY3RpdmVTdGF0ZSBDTEkgYWxsb3dzIHlvdSB0byBlYXNpbHkgc3dpdGNoIGJldHdlZW4geW91ciBBY3RpdmVTdGF0ZSBlbnZpcm9ubWVudHMKYWN0aXZhdGVfcHJvamVjdDoKICBvdGhlcjogYWN0aXZhdGUgYSBwcm9qZWN0Cmhvb2tfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1hbmFnZSBQcm9qZWN0IEhvb2tzCmhvb2tfYWRkX2Rlc2NyaXB0aW9uOgogIG90aGVyOiAKICAgID4KICAgIGFkZCBzY3JpcHQgdG8gcnVuIG9uIGhvb2sgdHJpZ2dlcgpob29rX3JlbW92ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogCiAgICA+CiAgICByZW1vdmUgc2NyaXB0IGZvciBob29rIHRyaWdnZXIKaG9va19oZWFkZXJfaWQ6CiAgb3RoZXI6IElECmhvb2tfaGVhZGVyX2hvb2s6CiAgb3RoZXI6IEhPT0sKaG9va19oZWFkZXJfY29tbWFuZDoKICBvdGhlcjogQ09NTUFORApob29rX2xpc3RpbmdfaG9va3M6CiAgb3RoZXI6IExpc3RpbmcgY29uZmlndXJlZCBob29rcwp1c2FnZV90cGw6CiAgb3RoZXI6ICIKVXNhZ2U6CiAgW1tpZiAuUnVubmFibGVdXVtbQlJdXQogIFtbLlVzZUxpbmVdXSAKe3sgcmFuZ2UgJGtleSwgJGFyZ3VtZW50IDo9IC5Bcmd1bWVudHMgfX08e3skYXJndW1lbnQuTmFtZX19PiB7eyBlbmQgfX0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNlczpbW0JSXV0KICBbWy5OYW1lQW5kQWxpYXNlc11dW1tlbmRdXQoKW1tpZiAuSGFzRXhhbXBsZV1dCltbQlJdXVtbQlJdXQpFeGFtcGxlczpbW0JSXV0KICBbWy5FeGFtcGxlXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXVtbQlJdXUF2YWlsYWJsZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsIEZsYWdzOiAKW1tCUl1dW1suSW5oZXJpdGVkRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKe3tpZiBndCAobGVuIC5Bcmd1bWVudHMpIDB9fQpbW0JSXV1bW0JSXV0KQXJndW1lbnRzOltbQlJdXQogIHt7IHJhbmdlICRrZXksICRhcmd1bWVudCA6PSAuQXJndW1lbnRzIH19CiAgPHt7JGFyZ3VtZW50Lk5hbWV9fT4ge3tpZiBndCAobGVuICRhcmd1bWVudC5SZXF1aXJlZCkgMH19ICAgICAgICAgIHt7ZWxzZX19KG9wdGlvbmFsKXt7ZW5kfX0ge3skYXJndW1lbnQuRGVzY3JpcHRpb259fVtbQlJdXQogIHt7IGVuZCB9fQp7e2VuZH19CgpbW2lmIC5IYXNIZWxwU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KQWRkaXRpb25hbCBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KVXNlIFwiW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0gLS1oZWxwXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYSBjb21tYW5kLltbZW5kXV1bW0JSXV0iCmFyZ19zdGF0ZV9hY3RpdmF0ZV91cmw6CiAgb3RoZXI6IFVSTAphcmdfc3RhdGVfYWN0aXZhdGVfdXJsX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBUaGUgVVJMIG9mIHRoZSByZXBvc2l0b3J5IHRoYXQgdGhlIHByb2plY3QgbGl2ZXMgYXQKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFNldCB0aGUgbG9jYWxpc2F0aW9uCmZsYWdfc3RhdGVfdmVyc2lvbl9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2hvdyB0aGUgdmVyc2lvbiBvZiBvdXIgc3RhdGUgZXhlY3V0YWJsZQpmbGFnX3N0YXRlX2FjdGl2YXRlX3BhdGhfZGVzY3JpcHRpb246CiAgb3RoZXI6IFdoZXJlIHRvIGluc3RhbGwgdGhlIHByb2plY3QKZmxhZ19zdGF0ZV9hY3RpdmF0ZV9icmFuY2hfZGVzY3JpcHRpb246CiAgb3RoZXI6IENsb25lIHRoaXMgc3BlY2lmaWMgYnJhbmNoCmZsYWdfc3RhdGVfYWN0aXZhdGVfY2RfZGVzY3JpcHRpb246CiAgb3RoZXI6IFdoZXRoZXIgb3Igbm90IHRvIGNoYW5nZSBpbnRvIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSBvbmNlIGNyZWF0ZWQKaW5mb19zdGF0ZV9hY3RpdmF0ZV91cmk6CiAgb3RoZXI6IEFjdGl2YXRpbmcgVVJJICd7ey5VUkl9fScgaW50byBkaXJlY3RvcnkgJ3t7LkRpcn19JwppbmZvX3N0YXRlX2FjdGl2YXRlX2JyYW5jaDoKICBvdGhlcjogIkNoZWNrb3V0IG91dCBicmFuY2g6IHt7LkJyYW5jaH19IgplcnJvcl9jYW5ub3RfY2hlY2tvdXRfYnJhbmNoOgogIG90aGVyOiBDYW5ub3QgY2hlY2tvdXQgYnJhbmNoCmVycm9yX3N0YXRlX2FjdGl2YXRlOgogIG90aGVyOiBVbmFibGUgdG8gYWN0aXZhdGUuIFBsZWFzZSByZWZlciB0byB0aGUgYWJvdmUgZXJyb3IgbWVzc2FnZSwgcmVzb2x2ZSB0aGUgaXNzdWUsIGFuZCBydW4gYWN0aXZhdGUgYWdhaW4uCmVycm9yX3N0YXRlX2FjdGl2YXRlX2NvbmZpZ19leGlzdHM6CiAgb3RoZXI6IENvbmZpZyBmaWxlICd7ey5Db25maWdGaWxlfX0nIG5vdCBmb3VuZCBpbiByZXBvc2l0b3J5IHJvb3QuIFRoaXMgZmlsZSBpcyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIGFjdGl2YXRpb24gcHJvY2Vzcy4KaW5mb19zdGF0ZV9hY3RpdmF0ZV9jZDoKICBvdGhlcjogQ2hhbmdpbmcgaW50byBkaXJlY3RvcnkgJ3t7LkRpcn19JwplcnJvcl91bnN1cHBvcnRlZF9zaGVsbDoKICBvdGhlcjogIllvdSBhcmUgdXNpbmcgYW4gdW5zdXBwb3J0ZWQgc2hlbGw6IHt7LlNoZWxsfX0iCmVycm9yX2Nhbm5vdF9jbG9uZV91cmk6CiAgb3RoZXI6ICJVbmFibGUgdG8gY2xvbmUgdGhlIGZvbGxvd2luZyBVUkk6IHt7LlVSSX19IgplcnJvcl9jb3VsZF9ub3RfYWN0aXZhdGVfc3Vic2hlbGw6CiAgb3RoZXI6IENvdWxkIG5vdCBhY3RpdmF0ZSBhIG5ldyBzdWJzaGVsbAppbmZvX2RlYWN0aXZhdGVkOgogIG90aGVyOiBEZWFjdGl2YXRlZCB7ey5Pd25lcn19L3t7Lk5hbWV9fQplcnJvcl91bnN1cHBvcnRlZF9sYW5ndWFnZToKICBvdGhlcjogIlVuc3VwcG9ydGVkIGxhbmd1YWdlOiB7ey5MYW5ndWFnZX19IgplcnJvcl9jb3VsZF9ub3RfYWN0aXZhdGVfdmVudjoKICBvdGhlcjogQ291bGQgbm90IGFjdGl2YXRlIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50Cndhcm5pbmdfbGFuZ3VhZ2Vfbm90X3lldF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJXYXJuaW5nOiBZb3VyIHByb2plY3QgY29uZmlndXJhdGlvbiBpbmNsdWRlcyB7ey5MYW5ndWFnZX19LCBidXQgdGhpcyBsYW5ndWFnZSBpcyBub3QgeWV0IHN1cHBvcnRlZCIKZXJyb3JfY291bGRfbm90X3J1bl9ob29rczoKICBvdGhlcjogQ291bGQgbm90IHJ1biBob29rcwppbmZvX3J1bm5pbmdfaG9vazoKICBvdGhlcjogIlJ1bm5pbmcgaG9vazoge3suTmFtZX19Igpob29rX2FkZF9jYW5ub3RfYWRkX2hvb2s6CiAgb3RoZXI6ICJDYW5ub3QgYWRkIGhvb2sgJ3t7Lkhvb2t9fSB7ey5TY3JpcHR9fSciCmhvb2tfYWRkX2Nhbm5vdF9hZGRfZXhpc3RpbmdfaG9vazoKICBvdGhlcjogIklkZW50aWNhbCBob29rIGFscmVhZHkgY29uZmlndXJlZCIKaG9va19yZW1vdmVfbXVsdGlwbGVfaG9va3M6CiAgb3RoZXI6ICJNb3JlIHRoYW4gb25lIGNvbmZpZ3VyZWQgaG9vayBmb3IgbmFtZSBnaXZlbi4gIFVzZSBJRCBpbnN0ZWFkLiIKaG9va19yZW1vdmVfY2Fubm90X3JlbW92ZToKICBvdGhlcjogIkNhbm5vdCByZW1vdmUgaG9vayIKZXJyb3JfbWlzc2luZ19hcmc6CiAgb3RoZXI6ICJBcmd1bWVudCBtaXNzaW5nOiB7ey5OYW1lfX0iCmFyZ19ob29rX2FkZF9ob29rOgogIG90aGVyOiBIT09LCmFyZ19ob29rX2FkZF9ob29rX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBUaGUgaG9vayB0aGF0IHdpbGwgYmUgbGlzdGVuZWQgdG8KZXJyb3JfaG9va19hZGRfaW52YWxpZF9ob29rOgogIG90aGVyOiAiSW52YWxpZCBob29rIGdpdmVuOiB7ey5WMH19IgphcmdfaG9va19hZGRfc2NyaXB0OgogIG90aGVyOiBTQ1JJUFQKYXJnX2hvb2tfYWRkX3NjcmlwdF9kZXNjcmlwdGlvbjoKICBvdGhlcjogVGhlIHNjcmlwdCB0aGF0IHdpbGwgYmUgcnVuCmFyZ19ob29rX3JlbW92ZV9pZGVudGlmaWVyOgogIG90aGVyOiBJREVOVElGSUVSCmFyZ19ob29rX3JlbW92ZV9pZGVudGlmaWVyX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBJZGVudGlmaWVzIHdoYXQgaG9vayB0byByZW1vdmUsIGNhbiBiZSBhIGhhc2ggb3IgYSBob29rIG5hbWUKcHJvbXB0X2Nob29zZV9ob29rOgogIG90aGVyOiBXaGljaCBob29rIGRvIHlvdSB3aXNoIHRvIHJlbW92ZT8KZXJyX25vX3Byb2plY3RmaWxlOgogIG90aGVyOiBObyBhY3RpdmVzdGF0ZS55YW1sIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5CmVycl9wYXJzZV9wcm9qZWN0OgogIG90aGVyOiAiQ291bGQgbm90IHBhcnNlIHByb2plY3QgZmlsZS4gRm9yIG1vcmUgaW5mbyByZWZlciB0byB0aGUgZXJyb3IgbG9nIgplcnJfaG9va19jYW5ub3RfbGlzdDoKICBvdGhlcjogQ2Fubm90IGxpc3QgaG9va3MKZXJyX2hvb2tfY2Fubm90X2ZpbmQ6CiAgb3RoZXI6IENhbm5vdCBmaW5kIGhvb2tzIG1hdGNoaW5nIHlvdXIgcXVlcnkKcHJvbXB0X2hvb2tfY2hvb3NlX3JlbW92ZToKICBvdGhlcjogV2hpY2ggaG9vayB3b3VsZCB5b3UgbGlrZSB0byByZW1vdmU/CnByb21wdF9ob29rX29wdGlvbjoKICBvdGhlcjogInt7Lkhvb2suTmFtZX19OiBge3suU2NyaXB0fX1gICh7ey5Db25zdHJhaW50c319e3suSGFzaH19KSIKZXJyX2ludmFsaWRfaW5wdXQ6CiAgb3RoZXI6IEludmFsaWQgaW5wdXQgcmVjZWl2ZWQKaG9va19yZW1vdmVkOgogIG90aGVyOiAiSG9vayByZW1vdmVkOiB7ey5Ib29rLk5hbWV9fSAoe3suSGFzaH19KSIKZXJyX25vX3VwZGF0ZV9pbmZvOgogIG90aGVyOiBDYW5ub3QgcmV0cmlldmUgdXBkYXRlIGluZm9ybWF0aW9uCm5vX3VwZGF0ZV9hdmFpbGFibGU6CiAgb3RoZXI6IFlvdSBhcmUgdXNpbmcgdGhlIGxhdGVzdCB2ZXJzaW9uIGF2YWlsYWJsZQp1cGRhdGluZ190b192ZXJzaW9uOgogIG90aGVyOiBVcGRhdGluZyBmcm9tIHt7LmZyb21WZXJzaW9ufX0gdG8ge3sudG9WZXJzaW9ufX0KZXJyX3VwZGF0ZV9mYWlsZWQ6CiAgb3RoZXI6IFVwZGF0ZSBmYWlsZWQsIGNoZWNrIHRoZSBlcnJvciBsb2cgZm9yIG1vcmUgaW5mb3JtYXRpb24KdmVyc2lvbl9pbmZvOgogIG90aGVyOiB8IAogICAgQWN0aXZlU3RhdGUgQ0xJIHZlcnNpb24ge3suVmVyc2lvbn19CiAgICBSZXZpc2lvbiB7ey5SZXZpc2lvbn19CiAgICBCcmFuY2gge3suQnJhbmNofX0KICAgIEJ1aWx0IHt7LkRhdGV9fQp1cGRhdGVfY29tcGxldGU6CiAgb3RoZXI6IFVwZGF0ZSBjb21wbGV0ZWQgc3VjY2VzZnVsbHkKdXBkYXRlX2hhc2hfbWlzbWF0Y2g6CiAgb3RoZXI6IFRoZSBhcmNoaXZlIGhhc2ggY291bGQgbm90IGJlIHZlcmlmaWVkCmVycl9wcm9qZWN0X2ZpbGVfdW5hdmFpbGFibGU6CiAgb3RoZXI6IENvdWxkIG5vdCBsb2FkIHRoZSBwcm9qZWN0IGZpbGUKZXJyX3Byb2plY3RfcGFyc2U6CiAgb3RoZXI6ICJQcm9qZWN0IGZpbGUgY291bGQgbm90IGJlIHBhcnNlZCwgdGhlIHBhcnNlciBwcm9kdWNlZCB0aGUgZm9sbG93aW5nIGVycm9yOiB7ey5FcnJvcn19IgplcnJfZmFpbHVyZV90ZXN0OgogIG90aGVyOiBvbmUge3suVjB9fSB0aHJlZSB7ey5WMX19CmRpc3Ryb19vYnRhaW5pbmc6CiAgb3RoZXI6ICJPYnRhaW5pbmcgRGlzdHJpYnV0aW9uIgpkaXN0cm9faW5zdGFsbGluZzoKICBvdGhlcjogIkluc3RhbGxpbmcgQXJ0aWZhY3RzIgplcnJfaGFzaF9taXNtYXRjaDoKICBvdGhlcjogIkludmFsaWQgZmlsZSBoYXNoIGZvciBmaWxlIHt7LlYwfX0sIGV4cGVjdGVkIGhhc2g6IHt7LlYyfX0sIGdvdDoge3suVjF9fSIKZXJyX2xhbmd1YWdlX25vdF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJMYW5ndWFnZSBub3QgeWV0IHN1cHBvcnRlZDoge3suVjB9fSIKZXJyX2FydGlmYWN0X25vdF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJBcnRpZmFjdCBub3Qgc3VwcG9ydGVkOiB7ey5WMH19IgplcnJfYXJ0aWZhY3Rfbm9fcGFyZW50OgogIG90aGVyOiAiVGhlIGdpdmVuIGFydGlmYWN0IGhhcyBubyBwYXJlbnQ6IHt7LlYwfX0uIE9ubHkgTGFuZ3VhZ2UgYXJ0aWZhY3RzIGNhbiBiZSB3aXRob3V0IHBhcmVudC4iCmVycl9pbnZhbGlkX3N0YXR1c19jb2RlOgogIG90aGVyOiAiSW52YWxpZCBzdGF0dXMgY29kZToge3suVjB9fSIKaW5mb19hY3RpdmF0aW5nX3N0YXRlOgogIG90aGVyOiAiQWN0aXZhdGluZyBzdGF0ZToge3suT3duZXJ9fS97ey5OYW1lfX0iCmluZm9fc3RhdGVfYWN0aXZlX3JlcG9leGlzdHM6CiAgb3RoZXI6ICJSZXBvIGFscmVhZHkgZXhpc3RzOiB7ey5QYXRofX0iCmVycl9ub19zY21fZm9yX3BhdGg6CiAgb3RoZXI6IE5vIHNvdXJjZSBjb2RlIGNvbnRyb2wgY291bGQgYmUgZGV0ZWN0ZWQgb24ge3suVjB9fQpwYW5pY19jb3VsZG50X2RldGVjdF93ZDoKICBvdGhlcjogIkNvdWxkIG5vdCBkZXRlY3Qgd29ya2luZyBkaXJlY3Rvcnk6IHt7LkVycm9yfX0iCmF1dGhfZGVzY3JpcHRpb246CiAgb3RoZXI6IEF1dGhlbnRpY2F0ZSBhZ2FpbnN0IHRoZSBBY3RpdmVTdGF0ZSBwbGF0Zm9ybQphcmdfc3RhdGVfYXV0aF90b2tlbjoKICBvdGhlcjogVE9LRU4KYXJnX3N0YXRlX2F1dGhfdG9rZW5fZGVzY3JpcHRpb246CiAgb3RoZXI6IFRoZSBBUEkgVG9rZW4gZ2VuZXJhdGVkIHZpYSB5b3VyIGNvbnRyb2wgcGFuZWwKdXNlcm5hbWVfcHJvbXB0OgogIG90aGVyOiAiRW50ZXIgeW91ciB1c2VybmFtZToiCnBhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3dvcmQ6IgpwYXNzcGhyYXNlX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3BocmFzZToiCnByZXZpb3VzX3Bhc3N3b3JkX21lc3NhZ2U6CiAgb3RoZXI6ICJZb3VyIHBhc3N3b3JkIG1heSBoYXZlIGNoYW5nZWQgcmVjZW50bHkuIFdlIG5lZWQgdG8gcmVlbmNyeXB0IHlvdXIgcHJpdmF0ZS1rZXkgc28gdGhhdCB5b3UgbWF5IGNvbnRpbnVlIHVzaW5nIHlvdXIgc2VjcmV0cywgYnV0IHdlIG5lZWQgeW91ciBwcmV2aW91cyBwYXNzd29yZCBpbiBvcmRlciB0byBkbyBzby4iCmF1dGhfZ2VuZXJhdGVfbmV3X2tleXBhaXJfbWVzc2FnZToKICBvdGhlcjogIlRoZXJlIGlzIGFuIHVucmVjb3ZlcmFibGUgaXNzdWUgd2l0aCB5b3VyIGV4aXN0aW5nIGtleXBhaXIgYW5kIHRoZSBiZXN0IGNvdXJzZSBvZiBhY3Rpb24gaXMgdG8gZ2VuZXJhdGUgYSBuZXcga2V5cGFpci4iCmF1dGhfY29uZmlybV9nZW5lcmF0ZV9uZXdfa2V5cGFpcl9wcm9tcHQ6CiAgb3RoZXI6IEdlbmVyYXRlIG5ldyBrZXlwYWlyPwphdXRoX3VucmVzb2x2ZWRfa2V5cGFpcl9pc3N1ZV9tZXNzYWdlOgogIG90aGVyOiAiRm9yIHNlY3VyaXR5IHB1cnBvc2VzIHJlZ2FyZGluZyB5b3VyIGtleXBhaXIsIHdlIGFyZSBsb2dnaW5nIHlvdSBvdXQuIgphdXRoX2Vycl91bnJlY292ZXJhYmxlX2tleXBhaXI6CiAgb3RoZXI6ICJVbnJlY292ZXJhYmxlIGtleXBhaXIgaXNzdWUiCnByZXZpb3VzX3Bhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcHJldmlvdXMgcGFzc3dvcmQ6IgpzZWNyZXRfdmFsdWVfcHJvbXB0OgogIG90aGVyOiAiRW50ZXIgc2VjcmV0IHt7LlYwfX0gdmFsdWUgZm9yIHt7LlYxfX06Igp1c2VybmFtZV9wcm9tcHRfc2lnbnVwOgogIG90aGVyOiAiQ2hvb3NlIGEgdXNlcm5hbWU6IgpwYXNzd29yZF9wcm9tcHRfc2lnbnVwOgogIG90aGVyOiAiQ2hvb3NlIGEgcGFzc3dvcmQ6IgpwYXNzd29yZF9wcm9tcHRfY29uZmlybToKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3dvcmQgYWdhaW46IgpuYW1lX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgbmFtZToiCmVtYWlsX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgZW1haWw6Igp0b3RwX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvbiBjb2RlOiIKc3VydmV5X2Vycm9yX3RlbXBsYXRlOgogIG90aGVyOiAiW1tjb2xvciBcInJlZFwiXV0gSW52YWxpZCByZXNwb25zZTogW1suRXJyb3JdXVtbY29sb3IgXCJyZXNldFwiXV1bW0JSXV0iCmVycl92YWx1ZV9yZXF1aXJlZDogCiAgb3RoZXI6IHZhbHVlIHJlcXVpcmVkCmVycl9wcm9tcHRfdW5rb3duOgogIG90aGVyOiBBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxzdCBwcm9jZXNzaW5nIHlvdXIgcmVzcG9uc2UsIGNoZWNrIHRoZSBlcnJvciBsb2cgZm9yIG1vcmUgaW5mb3JtYXRpb24KcHJvbXB0X2xvZ2luX3RvX3NpZ251cDoKICBvdGhlcjogTm8gYWNjb3VudCB3YXMgZm91bmQgZm9yIHRoYXQgdXNlcm5hbWUsIHdvdWxkIHlvdSBsaWtlIHRvIHJlZ2lzdGVyIGl0PwplcnJfYXV0aF9mYWlsZWQ6CiAgb3RoZXI6IEF1dGhlbnRpY2F0aW9uIGZhaWxlZCwgaW52YWxpZCBwYXNzd29yZAplcnJfYXV0aF9mYWlsZWRfdW5rbm93bl9jYXVzZToKICBvdGhlcjogQXV0aGVudGljYXRpb24gZmFpbGVkIGR1ZSB0byBhbiB1bmtub3duIGNhdXNlLCBjaGVjayB0aGUgZXJyb3IgbG9nIGZvciBtb3JlIGluZm9ybWF0aW9uCmF1dGhfZXJyX3Bhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogVGhlIHByb3ZpZGVkIHBhc3N3b3JkIGlzIGludmFsaWQKY29uZmlybV9wYXNzd29yZF9hY2NvdW50X2NyZWF0aW9uOgogIG90aGVyOiBQbGVhc2UgZW50ZXIgeW91ciBwYXNzd29yZCBhZ2FpbiB0byBjcmVhdGUgeW91ciBhY2NvdW50LgplcnJfcGFzc3dvcmRfY29uZmlybWF0aW9uX2ZhaWxlZDoKICBvdGhlcjogWW91ciBwYXNzd29yZCBjb25maXJtYXRpb24gZG9lcyBub3QgbWF0Y2gKZXJyX3VzZXJuYW1lX3Rha2VuOgogIG90aGVyOiBVc2VybmFtZSBpcyBhbHJlYWR5IHRha2VuCnNpZ251cF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2lnbnVwIGEgbmV3IGFjY291bnQKZXJyX2F1dGhfc2lnbnVwX2VtYWlsX2V4aXN0czoKICBvdGhlcjogQW4gYWNjb3VudCB3aXRoIHRoYXQgZW1haWwgYWRkcmVzcyBhbHJlYWR5IGV4aXN0cwpsb2dpbl9zdWNjZXNzX3dlbGNvbWVfYmFjazoKICBvdGhlcjogWW91IGhhdmUgc3VjY2VzZnVsbHkgYXV0aGVudGljYXRlZCwgaGVsbG8ge3suTmFtZX19IQpsb2dnZWRfaW5fYXM6CiAgb3RoZXI6IFlvdSBhcmUgbG9nZ2VkIGluIGFzIHt7Lk5hbWV9fQpsb2dvdXRfZGVzY3JpcHRpb246CiAgb3RoZXI6IExvZ291dApsb2dnZWRfb3V0OgogIG90aGVyOiBZb3UgaGF2ZSBiZWVuIGxvZ2dlZCBvdXQKc2lnbnVwX3N1Y2Nlc3M6CiAgb3RoZXI6IFlvdXIgYWNjb3VudCBoYXMgYmVlbiByZWdpc3RlcmVkIGFuZCBhIGNvbmZpcm1hdGlvbiBlbWFpbCBoYXMgYmVlbiBzZW50IHRvIHt7LkVtYWlsfX0sIHlvdXIgYWNjb3VudCB3aWxsIGhhdmUgbGltaXRlZCBwZXJtaXNzaW9ucyB1bnRpbCB5b3UgY29uZmlybSBpdC4KbG9naW5fY2FuY2VsbGVkOgogIG90aGVyOiBBdXRoZW50aWNhdGlvbiBDYW5jZWxsZWQKb3JnYW5pemF0aW9uc19kZXNjcmlwdGlvbjoKICBvdGhlcjogTGlzdCBtZW1iZXIgb3JnYW5pemF0aW9ucyBvbiB0aGUgQWN0aXZlU3RhdGUgcGxhdGZvcm0Kb3JnYW5pemF0aW9uc19lcnI6CiAgb3RoZXI6IFVuYWJsZSB0byBsaXN0IG1lbWJlciBvcmdhbml6YXRpb25zCm9yZ2FuaXphdGlvbl9uYW1lOgogIG90aGVyOiBPcmdhbml6YXRpb24gTmFtZQpwcm9qZWN0X25hbWU6CiAgb3RoZXI6IFByb2plY3QgTmFtZQpwcm9qZWN0X2Rlc2NyaXB0aW9uOgogIG90aGVyOiBQcm9qZWN0IERlc2NyaXB0aW9uCnByb2plY3RfZXJyOgogIG90aGVyOiBVbmFibGUgdG8gbGlzdCBwcm9qZWN0cwpuZXdfcHJvamVjdDoKICBvdGhlcjogQ3JlYXRlIGEgbmV3IHByb2plY3QKZmxhZ19zdGF0ZV9uZXdfcGF0aF9kZXNjcmlwdGlvbjoKICBvdGhlcjogUGF0aCB0byBjcmVhdGUgYSBuZXcgcHJvamVjdCBpbi4KZmxhZ19zdGF0ZV9uZXdfb3duZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IE93bmVyIG9mIHRoZSBwcm9qZWN0IGJlaW5nIGNyZWF0ZWQuCmZsYWdfc3RhdGVfbmV3X3ZlcnNpb25fZGVzY3JpcHRpb246CiAgb3RoZXI6IFZlcnNpb24gb2YgdGhlIHByb2plY3QgYmVpbmcgY3JlYXRlZC4KYXJnX3N0YXRlX25ld19uYW1lX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBOYW1lIG9mIHRoZSBuZXcgcHJvamVjdC4KZXJyb3Jfc3RhdGVfbmV3X25vX2F1dGg6CiAgb3RoZXI6IFBsZWFzZSBhdXRoZW50aWNhdGUgYnkgcnVubmluZyAic3RhdGUgYXV0aCIgYmVmb3JlIGNyZWF0aW5nIGEgbmV3IHByb2plY3QuCnN0YXRlX25ld19wcm9tcHRfbmFtZToKICBvdGhlcjogUGxlYXNlIHByb3ZpZGUgYSBuYW1lIGZvciB0aGUgbmV3IHByb2plY3QuCmVycm9yX3N0YXRlX25ld19hYm9ydDoKICBvdGhlcjogIlVuYWJsZSB0byBjcmVhdGUgbmV3IHByb2plY3Q6IGFib3J0ZWQuIgplcnJvcl9zdGF0ZV9uZXdfZXhpc3RzOgogIG90aGVyOiAiVW5hYmxlIHRvIGNyZWF0ZSBuZXcgcHJvamVjdDogcGF0aCBleGlzdHMuIgplcnJvcl9zdGF0ZV9uZXdfbWtkaXI6CiAgb3RoZXI6IFVuYWJsZSB0byBjcmVhdGUgbmV3IHByb2plY3QgZGlyZWN0b3J5LgpzdGF0ZV9uZXdfcHJvbXB0X293bmVyOgogIG90aGVyOiBQbGVhc2UgcHJvdmlkZSBhbiBvd25lciBmb3IgdGhlIG5ldyBwcm9qZWN0LgplcnJvcl9zdGF0ZV9uZXdfZmV0Y2hfb3JnYW5pemF0aW9uczoKICBvdGhlcjogIlVuYWJsZSB0byBjcmVhdGUgbmV3IHByb2plY3Q6IGNhbm5vdCBkZXRlcm1pbmUgcG90ZW50aWFsIG93bmVycy4iCnN0YXRlX25ld19wcm9tcHRfdmVyc2lvbjoKICBvdGhlcjogUGxlYXNlIHByb3ZpZGUgYSB2ZXJzaW9uIHN0cmluZyBmb3IgdGhlIG5ldyBwcm9qZWN0LgplcnJvcl9zdGF0ZV9uZXdfdmVyc2lvbjoKICBvdGhlcjogVmVyc2lvbiBzdHJpbmcgbXVzdCBjb25zaXN0IG9ubHkgb2YgbnVtYmVycyBhbmQgZGVjaW1hbHMuCnN0YXRlX25ld19jcmVhdGVkOgogIG90aGVyOiBDcmVhdGVkIG5ldyBwcm9qZWN0IGluIHt7LkRpcn19CmVycm9yX3N0YXRlX25ld19wcm9qZWN0X2FkZDoKICBvdGhlcjogVW5hYmxlIHRvIGNyZWF0ZSBuZXcgUGxhdGZvcm0gcHJvamVjdC4KcHJvamVjdF9lbXB0eToKICBvdGhlcjogWW91IGhhdmUgbm90IGNyZWF0ZWQgYW55IHByb2plY3RzIHlldAp0b3RhbDoKICBvdGhlcjogVG90YWwKcHJvamVjdHNfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1hbmFnZSBZb3VyIFByb2plY3RzCmVycl9hcGlfbm90X2F1dGhlbnRpY2F0ZWQ6CiAgb3RoZXI6IFlvdSBhcmUgbm90IGF1dGhlbnRpY2F0ZWQsIGF1dGhlbnRpY2F0ZSB3aXRoIGBzdGF0ZSBhdXRoYC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcnVuIGBzdGF0ZSBhdXRoIC0taGVscGAuCmVycl9hcGlfb3JnX25vdF9mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgcmVxdWVzdGVkIE9yZ2FuaXphdGlvbgplcnJfYXBpX3Byb2plY3Rfbm90X2ZvdW5kOgogIG90aGVyOiBVbmFibGUgdG8gZmluZCByZXF1ZXN0ZWQgUHJvamVjdAplcnJfYXBpX21lbWJlcl9ub3RfZm91bmQ6CiAgb3RoZXI6IFVuYWJsZSB0byBmaW5kIHJlcXVlc3RlZCBNZW1iZXIKdmFyaWFibGVzX2V4cGFuZGVyX2Vycl9lbXB0eV9uYW1lOgogIG90aGVyOiBFeHBhbmRlciBoYW5kbGUgY2FuIG5vdCBiZSBhbiBlbXB0eSBzdHJpbmcKdmFyaWFibGVzX2V4cGFuZGVyX2Vycl91bmRlZmluZWQ6CiAgb3RoZXI6IEV4cGFuZGVyIG11c3QgYmUgZGVmaW5lZAplcnJvcl9leHBhbmRfdmFyaWFibGVfaW5maW5pdGVfcmVjdXJzaW9uOgogIG90aGVyOiBJbmZpbml0ZSByZWN1cnNpb24gdHJ5aW5nIHRvIGV4cGFuZCB2YXJpYWJsZSAne3suVjB9fScKZXJyb3JfZXhwYW5kX3ZhcmlhYmxlX3Byb2plY3RfdW5rbm93bl9jYXRlZ29yeToKICBvdGhlcjogIkVycm9yIGV4cGFuZGluZyB2YXJpYWJsZSAne3suVjB9fSc6IHVua25vd24gY2F0ZWdvcnkgJ3t7LlYxfX0nIgplcnJvcl9leHBhbmRfdmFyaWFibGVfcHJvamVjdF91bmtub3duX25hbWU6CiAgb3RoZXI6ICJFcnJvciBleHBhbmRpbmcgdmFyaWFibGUgJ3t7LlYwfX0nOiB7ey5WMX19IgplcnJvcl9leHBhbmRfdmFyaWFibGVfcHJvamVjdF91bnJlY29nbml6ZWRfcGxhdGZvcm1fdmFyOgogIG90aGVyOiAiVW5yZWNvZ25pemVkIHBsYXRmb3JtIHZhcmlhYmxlICd7ey5WMH19JyIKcnVuX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBSdW4gWW91ciBQcm9qZWN0IFNjcmlwdHMKYXJnX3N0YXRlX3J1bl9uYW1lOgogIG90aGVyOiBzY3JpcHQKYXJnX3N0YXRlX3J1bl9uYW1lX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBOYW1lIG9mIHNjcmlwdCB0byBydW4KZmxhZ19zdGF0ZV9ydW5fc3RhbmRhbG9uZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogUnVuIGEgc2NyaXB0LCByZWdhcmRsZXNzIG9mIGFuIGFjdGl2YXRlZCBzdGF0ZQpmbGFnX3N0YXRlX3J1bl9saXN0X2Rlc2NyaXB0aW9uOgogIG90aGVyOiBMaXN0IGF2YWlsYWJsZSBzY3JpcHRzCmVycm9yX3N0YXRlX3J1bl91bmRlZmluZWRfbmFtZToKICBvdGhlcjogVGhlIHNjcmlwdCBuYW1lIG11c3QgYmUgcHJvdmlkZWQKZXJyb3Jfc3RhdGVfcnVuX3Vua25vd25fbmFtZToKICBvdGhlcjogVGhlIHNjcmlwdCAne3suTmFtZX19JyBpcyBub3QgZGVmaW5lZCBpbiBhY3RpdmVzdGF0ZS55YW1sLgppbmZvX3N0YXRlX3J1bl9hY3RpdmF0aW5nX3N0YXRlOgogIG90aGVyOiBUaGlzIHNjcmlwdCByZXF1aXJlcyBhbiBhY3RpdmF0ZWQgc3RhdGUuIEFjdGl2YXRpbmcgaXQgbm93LiBUbyBieXBhc3MgdGhpcywgdXNlIHRoZSAtLXN0YW5kYWxvbmUgZmxhZy4KZXJyb3Jfc3RhdGVfcnVuX2FjdGl2YXRlOgogIG90aGVyOiBVbmFibGUgdG8gYWN0aXZhdGUgYSBzdGF0ZSBmb3IgcnVubmluZyB0aGUgc2NyaXB0IGluLiBUcnkgbWFudWFsbHkgcnVubmluZyAic3RhdGUgYWN0aXZhdGUiIGZpcnN0LgppbmZvX3N0YXRlX3J1bl9ydW5uaW5nOgogIG90aGVyOiBSdW5uaW5nIHNjcmlwdCB7ey5TY3JpcHR9fQplcnJvcl9zdGF0ZV9ydW5fZXJyb3I6CiAgb3RoZXI6IEZhaWxlZCB0byBydW4gc2NyaXB0LgplcnJvcl9zdGF0ZV9ydW5fbm9fc2hlbGw6CiAgb3RoZXI6IEZhaWxlZCB0byBvYnRhaW4gc2hlbGwgaW5mby4KZW52X2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNYW5hZ2UgUHJvamVjdCBWYXJpYWJsZXMKZW52X2FkZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogCiAgICA+CiAgICBhZGQgdmFyaWFibGUKZW52X3JlbW92ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogCiAgICA+CiAgICByZW1vdmUgdmFyaWFibGUKZW52X2hlYWRlcl9pZDoKICBvdGhlcjogSUQKZW52X2hlYWRlcl92YXJpYWJsZToKICBvdGhlcjogVkFSSUFCTEUKZW52X2hlYWRlcl92YWx1ZToKICBvdGhlcjogVkFMVUUKZW52X2xpc3RpbmdfdmFyaWFibGVzOgogIG90aGVyOiBMaXN0aW5nIGRlZmluZWQgdmFyaWFibGVzCmVudl9hZGRfY2Fubm90X2FkZF92YXJpYWJsZToKICBvdGhlcjogIkNhbm5vdCBhZGQgVmFyaWFibGUgJ3t7Lk5hbWV9fSB7ey5WYWx1ZX19JyIKZW52X2FkZF9jYW5ub3RfYWRkX2V4aXN0aW5nX3ZhcmlhYmxlOgogIG90aGVyOiAiSWRlbnRpY2FsIHZhcmlhYmxlIGFscmVhZHkgZGVmaW5lZCIKZW52X3JlbW92ZV9jYW5ub3RfcmVtb3ZlOgogIG90aGVyOiAiQ2Fubm90IHJlbW92ZSB2YXJpYWJsZSIKYXJnX2Vudl9hZGRfdmFyaWFibGU6CiAgb3RoZXI6IFZBUklBQkxFCmFyZ19lbnZfYWRkX3ZhcmlhYmxlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBUaGUgdmFyaWFibGUgdGhhdCB3aWxsIGJlIGRlZmluZWQKZXJyb3JfZW52X2FkZF9pbnZhbGlkX3ZhcmlhYmxlOgogIG90aGVyOiAiSW52YWxpZCB2YXJpYWJsZSBuYW1lIGdpdmVuOiB7ey5WMH19IgphcmdfZW52X2FkZF92YWx1ZToKICBvdGhlcjogVkFMVUUKYXJnX2Vudl9hZGRfdmFsdWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYXNzaWduZWQKYXJnX2Vudl9yZW1vdmVfaWRlbnRpZmllcjoKICBvdGhlcjogSURFTlRJRklFUgphcmdfZW52X3JlbW92ZV9pZGVudGlmaWVyX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBJZGVudGlmaWVzIHdoYXQgdmFyaWFibGUgdG8gcmVtb3ZlLCBjYW4gYmUgYSBoYXNoIG9yIGEgdmFyaWFibGUgbmFtZQpwcm9tcHRfY2hvb3NlX3ZhcmlhYmxlOgogIG90aGVyOiBXaGljaCB2YXJpYWJsZSBkbyB5b3Ugd2lzaCB0byByZW1vdmU/CmVycl9lbnZfY2Fubm90X2xpc3Q6CiAgb3RoZXI6IENhbm5vdCBsaXN0IHZhcmlhYmxlcwplcnJfZW52X2Nhbm5vdF9maW5kOgogIG90aGVyOiBDYW5ub3QgZmluZCB2YXJpYWJsZXMgbWF0Y2hpbmcgeW91ciBxdWVyeQpwcm9tcHRfZW52X2Nob29zZV9yZW1vdmU6CiAgb3RoZXI6IFdoaWNoIHZhcmlhYmxlIHdvdWxkIHlvdSBsaWtlIHRvIHJlbW92ZT8KZXJyX2Vudl9jYW5ub3RfcGFyc2U6CiAgb3RoZXI6IENvdWxkIG5vdCBwYXJzZSB2YXJpYWJsZXMgdXNlZCBpbiB5b3VyIHJlcXVlc3QKcHJvbXB0X2Vudl9vcHRpb246CiAgb3RoZXI6ICJ7ey5WYXJpYWJsZX19OiBge3suVmFsdWV9fWAgKHt7LkNvbnN0cmFpbnRzfX17ey5IYXNofX0pIgplbnZfcmVtb3ZlZDoKICBvdGhlcjogIlZhcmlhYmxlIHJlbW92ZWQ6IHt7LlZhcmlhYmxlfX0gKHt7Lkhhc2h9fSkiCmVudl9pbmhlcml0X2Rlc2NyaXB0aW9uOgogIG90aGVyOiBVcGRhdGUgdGhlIGN1cnJlbnQgcHJvamVjdCB0byBpbmhlcml0IGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIHRoZSBjdXJyZW50IGVudmlyb25tZW50LgplbnZfaW5oZXJpdF9wcm9tcHRfb3ZlcndyaXRlOgogIG90aGVyOiBEbyB5b3Ugd2FudCB0byBvdmVyd3JpdGUgdGhlIHByb2plY3QncyBleGlzdGluZyB2YXJpYWJsZSB7ey5OYW1lfX0sIHdob3NlIHZhbHVlIGlzICJ7ey5PbGRWYWx1ZX19Iiwgd2l0aCB0aGUgbmV3IHZhbHVlICJ7ey5OZXdWYWx1ZX19Ij8KZW52X2luaGVyaXRfaW5oZXJpdF9hYm9ydGVkOgogIG90aGVyOiAiVW5hYmxlIHRvIGluaGVyaXQgZnJvbSBjdXJyZW50IGVudmlyb25tZW50OiBhYm9ydGVkLiIKc2hvd19wcm9qZWN0OgogIG90aGVyOiBTaG93cyBpbmZvcm1hdGlvbiBhYm91dCBhIHByb2plY3QuCmFyZ19zdGF0ZV9zaG93X3JlbW90ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogUGF0aCB0byBwcm9qZWN0CmVycl9zdGF0ZV9zaG93X3BhdGhfZG9lc19ub3RfZXhpc3Q6CiAgb3RoZXI6IERpcmVjdG9yeSBkb2VzIG5vdCBleGlzdC4KZXJyX3N0YXRlX3Nob3dfbm9fY29uZmlnOgogIG90aGVyOiBhY3RpdmVzdGF0ZS55YW1sIGZpbGUgbm90IGZvdW5kIGluIHRoZSBnaXZlbiBsb2NhdGlvbi4KZXJyX3N0YXRlX3Nob3dfcHJvamVjdF9wYXJzZToKICBvdGhlcjogQ291bGQgbm90IHBhcnNlIGFjdGl2ZXN0YXRlLnlhbWwuCnByaW50X3N0YXRlX3Nob3dfbmFtZToKICBvdGhlcjogTmFtZQpwcmludF9zdGF0ZV9zaG93X29yZ2FuaXphdGlvbjoKICBvdGhlcjogT3JnYW5pemF0aW9uCnByaW50X3N0YXRlX3Nob3dfdXJsOgogIG90aGVyOiBVUkwKcHJpbnRfc3RhdGVfc2hvd19wbGF0Zm9ybXM6CiAgb3RoZXI6IFBsYXRmb3JtcwpwcmludF9zdGF0ZV9zaG93X2hvb2tzOgogIG90aGVyOiBIb29rcyB0aGF0IHdpbGwgcnVuCnByaW50X3N0YXRlX3Nob3dfc2NyaXB0czoKICBvdGhlcjogU2NyaXB0cwpwcmludF9zdGF0ZV9zaG93X2xhbmd1YWdlczoKICBvdGhlcjogTGFuZ3VhZ2VzCnByaW50X3N0YXRlX3Nob3dfcGFja2FnZXM6CiAgb3RoZXI6IHBhY2thZ2VzCnByaW50X3N0YXRlX3Nob3dfZW52X3ZhcnM6CiAgb3RoZXI6IEVudmlyb25tZW50IHZhcmlhYmxlcwpwcmludF9zdGF0ZV9zaG93X3NlY3JldHM6CiAgb3RoZXI6IFNlY3JldCBzcGVjaWZpY2F0aW9ucwplcnJfY2Fubm90X29idGFpbl9kaXN0OgogIG90aGVyOiAiQ291bGQgbm90IG9idGFpbiBkaXN0cmlidXRpb24gZm9yIGxhbmd1YWdlOiB7ey5WMH19Igpjb25maWdfdmFyaWFibGVfcHJvbXB0X3ZhbHVlOgogIG90aGVyOiAiVmFyaWFibGUgJ3t7Lk5hbWV9fScgdW5kZWZpbmVkLiBQbGVhc2UgZW50ZXIgYSB2YWx1ZToiCmVycl9hbHJlYWR5X2FjdGl2ZToKICBvdGhlcjogIllvdSBjYW5ub3QgYWN0aXZhdGUgYSBuZXcgc3RhdGUgd2hlbiB5b3UgYXJlIGFscmVhZHkgaW4gYW4gYWN0aXZhdGVkIHN0YXRlLiBZb3UgYXJlIGluIGFuIGFjdGl2YXRlZCBzdGF0ZSBmb3IgcHJvamVjdDoge3suVjB9fSIKcnVuX2xpc3Rpbmdfc2NyaXB0czoKICBvdGhlcjogIkF2YWlsYWJsZSBTY3JpcHRzOiAiCgpzZWNyZXRzX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogTWFuYWdlIFlvdXIgU2VjcmV0cwpzZWNyZXRzX2dldF9jbWRfZGVzY3JpcHRpb246CiAgb3RoZXI6IEdldCB0aGUgdmFsdWUgb2YgYSBzZWNyZXQKc2VjcmV0c19nZXRfYXJnX25hbWVfbmFtZToKICBvdGhlcjogc2VjcmV0LW5hbWUKc2VjcmV0c19nZXRfYXJnX25hbWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IE5hbWUgb2YgU2VjcmV0CnNlY3JldHNfc2V0X2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2V0IHRoZSB2YWx1ZSBvZiBhIHNlY3JldApzZWNyZXRzX3NldF9hcmdfbmFtZV9uYW1lOgogIG90aGVyOiBzZWNyZXQtbmFtZQpzZWNyZXRzX3NldF9hcmdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiBTZWNyZXQKc2VjcmV0c19zZXRfYXJnX3ZhbHVlX25hbWU6CiAgb3RoZXI6IHNlY3JldC12YWx1ZQpzZWNyZXRzX3NldF9hcmdfdmFsdWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFZhbHVlIG9mIHVuZW5jcnlwdGVkIFNlY3JldApzZWNyZXRzX3NldF9mbGFnX3Byb2plY3Q6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgcHJvamVjdApzZWNyZXRzX3NldF9mbGFnX3VzZXI6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgdXNlcgpzZWNyZXRzX3NoYXJlX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2hhcmUgeW91ciBvcmdhbml6YXRpb24gYW5kIHByb2plY3Qgc2VjcmV0cyB3aXRoIGFub3RoZXIgdXNlcgpzZWNyZXRzX3NoYXJlX2FyZ191c2VyX25hbWU6CiAgb3RoZXI6IHVzZXItaGFuZGxlCnNlY3JldHNfc2hhcmVfYXJnX3VzZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IFVzZXJuYW1lIG9mIHVzZXIgaW4geW91ciBvcmdhbml6YXRpb24Kc2VjcmV0c19zeW5jX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU3luY2hyb25pemUgeW91ciBzaGFyZWFibGUgc2VjcmV0cyBvcmdhbml6YXRpb24td2lkZQpzZWNyZXRzX3N5bmNfcmVzdWx0c19tZXNzYWdlOgogIG90aGVyOiBTdWNjZXNzZnVsbHkgc3luY2hyb25pemVkIHt7LlYwfX0gdXNlcnMgb2YgdGhlIHt7LlYxfX0gb3JnYW5pemF0aW9uCnNlY3JldHNfY29sX25hbWU6CiAgb3RoZXI6IE5hbWUKc2VjcmV0c19jb2xfc2NvcGU6CiAgb3RoZXI6IFNjb3BlCnNlY3JldHNfc2NvcGVfdXNlcl9wcm9qZWN0OgogIG90aGVyOiBVc2VyIFByb2plY3QKc2VjcmV0c19zY29wZV91c2VyX29yZzoKICBvdGhlcjogVXNlciBPcmdhbml6YXRpb24Kc2VjcmV0c19zY29wZV9wcm9qZWN0OgogIG90aGVyOiBQcm9qZWN0CnNlY3JldHNfc2NvcGVfb3JnOgogIG90aGVyOiBPcmdhbml6YXRpb24Kc2VjcmV0c19lcnI6CiAgb3RoZXI6IEVycm9yIG1hbmFnaW5nIHVzZXIncyBTZWNyZXRzCnNlY3JldHNfZXJyX25vX3NlY3JldHNfZm91bmQ6CiAgb3RoZXI6IFVuYWJsZSB0byBmaW5kIGFueSBTZWNyZXRzIGZvciBVc2VyCnNlY3JldHNfZXJyX2VuY3J5cHRpbmc6CiAgb3RoZXI6ICJFcnJvciBlbmNyeXB0aW5nIGEgdXNlcidzIFNlY3JldDoge3suVjB9fSIKc2VjcmV0c19lcnJfZGVjcnlwdGluZzoKICBvdGhlcjogIkVycm9yIGRlY3J5cHRpbmcgYSB1c2VyJ3MgU2VjcmV0OiB7ey5WMH19IgpzZWNyZXRzX2Vycl9zYXZlOgogIG90aGVyOiBFcnJvciB1cGRhdGluZyB1c2VyJ3MgU2VjcmV0cwpzZWNyZXRzX2Vycl9iYXNlNjRfZGVjb2Rpbmc6CiAgb3RoZXI6IEVycm9yIGJhc2U2NCBkZWNvZGluZyBzZWNyZXQgdmFsdWUKc2VjcmV0c19lcnJfbm9fcHVibGlja2V5X2ZvdW5kOgogIG90aGVyOiBVbmFibGUgdG8gZmluZCBhbnkgcHVibGljLWtleSBmb3IgVXNlcgpzZWNyZXRzX2Vycl92YWx1ZV9wcm9tcHQ6CiAgb3RoZXI6IFRoZSBwcm92aWRlZCBzZWNyZXQgdmFsdWUgaXMgaW52YWxpZCAKCnNlY3JldHNfZXhwYW5kX2Vycl9zcGVjX3VuZGVmaW5lZDoKICBvdGhlcjogInNlY3JldCBzcGVjaWZpY2F0aW9uIGZvciBge3suVjB9fWAgbm90IGRlZmluZWQgaW4gcHJvamVjdCIKc2VjcmV0c19leHBhbmRfZXJyX25vdF9mb3VuZDoKICBvdGhlcjogInVuYWJsZSB0byBvYnRhaW4gdmFsdWUgZm9yIHNlY3JldCBge3suVjB9fWAiCgprZXlwYWlyX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogTWFuYWdlIFlvdXIgS2V5cGFpcgprZXlwYWlyX2dlbmVyYXRlX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogR2VuZXJhdGUgYW5kIHVwbG9hZCBhIG5ldyBLZXlwYWlyCmtleXBhaXJfZ2VuZXJhdGVfZmxhZ19iaXRzOgogIG90aGVyOiBCaXQtbGVuZ3RoIG9mIGtleXBhaXIgdG8gZ2VuZXJhdGUKa2V5cGFpcl9nZW5lcmF0ZV9mbGFnX2RyeXJ1bjoKICBvdGhlcjogRG8gbm90IHNhdmUgYW55IGNoYW5nZXMKa2V5cGFpcl9nZW5lcmF0ZV9mbGFnX3NraXBwYXNzcGhyYXNlOgogIG90aGVyOiBEbyBub3QgcmVxdWlyZSBhIHBhc3NwaHJhc2UgZm9yIG5ldyBLZXlwYWlyIChpbXBsaWVzIC0tZHJ5LXJ1bikKa2V5cGFpcl9nZW5lcmF0ZV9zdWNjZXNzOgogIG90aGVyOiBLZXlwYWlyIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkKa2V5cGFpcl9hdXRoX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogQXV0aGVudGljYXRlIGV4aXN0aW5nIEtleXBhaXIgZm9yIGZ1dHVyZSBzZXNzaW9ucwprZXlwYWlyX2VycjoKICBvdGhlcjogVW5hYmxlIHRvIGFjY2VzcyB1c2VyJ3MgS2V5cGFpcgprZXlwYWlyX2Vycl9ub3RfZm91bmQ6CiAgb3RoZXI6IEtleXBhaXIgbm90IHlldCBnZW5lcmF0ZWQKa2V5cGFpcl9lcnJfc2F2ZToKICBvdGhlcjogS2V5cGFpciBjb3VsZCBub3QgYmUgc2F2ZWQKa2V5cGFpcl9lcnJfcHVibGlja2V5X25vdF9mb3VuZDoKICBvdGhlcjogTm8gcHVibGljLWtleSBmb3VuZCBmb3IgdXNlciBge3suVjB9fWAgKHt7LlYxfX0pCmtleXBhaXJfZXJyX3Bhc3NwaHJhc2VfcHJvbXB0OgogIG90aGVyOiBUaGUgcHJvdmlkZWQgcGFzc3BocmFzZSBpcyBpbnZhbGlkCmtleXBhaXJfZXJyX3JlcXVpcmVfYXV0aDoKICBvdGhlcjogWW91ciBrZXlwYWlyIGlzIG5vdCBhdXRoZW50aWNhdGVkLCBydW4gYHN0YXRlIGF1dGhgIGZpcnN0CgprZXlwYWlyc19lcnJfYml0bGVuZ3RoX3Rvb19zaG9ydDoKICBvdGhlcjogYml0LWxlbmd0aCB0b28gc2hvcnQKa2V5cGFpcnNfZXJyX3BlbV9lbmNvZGluZzoKICBvdGhlcjogaW52YWxpZCBQRU0gZW5jb2RpbmcKa2V5cGFpcnNfZXJyX3Bhc3NwaHJhc2VfaW5jb3JyZWN0OgogIG90aGVyOiBwcm92aWRlZCBwYXNzcGhyYXNlIGlzIGluY29ycmVjdAprZXlwYWlyc19lcnJfaW52YWxpZF9yc2FfcHVibGlja2V5OgogIG90aGVyOiBwcm92aWRlZCBrZXkgbm90IGFuIFJTQSBwdWJsaWMta2V5CmtleXBhaXJzX2Vycl9sb2FkX25vdF9mb3VuZDoKICBvdGhlcjogQXV0aG9yaXplZCBrZXlwYWlyIG5vdCBmb3VuZAprZXlwYWlyc19lcnJfbG9hZF9yZXF1aXJlc19tb2RlOgogIG90aGVyOiAiS2V5cGFpciBge3suVjB9fWAgZmlsZSBpcyB0b28gcGVybWlzc2l2ZSwgZXhwZWN0cyBubyBtb3JlIHRoYW4gYHt7LlYxfX1gIHBlcm1pc3Npb25zIgprZXlwYWlyc19lcnJfYmFzZTY0X2RlY29kaW5nOgogIG90aGVyOiBNZXNzYWdlIGlzIG5vdCBiYXNlLTY0IGVuY29kZWQKZXJyX2NvbW1hbmRfcmVxdWlyZXNfYXV0aDoKICBvdGhlcjogWW91IG5lZWQgdG8gYmUgYXV0aGVudGljYXRlZCB0byBydW4gdGhpcyBjb21tYW5kLiBBdXRoZW50aWNhdGUgYnkgcnVubmluZyBgc3RhdGUgYXV0aGAuCndhcm5fc2NyaXB0X25hbWVfaW5fdXNlOgogIG90aGVyOiB8IAogICAgVGhlIGZvbGxvd2luZyBzY3JpcHQgbmFtZXMgYXJlIGFscmVhZHkgaW4gdXNlOgogICAgIAogICAgICAtIHt7LlYwfX0KICAgIAogICAgVGhpcyBtYXkgY2F1c2UgY29uZmxpY3RzLCBpZGVhbGx5IHRoZXNlIGNvbmZsaWN0cyBzaG91bGQgYmUgcmVzb2x2ZWQgYnkgcmVuYW1pbmcgdGhlc2Ugc2NyaXB0cyBpbiB5b3VyIGFjdGl2ZXN0YXRlLnlhbWwuCiAgICAKICAgIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYWNjZXNzIHNjcmlwdHMgYnkgcHJlZml4aW5nIHRoZWlyIHNjcmlwdCB3aXRoIHlvdXIgcHJvamVjdCBuYW1lICh7ey5WMX19KSwgZWcuIGB7ey5WMn19YAoKZXJyX2ZpbGVfbm90X2ZvdW5kX2luX3BhdGg6CiAgb3RoZXI6IGNvdWxkIG5vdCBmaW5kIGZpbGU9e3suVjB9fSBpbiBwYXRoPXt7LlYxfX0K\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiBvbmJlcGFhbGQKCnN0YXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbgphY3RpdmF0ZV9wcm9qZWN0OiAKICBvdGhlcjogYWN0aXZlZXIgZWVuIHByb2plY3QKdXNhZ2VfdHBsOiAKICBvdGhlcjogIgpHZWJydWlrOgogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0KICBbWy5Vc2VMaW5lXV0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNzZW46W1tCUl1dCiAgW1suTmFtZUFuZEFsaWFzZXNdXVtbZW5kXV0KCltbaWYgLkhhc0V4YW1wbGVdXQpbW0JSXV1bW0JSXV0KVm9vcmJlZWxkZW46W1tCUl1dCiAgW1suRXhhbXBsZV1dCltbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsZSBGbGFnczogCltbQlJdXVtbLkluaGVyaXRlZEZsYWdzLkZsYWdVc2FnZXMgfCB0cmltVHJhaWxpbmdXaGl0ZXNwYWNlc11dCltbZW5kXV0KCltbaWYgLkhhc0hlbHBTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpNZWVyZGVyZSBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KR2VicnVpayBcIltbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdIC0taGVscFwiIHZvb3IgbWVlciBpbmZvcm1hdGllIG92ZXIgZWVuIGNvbW1hbmQuW1tlbmRdXVtbQlJdXSIKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IExva2FsaXNhdGllCgpzZWNyZXRzX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogQmVoZWVyIGdlaGVpbWVuCnNlY3JldHNfc2V0X2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2V0IHRoZSB2YWx1ZSBvZiBhIHNlY3JldApzZWNyZXRzX3NldF9hcmdfbmFtZV9uYW1lOgogIG90aGVyOiBzZWNyZXQtbmFtZQpzZWNyZXRzX3NldF9hcmdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiBTZWNyZXQKc2VjcmV0c19zZXRfYXJnX3ZhbHVlX25hbWU6CiAgb3RoZXI6IHNlY3JldC12YWx1ZQpzZWNyZXRzX3NldF9hcmdfdmFsdWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFZhbHVlIG9mIHVuZW5jcnlwdGVkIFNlY3JldApzZWNyZXRzX3NldF9mbGFnX3Byb2plY3Q6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgcHJvamVjdApzZWNyZXRzX3NldF9mbGFnX3VzZXI6CiAgb3RoZXI6IFNjb3BlIHRoZSBzZWNyZXQgdG8gdGhlIGN1cnJlbnQgdXNlcgpzZWNyZXRzX3NoYXJlX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2hhcmUgeW91ciBvcmdhbml6YXRpb24gYW5kIHByb2plY3Qgc2VjcmV0cyB3aXRoIGFub3RoZXIgdXNlcgpzZWNyZXRzX3NoYXJlX2FyZ191c2VyX25hbWU6CiAgb3RoZXI6IHVzZXItaGFuZGxlCnNlY3JldHNfc2hhcmVfYXJnX3VzZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IFVzZXJuYW1lIG9mIHVzZXIgaW4geW91ciBvcmdhbml6YXRpb24Kc2VjcmV0c19jb2xfbmFtZToKICBvdGhlcjogTmFtZQpzZWNyZXRzX2NvbF9zY29wZToKICBvdGhlcjogU2NvcGUKc2VjcmV0c19zY29wZV91c2VyX3Byb2plY3Q6CiAgb3RoZXI6IFVzZXIgUHJvamVjdApzZWNyZXRzX3Njb3BlX3VzZXJfb3JnOgogIG90aGVyOiBVc2VyIE9yZ2FuaXphdGlvbgpzZWNyZXRzX3Njb3BlX3Byb2plY3Q6CiAgb3RoZXI6IFByb2plY3QKc2VjcmV0c19zY29wZV9vcmc6CiAgb3RoZXI6IE9yZ2FuaXphdGlvbgpzZWNyZXRzX2VycjoKICBvdGhlcjogRXJyb3IgbWFuYWdpbmcgdXNlcidzIFNlY3JldHMKc2VjcmV0c19lcnJfbm9fc2VjcmV0c19mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgYW55IFNlY3JldHMgZm9yIFVzZXIKc2VjcmV0c19lcnJfZW5jcnlwdGluZzoKICBvdGhlcjogIkVycm9yIGVuY3J5cHRpbmcgYSB1c2VyJ3MgU2VjcmV0OiB7ey5WMH19IgpzZWNyZXRzX2Vycl9kZWNyeXB0aW5nOgogIG90aGVyOiAiRXJyb3IgZGVjcnlwdGluZyBhIHVzZXIncyBTZWNyZXQ6IHt7LlYwfX0iCnNlY3JldHNfZXJyX3NhdmU6CiAgb3RoZXI6IEVycm9yIHVwZGF0aW5nIHVzZXIncyBTZWNyZXRzCnNlY3JldHNfZXJyX2Jhc2U2NF9kZWNvZGluZzoKICBvdGhlcjogRXJyb3IgYmFzZTY0IGRlY29kaW5nIHNlY3JldCB2YWx1ZQoKc2VjcmV0c19leHBhbmRfZXJyX3NwZWNfdW5kZWZpbmVkOgogIG90aGVyOiAic2VjcmV0IHNwZWNpZmljYXRpb24gZm9yIGB7ey5WMH19YCBub3QgZGVmaW5lZCBpbiBwcm9qZWN0IgpzZWNyZXRzX2V4cGFuZF9lcnJfbm90X2ZvdW5kOgogIG90aGVyOiAidW5hYmxlIHRvIGxvY2F0ZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgc2VjcmV0IGB7ey5WMH19YCIKCmtleXBhaXJfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNYW5hZ2UgWW91ciBLZXlwYWlyCmtleXBhaXJfZ2VuZXJhdGVfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBHZW5lcmF0ZSBhbmQgdXBsb2FkIGEgbmV3IEtleXBhaXIKa2V5cGFpcl9lcnI6CiAgb3RoZXI6IFVuYWJsZSB0byBhY2Nlc3MgdXNlcidzIEtleXBhaXIKa2V5cGFpcl9lcnJfbm90X2ZvdW5kOgogIG90aGVyOiBLZXlwYWlyIG5vdCB5ZXQgZ2VuZXJhdGVkCmtleXBhaXJfZXJyX3NhdmU6CiAgb3RoZXI6IEtleXBhaXIgY291bGQgbm90IGJlIHNhdmVkCmtleXBhaXJfZXJyX3B1YmxpY2tleV9ub3RfZm91bmQ6CiAgb3RoZXI6IE5vIHB1YmxpYy1rZXkgZm91bmQgZm9yIHVzZXIgYHt7LlYwfX1gICh7ey5WMX19KQoKa2V5cGFpcnNfZXJyX2JpdGxlbmd0aF90b29fc2hvcnQ6CiAgb3RoZXI6IGJpdC1sZW5ndGggdG9vIHNob3J0CmtleXBhaXJzX2Vycl9wZW1fZW5jb2Rpbmc6CiAgb3RoZXI6IGludmFsaWQgUEVNIGVuY29kaW5nCmtleXBhaXJzX2Vycl9pbnZhbGlkX3JzYV9wdWJsaWNrZXk6CiAgb3RoZXI6IHByb3ZpZGVkIGtleSBub3QgYW4gUlNBIHB1YmxpYy1rZXkK\"")
}

// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package locale

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiB1bmRlZmluZWQKY29uZmlybWF0aW9uOgogIG90aGVyOiAiWWVzIgpzdGF0ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogVGhlIEFjdGl2ZVN0YXRlIENMSSBhbGxvd3MgeW91IHRvIGVhc2lseSBzd2l0Y2ggYmV0d2VlbiB5b3VyIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cwphY3RpdmF0ZV9wcm9qZWN0OgogIG90aGVyOiBhY3RpdmF0ZSBhIHByb2plY3QKZXZlbnRzX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNYW5hZ2UgUHJvamVjdCBFdmVudHMKZXZlbnRzX2hlYWRlcl9pZDoKICBvdGhlcjogSUQKZXZlbnRzX2hlYWRlcl9ldmVudDoKICBvdGhlcjogRXZlbnQKZXZlbnRzX2hlYWRlcl92YWx1ZToKICBvdGhlcjogVmFsdWUKZXZlbnRfbGlzdGluZzoKICBvdGhlcjogTGlzdGluZyBjb25maWd1cmVkIGV2ZW50cwp1c2FnZV90cGw6CiAgb3RoZXI6ICIKVXNhZ2U6CiAgW1tpZiAuUnVubmFibGVdXVtbQlJdXQogIFtbLlVzZUxpbmVdXSAKe3sgcmFuZ2UgJGtleSwgJGFyZ3VtZW50IDo9IC5Bcmd1bWVudHMgfX08e3skYXJndW1lbnQuTmFtZX19PiB7eyBlbmQgfX0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNlczpbW0JSXV0KICBbWy5OYW1lQW5kQWxpYXNlc11dW1tlbmRdXQoKW1tpZiAuSGFzRXhhbXBsZV1dCltbQlJdXVtbQlJdXQpFeGFtcGxlczpbW0JSXV0KICBbWy5FeGFtcGxlXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXVtbQlJdXUF2YWlsYWJsZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsIEZsYWdzOiAKW1tCUl1dW1suSW5oZXJpdGVkRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKe3tpZiBndCAobGVuIC5Bcmd1bWVudHMpIDB9fQpbW0JSXV1bW0JSXV0KQXJndW1lbnRzOltbQlJdXQogIHt7IHJhbmdlICRrZXksICRhcmd1bWVudCA6PSAuQXJndW1lbnRzIH19CiAgPHt7JGFyZ3VtZW50Lk5hbWV9fT4ge3tpZiBndCAobGVuICRhcmd1bWVudC5SZXF1aXJlZCkgMH19ICAgICAgICAgIHt7ZWxzZX19KG9wdGlvbmFsKXt7ZW5kfX0ge3skYXJndW1lbnQuRGVzY3JpcHRpb259fVtbQlJdXQogIHt7IGVuZCB9fQp7e2VuZH19CgpbW2lmIC5IYXNIZWxwU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KQWRkaXRpb25hbCBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KVXNlIFwiW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0gLS1oZWxwXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYSBjb21tYW5kLltbZW5kXV1bW0JSXV0iCmFyZ19zdGF0ZV9hY3RpdmF0ZV9uYW1lc3BhY2U6CiAgb3RoZXI6IE9SRy9QUk9KRUNUCmFyZ19zdGF0ZV9hY3RpdmF0ZV9uYW1lc3BhY2VfZGVzY3JpcHRpb246CiAgb3RoZXI6IFRoZSBuYW1lc3BhY2Ugb2YgdGhlIHByb2plY3QgdGhhdCB5b3Ugd2lzaCB0byBhY3RpdmF0ZQpmbGFnX3N0YXRlX2xvY2FsZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2V0IHRoZSBsb2NhbGlzYXRpb24KZmxhZ19zdGF0ZV92ZXJib3NlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBWZXJib3NlIG91dHB1dApmbGFnX3N0YXRlX3ZlcnNpb25fZGVzY3JpcHRpb246CiAgb3RoZXI6IFNob3cgdGhlIHZlcnNpb24gb2Ygb3VyIHN0YXRlIGV4ZWN1dGFibGUKZmxhZ19zdGF0ZV9hY3RpdmF0ZV9wYXRoX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBXaGVyZSB0byBpbnN0YWxsIHRoZSBwcm9qZWN0CmZsYWdfc3RhdGVfYWN0aXZhdGVfYnJhbmNoX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBDbG9uZSB0aGlzIHNwZWNpZmljIGJyYW5jaApmbGFnX3N0YXRlX2FjdGl2YXRlX2NkX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBXaGV0aGVyIG9yIG5vdCB0byBjaGFuZ2UgaW50byB0aGUgcHJvamVjdCBkaXJlY3Rvcnkgb25jZSBjcmVhdGVkCmluZm9fc3RhdGVfYWN0aXZhdGVfdXJpOgogIG90aGVyOiBBY3RpdmF0aW5nIFVSSSAne3suVVJJfX0nIGludG8gZGlyZWN0b3J5ICd7ey5EaXJ9fScKaW5mb19zdGF0ZV9hY3RpdmF0ZV9icmFuY2g6CiAgb3RoZXI6ICJDaGVja291dCBvdXQgYnJhbmNoOiB7ey5CcmFuY2h9fSIKZXJyb3JfY2Fubm90X2NoZWNrb3V0X2JyYW5jaDoKICBvdGhlcjogQ2Fubm90IGNoZWNrb3V0IGJyYW5jaAplcnJvcl9zdGF0ZV9hY3RpdmF0ZToKICBvdGhlcjogVW5hYmxlIHRvIGFjdGl2YXRlLiBQbGVhc2UgcmVmZXIgdG8gdGhlIGFib3ZlIGVycm9yIG1lc3NhZ2UsIHJlc29sdmUgdGhlIGlzc3VlLCBhbmQgcnVuIGFjdGl2YXRlIGFnYWluLgplcnJvcl9zdGF0ZV9hY3RpdmF0ZV9jb25maWdfZXhpc3RzOgogIG90aGVyOiBDb25maWcgZmlsZSAne3suQ29uZmlnRmlsZX19JyBub3QgZm91bmQgaW4gcmVwb3NpdG9yeSByb290LiBUaGlzIGZpbGUgaXMgbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBhY3RpdmF0aW9uIHByb2Nlc3MuCmluZm9fc3RhdGVfYWN0aXZhdGVfY2Q6CiAgb3RoZXI6IENoYW5naW5nIGludG8gZGlyZWN0b3J5ICd7ey5EaXJ9fScKZXJyb3JfdW5zdXBwb3J0ZWRfc2hlbGw6CiAgb3RoZXI6ICJZb3UgYXJlIHVzaW5nIGFuIHVuc3VwcG9ydGVkIHNoZWxsOiB7ey5TaGVsbH19IgplcnJvcl9jYW5ub3RfY2xvbmVfdXJpOgogIG90aGVyOiAiVW5hYmxlIHRvIGNsb25lIHRoZSBmb2xsb3dpbmcgVVJJOiB7ey5VUkl9fSIKZXJyb3JfY291bGRfbm90X2FjdGl2YXRlX3N1YnNoZWxsOgogIG90aGVyOiBDb3VsZCBub3QgYWN0aXZhdGUgYSBuZXcgc3Vic2hlbGwKaW5mb19kZWFjdGl2YXRlZDoKICBvdGhlcjogRGVhY3RpdmF0ZWQge3suT3duZXJ9fS97ey5OYW1lfX0KdmVudl9pbnN0YWxsZXJfaXNfbmlsOgogIG90aGVyOiBQcm92aWRlZCBpbnN0YWxsZXIgc2hvdWxkIG5vdCBiZSBuaWwKZXJyb3JfdW5zdXBwb3J0ZWRfbGFuZ3VhZ2U6CiAgb3RoZXI6ICJVbnN1cHBvcnRlZCBsYW5ndWFnZToge3suTGFuZ3VhZ2V9fSIKZXJyb3JfY291bGRfbm90X2FjdGl2YXRlX3ZlbnY6CiAgb3RoZXI6IENvdWxkIG5vdCBhY3RpdmF0ZSB0aGUgdmlydHVhbCBlbnZpcm9ubWVudAplcnJfbGFuZ3VhZ2Vfbm90X3lldF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJUaGUgUGxhdGZvcm0gcmVzcG9uZGVkIHdpdGggYW4gYXJ0aWZhY3QgdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgdmVyc2lvbiBvZiB0aGUgU3RhdGUgVG9vbCwgYXJ0aWZhY3QgbmFtZToge3suVjB9fS4gSXMgeW91ciBTdGF0ZSBUb29sIHVwIHRvIGRhdGU/IgplcnJvcl9taXNzaW5nX2FyZzoKICBvdGhlcjogIkFyZ3VtZW50IG1pc3Npbmc6IHt7Lk5hbWV9fSIKZXJyX25vX3Byb2plY3RmaWxlOgogIG90aGVyOiBObyBhY3RpdmVzdGF0ZS55YW1sIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5CmVycl9wYXJzZV9wcm9qZWN0OgogIG90aGVyOiAiQ291bGQgbm90IHBhcnNlIHByb2plY3QgZmlsZS4gRm9yIG1vcmUgaW5mbyByZWZlciB0byB0aGUgZXJyb3IgbG9nIgplcnJfaW52YWxpZF9pbnB1dDoKICBvdGhlcjogSW52YWxpZCBpbnB1dCByZWNlaXZlZApldmVudHNfZW1wdHk6CiAgb3RoZXI6IE5vIGV2ZW50cyBmb3VuZCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQKZXJyX25vX3VwZGF0ZV9pbmZvOgogIG90aGVyOiBDYW5ub3QgcmV0cmlldmUgdXBkYXRlIGluZm9ybWF0aW9uCm5vX3VwZGF0ZV9hdmFpbGFibGU6CiAgb3RoZXI6IFlvdSBhcmUgdXNpbmcgdGhlIGxhdGVzdCB2ZXJzaW9uIGF2YWlsYWJsZQp1cGRhdGluZ190b192ZXJzaW9uOgogIG90aGVyOiBVcGRhdGluZyBmcm9tIHt7LmZyb21WZXJzaW9ufX0gdG8ge3sudG9WZXJzaW9ufX0KZXJyX3VwZGF0ZV9mYWlsZWQ6CiAgb3RoZXI6IFVwZGF0ZSBmYWlsZWQsIGNoZWNrIHRoZSBlcnJvciBsb2cgZm9yIG1vcmUgaW5mb3JtYXRpb24KdmVyc2lvbl9pbmZvOgogIG90aGVyOiB8IAogICAgQWN0aXZlU3RhdGUgQ0xJIHZlcnNpb24ge3suVmVyc2lvbn19CiAgICBSZXZpc2lvbiB7ey5SZXZpc2lvbn19CiAgICBCcmFuY2gge3suQnJhbmNofX0KICAgIEJ1aWx0IHt7LkRhdGV9fQp1cGRhdGVfY29tcGxldGU6CiAgb3RoZXI6IFVwZGF0ZSBjb21wbGV0ZWQgc3VjY2VzZnVsbHkKdXBkYXRlX2hhc2hfbWlzbWF0Y2g6CiAgb3RoZXI6IFRoZSBhcmNoaXZlIGhhc2ggY291bGQgbm90IGJlIHZlcmlmaWVkCmVycl9wcm9qZWN0X2ZpbGVfdW5hdmFpbGFibGU6CiAgb3RoZXI6IENvdWxkIG5vdCBsb2FkIHRoZSBwcm9qZWN0IGZpbGUKZXJyX3Byb2plY3RfcGFyc2U6CiAgb3RoZXI6ICJQcm9qZWN0IGZpbGUgY291bGQgbm90IGJlIHBhcnNlZCwgdGhlIHBhcnNlciBwcm9kdWNlZCB0aGUgZm9sbG93aW5nIGVycm9yOiB7ey5FcnJvcn19IgplcnJfZmFpbHVyZV90ZXN0OgogIG90aGVyOiBvbmUge3suVjB9fSB0aHJlZSB7ey5WMX19CmRpc3Ryb19vYnRhaW5pbmc6CiAgb3RoZXI6ICJPYnRhaW5pbmcgRGlzdHJpYnV0aW9uIgpkaXN0cm9faW5zdGFsbGluZzoKICBvdGhlcjogIkluc3RhbGxpbmcgQXJ0aWZhY3RzIgplcnJfaGFzaF9taXNtYXRjaDoKICBvdGhlcjogIkludmFsaWQgZmlsZSBoYXNoIGZvciBmaWxlIHt7LlYwfX0sIGV4cGVjdGVkIGhhc2g6IHt7LlYyfX0sIGdvdDoge3suVjF9fSIKZXJyX2xhbmd1YWdlX25vdF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJMYW5ndWFnZSBub3QgeWV0IHN1cHBvcnRlZDoge3suVjB9fSIKZXJyX2FydGlmYWN0X25vdF9zdXBwb3J0ZWQ6CiAgb3RoZXI6ICJBcnRpZmFjdCBub3Qgc3VwcG9ydGVkOiB7ey5WMH19IgplcnJfYXJ0aWZhY3Rfbm9fcGFyZW50OgogIG90aGVyOiAiVGhlIGdpdmVuIGFydGlmYWN0IGhhcyBubyBwYXJlbnQ6IHt7LlYwfX0uIE9ubHkgTGFuZ3VhZ2UgYXJ0aWZhY3RzIGNhbiBiZSB3aXRob3V0IHBhcmVudC4iCmVycl9pbnZhbGlkX3N0YXR1c19jb2RlOgogIG90aGVyOiAiSW52YWxpZCBzdGF0dXMgY29kZToge3suVjB9fSIKaW5mb19hY3RpdmF0aW5nX3N0YXRlOgogIG90aGVyOiAiQWN0aXZhdGluZyBzdGF0ZToge3suT3duZXJ9fS97ey5OYW1lfX0iCmluZm9fc3RhdGVfYWN0aXZlX3JlcG9leGlzdHM6CiAgb3RoZXI6ICJSZXBvIGFscmVhZHkgZXhpc3RzOiB7ey5QYXRofX0iCnBhbmljX2NvdWxkbnRfZGV0ZWN0X3dkOgogIG90aGVyOiAiQ291bGQgbm90IGRldGVjdCB3b3JraW5nIGRpcmVjdG9yeToge3suRXJyb3J9fSIKYXV0aF9kZXNjcmlwdGlvbjoKICBvdGhlcjogQXV0aGVudGljYXRlIGFnYWluc3QgdGhlIEFjdGl2ZVN0YXRlIHBsYXRmb3JtCmFyZ19zdGF0ZV9hdXRoX3Rva2VuX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBUaGUgQVBJIFRva2VuIGdlbmVyYXRlZCB2aWEgeW91ciBjb250cm9sIHBhbmVsCmFyZ19zdGF0ZV9hdXRoX3VzZXJuYW1lX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBUaGUgdXNlcm5hbWUgdG8gYXV0aGVudGljYXRlIHdpdGgsIHdpbGwgYmUgcHJvbXB0ZWQgZm9yIG90aGVyd2lzZQphcmdfc3RhdGVfYXV0aF9wYXNzd29yZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogVGhlIHBhc3N3b3JkIHRvIGF1dGhlbnRpY2F0ZSB3aXRoLCB3aWxsIGJlIHByb21wdGVkIGZvciBvdGhlcndpc2UKdXNlcm5hbWVfcHJvbXB0OgogIG90aGVyOiAiRW50ZXIgeW91ciB1c2VybmFtZToiCnBhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3dvcmQ6IgpwYXNzcGhyYXNlX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3BocmFzZToiCnByZXZpb3VzX3Bhc3N3b3JkX21lc3NhZ2U6CiAgb3RoZXI6ICJZb3VyIHBhc3N3b3JkIG1heSBoYXZlIGNoYW5nZWQgcmVjZW50bHkuIFdlIG5lZWQgdG8gcmVlbmNyeXB0IHlvdXIgcHJpdmF0ZS1rZXkgc28gdGhhdCB5b3UgbWF5IGNvbnRpbnVlIHVzaW5nIHlvdXIgc2VjcmV0cywgYnV0IHdlIG5lZWQgeW91ciBwcmV2aW91cyBwYXNzd29yZCBpbiBvcmRlciB0byBkbyBzby4iCmF1dGhfZ2VuZXJhdGVfbmV3X2tleXBhaXJfbWVzc2FnZToKICBvdGhlcjogIlRoZXJlIGlzIGFuIHVucmVjb3ZlcmFibGUgaXNzdWUgd2l0aCB5b3VyIGV4aXN0aW5nIGtleXBhaXIgYW5kIHRoZSBiZXN0IGNvdXJzZSBvZiBhY3Rpb24gaXMgdG8gZ2VuZXJhdGUgYSBuZXcga2V5cGFpci4iCmF1dGhfY29uZmlybV9nZW5lcmF0ZV9uZXdfa2V5cGFpcl9wcm9tcHQ6CiAgb3RoZXI6IEdlbmVyYXRlIG5ldyBrZXlwYWlyPwphdXRoX3VucmVzb2x2ZWRfa2V5cGFpcl9pc3N1ZV9tZXNzYWdlOgogIG90aGVyOiAiRm9yIHNlY3VyaXR5IHB1cnBvc2VzIHJlZ2FyZGluZyB5b3VyIGtleXBhaXIsIHdlIGFyZSBsb2dnaW5nIHlvdSBvdXQuIgphdXRoX2Vycl91bnJlY292ZXJhYmxlX2tleXBhaXI6CiAgb3RoZXI6ICJVbnJlY292ZXJhYmxlIGtleXBhaXIgaXNzdWUiCnByZXZpb3VzX3Bhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgcHJldmlvdXMgcGFzc3dvcmQ6IgpzZWNyZXRfdmFsdWVfcHJvbXB0OgogIG90aGVyOiAiRW50ZXIge3suVjB9fSBzY29wZWQgdmFsdWUgZm9yIHZhcmlhYmxlICd7ey5WMX19Jyc6Igp1c2VybmFtZV9wcm9tcHRfc2lnbnVwOgogIG90aGVyOiAiQ2hvb3NlIGEgdXNlcm5hbWU6IgpwYXNzd29yZF9wcm9tcHRfc2lnbnVwOgogIG90aGVyOiAiQ2hvb3NlIGEgcGFzc3dvcmQ6IgpwYXNzd29yZF9wcm9tcHRfY29uZmlybToKICBvdGhlcjogIkVudGVyIHlvdXIgcGFzc3dvcmQgYWdhaW46IgpuYW1lX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgbmFtZToiCmVtYWlsX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgZW1haWw6Igp0b3RwX3Byb21wdDoKICBvdGhlcjogIkVudGVyIHlvdXIgdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvbiBjb2RlOiIKc3VydmV5X2Vycm9yX3RlbXBsYXRlOgogIG90aGVyOiAiW1tjb2xvciBcInJlZFwiXV0gSW52YWxpZCByZXNwb25zZTogW1suRXJyb3JdXVtbY29sb3IgXCJyZXNldFwiXV1bW0JSXV0iCmVycl92YWx1ZV9yZXF1aXJlZDogCiAgb3RoZXI6IHZhbHVlIHJlcXVpcmVkCmVycl9wcm9tcHRfdW5rb3duOgogIG90aGVyOiBBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxzdCBwcm9jZXNzaW5nIHlvdXIgcmVzcG9uc2UsIGNoZWNrIHRoZSBlcnJvciBsb2cgZm9yIG1vcmUgaW5mb3JtYXRpb24KcHJvbXB0X2xvZ2luX3RvX3NpZ251cDoKICBvdGhlcjogTm8gYWNjb3VudCB3YXMgZm91bmQgZm9yIHRoYXQgdXNlcm5hbWUsIHdvdWxkIHlvdSBsaWtlIHRvIHJlZ2lzdGVyIGl0PwplcnJfYXV0aF9mYWlsZWQ6CiAgb3RoZXI6IEF1dGhlbnRpY2F0aW9uIGZhaWxlZCwgaW52YWxpZCBwYXNzd29yZAplcnJfYXV0aF9mYWlsZWRfdW5rbm93bl9jYXVzZToKICBvdGhlcjogQXV0aGVudGljYXRpb24gZmFpbGVkIGR1ZSB0byBhbiB1bmtub3duIGNhdXNlLCBjaGVjayB0aGUgZXJyb3IgbG9nIGZvciBtb3JlIGluZm9ybWF0aW9uCmF1dGhfZXJyX3Bhc3N3b3JkX3Byb21wdDoKICBvdGhlcjogVGhlIHByb3ZpZGVkIHBhc3N3b3JkIGlzIGludmFsaWQKY29uZmlybV9wYXNzd29yZF9hY2NvdW50X2NyZWF0aW9uOgogIG90aGVyOiBQbGVhc2UgZW50ZXIgeW91ciBwYXNzd29yZCBhZ2FpbiB0byBjcmVhdGUgeW91ciBhY2NvdW50LgplcnJfcGFzc3dvcmRfY29uZmlybWF0aW9uX2ZhaWxlZDoKICBvdGhlcjogWW91ciBwYXNzd29yZCBjb25maXJtYXRpb24gZG9lcyBub3QgbWF0Y2gKZXJyX3VzZXJuYW1lX3Rha2VuOgogIG90aGVyOiBVc2VybmFtZSBpcyBhbHJlYWR5IHRha2VuCnNpZ251cF9kZXNjcmlwdGlvbjoKICBvdGhlcjogU2lnbnVwIGEgbmV3IGFjY291bnQKZXJyX2F1dGhfc2lnbnVwX2VtYWlsX2V4aXN0czoKICBvdGhlcjogQW4gYWNjb3VudCB3aXRoIHRoYXQgZW1haWwgYWRkcmVzcyBhbHJlYWR5IGV4aXN0cwpsb2dpbl9zdWNjZXNzX3dlbGNvbWVfYmFjazoKICBvdGhlcjogWW91IGhhdmUgc3VjY2VzZnVsbHkgYXV0aGVudGljYXRlZCwgaGVsbG8ge3suTmFtZX19IQpsb2dnZWRfaW5fYXM6CiAgb3RoZXI6IFlvdSBhcmUgbG9nZ2VkIGluIGFzIHt7Lk5hbWV9fQpsb2dvdXRfZGVzY3JpcHRpb246CiAgb3RoZXI6IExvZ291dApsb2dnZWRfb3V0OgogIG90aGVyOiBZb3UgaGF2ZSBiZWVuIGxvZ2dlZCBvdXQKc2lnbnVwX3N1Y2Nlc3M6CiAgb3RoZXI6IFlvdXIgYWNjb3VudCBoYXMgYmVlbiByZWdpc3RlcmVkIGFuZCBhIGNvbmZpcm1hdGlvbiBlbWFpbCBoYXMgYmVlbiBzZW50IHRvIHt7LkVtYWlsfX0sIHlvdXIgYWNjb3VudCB3aWxsIGhhdmUgbGltaXRlZCBwZXJtaXNzaW9ucyB1bnRpbCB5b3UgY29uZmlybSBpdC4KbG9naW5fY2FuY2VsbGVkOgogIG90aGVyOiBBdXRoZW50aWNhdGlvbiBDYW5jZWxsZWQKb3JnYW5pemF0aW9uc19kZXNjcmlwdGlvbjoKICBvdGhlcjogTGlzdCBtZW1iZXIgb3JnYW5pemF0aW9ucyBvbiB0aGUgQWN0aXZlU3RhdGUgcGxhdGZvcm0Kb3JnYW5pemF0aW9uc19lcnI6CiAgb3RoZXI6IFVuYWJsZSB0byBsaXN0IG1lbWJlciBvcmdhbml6YXRpb25zCm9yZ2FuaXphdGlvbl9uYW1lOgogIG90aGVyOiBPcmdhbml6YXRpb24gTmFtZQpvcmdhbml6YXRpb25fbm9fb3JnczoKICBvdGhlcjogWW91IGFyZSBub3QgYSBtZW1iZXIgb2YgYW55IG9yZ2FuaXphdGlvbnMKcHJvamVjdF9uYW1lOgogIG90aGVyOiBQcm9qZWN0IE5hbWUKcHJvamVjdF9kZXNjcmlwdGlvbjoKICBvdGhlcjogUHJvamVjdCBEZXNjcmlwdGlvbgpwcm9qZWN0X2VycjoKICBvdGhlcjogVW5hYmxlIHRvIGxpc3QgcHJvamVjdHMKbmV3X3Byb2plY3Q6CiAgb3RoZXI6IENyZWF0ZSBhIG5ldyBwcm9qZWN0CmZsYWdfc3RhdGVfbmV3X3BhdGhfZGVzY3JpcHRpb246CiAgb3RoZXI6IFBhdGggdG8gY3JlYXRlIGEgbmV3IHByb2plY3QgaW4uCmZsYWdfc3RhdGVfbmV3X293bmVyX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBPd25lciBvZiB0aGUgcHJvamVjdCBiZWluZyBjcmVhdGVkLgpmbGFnX3N0YXRlX25ld192ZXJzaW9uX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBWZXJzaW9uIG9mIHRoZSBwcm9qZWN0IGJlaW5nIGNyZWF0ZWQuCmFyZ19zdGF0ZV9uZXdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiB0aGUgbmV3IHByb2plY3QuCmVycm9yX3N0YXRlX25ld19ub19hdXRoOgogIG90aGVyOiBQbGVhc2UgYXV0aGVudGljYXRlIGJ5IHJ1bm5pbmcgInN0YXRlIGF1dGgiIGJlZm9yZSBjcmVhdGluZyBhIG5ldyBwcm9qZWN0LgpzdGF0ZV9uZXdfcHJvbXB0X25hbWU6CiAgb3RoZXI6IFBsZWFzZSBwcm92aWRlIGEgbmFtZSBmb3IgdGhlIG5ldyBwcm9qZWN0LgplcnJvcl9zdGF0ZV9uZXdfYWJvcnQ6CiAgb3RoZXI6ICJVbmFibGUgdG8gY3JlYXRlIG5ldyBwcm9qZWN0OiBhYm9ydGVkLiIKZXJyb3Jfc3RhdGVfbmV3X2V4aXN0czoKICBvdGhlcjogIlVuYWJsZSB0byBjcmVhdGUgbmV3IHByb2plY3Q6IHBhdGggZXhpc3RzLiIKZXJyb3Jfc3RhdGVfbmV3X21rZGlyOgogIG90aGVyOiBVbmFibGUgdG8gY3JlYXRlIG5ldyBwcm9qZWN0IGRpcmVjdG9yeS4Kc3RhdGVfbmV3X3Byb21wdF9vd25lcjoKICBvdGhlcjogUGxlYXNlIHByb3ZpZGUgYW4gb3duZXIgZm9yIHRoZSBuZXcgcHJvamVjdC4KZXJyb3Jfc3RhdGVfbmV3X2ZldGNoX29yZ2FuaXphdGlvbnM6CiAgb3RoZXI6ICJVbmFibGUgdG8gY3JlYXRlIG5ldyBwcm9qZWN0OiBjYW5ub3QgZGV0ZXJtaW5lIHBvdGVudGlhbCBvd25lcnMuIgplcnJvcl9zdGF0ZV9uZXdfdmVyc2lvbjoKICBvdGhlcjogVmVyc2lvbiBzdHJpbmcgbXVzdCBjb25zaXN0IG9ubHkgb2YgbnVtYmVycyBhbmQgZGVjaW1hbHMuCnN0YXRlX25ld19jcmVhdGVkOgogIG90aGVyOiBDcmVhdGVkIG5ldyBwcm9qZWN0IGluIHt7LkRpcn19CmVycm9yX3N0YXRlX25ld19wcm9qZWN0X2FkZDoKICBvdGhlcjogVW5hYmxlIHRvIGNyZWF0ZSBuZXcgUGxhdGZvcm0gcHJvamVjdC4KcHJvamVjdF9lbXB0eToKICBvdGhlcjogWW91IGhhdmUgbm90IGNyZWF0ZWQgYW55IHByb2plY3RzIHlldAp0b3RhbDoKICBvdGhlcjogVG90YWwKcHJvamVjdHNfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1hbmFnZSBZb3VyIFByb2plY3RzCmVycl9hcGlfbm90X2F1dGhlbnRpY2F0ZWQ6CiAgb3RoZXI6IFlvdSBhcmUgbm90IGF1dGhlbnRpY2F0ZWQsIGF1dGhlbnRpY2F0ZSB3aXRoIGBzdGF0ZSBhdXRoYC4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcnVuIGBzdGF0ZSBhdXRoIC0taGVscGAuCmVycl9hcGlfb3JnX25vdF9mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgcmVxdWVzdGVkIE9yZ2FuaXphdGlvbgplcnJfYXBpX3Byb2plY3Rfbm90X2ZvdW5kOgogIG90aGVyOiBUaGUgcmVxdWVzdGVkIHByb2plY3QgZG9lcyBub3QgZXhpc3Qgb24gdGhlIEFjdGl2ZVN0YXRlIFBsYXRmb3JtCmVycl9hcGlfbWVtYmVyX25vdF9mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgcmVxdWVzdGVkIE1lbWJlcgp2YXJpYWJsZXNfZXhwYW5kZXJfZXJyX2VtcHR5X25hbWU6CiAgb3RoZXI6IEV4cGFuZGVyIGhhbmRsZSBjYW4gbm90IGJlIGFuIGVtcHR5IHN0cmluZwp2YXJpYWJsZXNfZXhwYW5kZXJfZXJyX3VuZGVmaW5lZDoKICBvdGhlcjogRXhwYW5kZXIgbXVzdCBiZSBkZWZpbmVkCmVycm9yX2V4cGFuZF92YXJpYWJsZV9pbmZpbml0ZV9yZWN1cnNpb246CiAgb3RoZXI6IEluZmluaXRlIHJlY3Vyc2lvbiB0cnlpbmcgdG8gZXhwYW5kIHZhcmlhYmxlICd7ey5WMH19JwplcnJvcl9leHBhbmRfdmFyaWFibGVfcHJvamVjdF91bmtub3duX2NhdGVnb3J5OgogIG90aGVyOiAiRXJyb3IgZXhwYW5kaW5nIHZhcmlhYmxlICd7ey5WMH19JzogdW5rbm93biBjYXRlZ29yeSAne3suVjF9fSciCmVycm9yX2V4cGFuZF92YXJpYWJsZV9wcm9qZWN0X3Vua25vd25fbmFtZToKICBvdGhlcjogIkVycm9yIGV4cGFuZGluZyB2YXJpYWJsZSAne3suVjB9fSc6IHt7LlYxfX0iCmVycm9yX2V4cGFuZF92YXJpYWJsZV9wcm9qZWN0X3VucmVjb2duaXplZF9wbGF0Zm9ybV92YXI6CiAgb3RoZXI6ICJVbnJlY29nbml6ZWQgcGxhdGZvcm0gdmFyaWFibGUgJ3t7LlYwfX0nIgpydW5fZGVzY3JpcHRpb246CiAgb3RoZXI6IFJ1biBZb3VyIFByb2plY3QgU2NyaXB0cwpzY3JpcHRzX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBTaG93IHByb2plY3Qgc2NyaXB0cyAKYXJnX3N0YXRlX3J1bl9uYW1lOgogIG90aGVyOiBzY3JpcHQKYXJnX3N0YXRlX3J1bl9uYW1lX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBOYW1lIG9mIHNjcmlwdCB0byBydW4KZmxhZ19zdGF0ZV9ydW5fc3RhbmRhbG9uZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogUnVuIGEgc2NyaXB0LCByZWdhcmRsZXNzIG9mIGFuIGFjdGl2YXRlZCBzdGF0ZQpmbGFnX3N0YXRlX3J1bl9saXN0X2Rlc2NyaXB0aW9uOgogIG90aGVyOiBMaXN0IGF2YWlsYWJsZSBzY3JpcHRzCmVycm9yX3N0YXRlX3J1bl91bmRlZmluZWRfbmFtZToKICBvdGhlcjogVGhlIHNjcmlwdCBuYW1lIG11c3QgYmUgcHJvdmlkZWQKZXJyb3Jfc3RhdGVfcnVuX3Vua25vd25fbmFtZToKICBvdGhlcjogVGhlIHNjcmlwdCAne3suTmFtZX19JyBpcyBub3QgZGVmaW5lZCBpbiBhY3RpdmVzdGF0ZS55YW1sLgppbmZvX3N0YXRlX3J1bl9hY3RpdmF0aW5nX3N0YXRlOgogIG90aGVyOiBUaGlzIHNjcmlwdCByZXF1aXJlcyBhbiBhY3RpdmF0ZWQgc3RhdGUuIEFjdGl2YXRpbmcgaXQgbm93LiBUbyBieXBhc3MgdGhpcywgdXNlIHRoZSAtLXN0YW5kYWxvbmUgZmxhZy4KZXJyb3Jfc3RhdGVfcnVuX2FjdGl2YXRlOgogIG90aGVyOiBVbmFibGUgdG8gYWN0aXZhdGUgYSBzdGF0ZSBmb3IgcnVubmluZyB0aGUgc2NyaXB0IGluLiBUcnkgbWFudWFsbHkgcnVubmluZyAic3RhdGUgYWN0aXZhdGUiIGZpcnN0LgppbmZvX3N0YXRlX3J1bl9ydW5uaW5nOgogIG90aGVyOiAiUnVubmluZyB1c2VyLWRlZmluZWQgc2NyaXB0OiB7ey5WMH19XG5EZWZpbmVkIGluIHt7LlYxfX0iCmVycm9yX3N0YXRlX3J1bl9lcnJvcjoKICBvdGhlcjogRmFpbGVkIHRvIHJ1biBzY3JpcHQuCmVycm9yX3N0YXRlX3J1bl9ub19zaGVsbDoKICBvdGhlcjogRmFpbGVkIHRvIG9idGFpbiBzaGVsbCBpbmZvLgplbnZfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1hbmFnZSBQcm9qZWN0IFZhcmlhYmxlcwplbnZfYWRkX2Rlc2NyaXB0aW9uOgogIG90aGVyOiAKICAgID4KICAgIGFkZCB2YXJpYWJsZQplbnZfcmVtb3ZlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiAKICAgID4KICAgIHJlbW92ZSB2YXJpYWJsZQplbnZfaGVhZGVyX2lkOgogIG90aGVyOiBJRAplbnZfaGVhZGVyX3ZhcmlhYmxlOgogIG90aGVyOiBWQVJJQUJMRQplbnZfaGVhZGVyX3ZhbHVlOgogIG90aGVyOiBWQUxVRQplbnZfbGlzdGluZ192YXJpYWJsZXM6CiAgb3RoZXI6IExpc3RpbmcgZGVmaW5lZCB2YXJpYWJsZXMKZW52X2FkZF9jYW5ub3RfYWRkX3ZhcmlhYmxlOgogIG90aGVyOiAiQ2Fubm90IGFkZCBWYXJpYWJsZSAne3suTmFtZX19IHt7LlZhbHVlfX0nIgplbnZfYWRkX2Nhbm5vdF9hZGRfZXhpc3RpbmdfdmFyaWFibGU6CiAgb3RoZXI6ICJJZGVudGljYWwgdmFyaWFibGUgYWxyZWFkeSBkZWZpbmVkIgplbnZfcmVtb3ZlX2Nhbm5vdF9yZW1vdmU6CiAgb3RoZXI6ICJDYW5ub3QgcmVtb3ZlIHZhcmlhYmxlIgphcmdfZW52X2FkZF92YXJpYWJsZToKICBvdGhlcjogVkFSSUFCTEUKYXJnX2Vudl9hZGRfdmFyaWFibGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IFRoZSB2YXJpYWJsZSB0aGF0IHdpbGwgYmUgZGVmaW5lZAplcnJvcl9lbnZfYWRkX2ludmFsaWRfdmFyaWFibGU6CiAgb3RoZXI6ICJJbnZhbGlkIHZhcmlhYmxlIG5hbWUgZ2l2ZW46IHt7LlYwfX0iCmFyZ19lbnZfYWRkX3ZhbHVlOgogIG90aGVyOiBWQUxVRQphcmdfZW52X2FkZF92YWx1ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogVGhlIHZhbHVlIHRoYXQgd2lsbCBiZSBhc3NpZ25lZAphcmdfZW52X3JlbW92ZV9pZGVudGlmaWVyOgogIG90aGVyOiBJREVOVElGSUVSCmFyZ19lbnZfcmVtb3ZlX2lkZW50aWZpZXJfZGVzY3JpcHRpb246CiAgb3RoZXI6IElkZW50aWZpZXMgd2hhdCB2YXJpYWJsZSB0byByZW1vdmUsIGNhbiBiZSBhIGhhc2ggb3IgYSB2YXJpYWJsZSBuYW1lCnByb21wdF9jaG9vc2VfdmFyaWFibGU6CiAgb3RoZXI6IFdoaWNoIHZhcmlhYmxlIGRvIHlvdSB3aXNoIHRvIHJlbW92ZT8KZXJyX2Vudl9jYW5ub3RfbGlzdDoKICBvdGhlcjogQ2Fubm90IGxpc3QgdmFyaWFibGVzCmVycl9lbnZfY2Fubm90X2ZpbmQ6CiAgb3RoZXI6IENhbm5vdCBmaW5kIHZhcmlhYmxlcyBtYXRjaGluZyB5b3VyIHF1ZXJ5CnByb21wdF9lbnZfY2hvb3NlX3JlbW92ZToKICBvdGhlcjogV2hpY2ggdmFyaWFibGUgd291bGQgeW91IGxpa2UgdG8gcmVtb3ZlPwplcnJfZW52X2Nhbm5vdF9wYXJzZToKICBvdGhlcjogQ291bGQgbm90IHBhcnNlIHZhcmlhYmxlcyB1c2VkIGluIHlvdXIgcmVxdWVzdApwcm9tcHRfZW52X29wdGlvbjoKICBvdGhlcjogInt7LlZhcmlhYmxlfX06IGB7ey5WYWx1ZX19YCAoe3suQ29uc3RyYWludHN9fXt7Lkhhc2h9fSkiCmVudl9yZW1vdmVkOgogIG90aGVyOiAiVmFyaWFibGUgcmVtb3ZlZDoge3suVmFyaWFibGV9fSAoe3suSGFzaH19KSIKZW52X2luaGVyaXRfZGVzY3JpcHRpb246CiAgb3RoZXI6IFVwZGF0ZSB0aGUgY3VycmVudCBwcm9qZWN0IHRvIGluaGVyaXQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCmVudl9pbmhlcml0X3Byb21wdF9vdmVyd3JpdGU6CiAgb3RoZXI6IERvIHlvdSB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgcHJvamVjdCdzIGV4aXN0aW5nIHZhcmlhYmxlIHt7Lk5hbWV9fSwgd2hvc2UgdmFsdWUgaXMgInt7Lk9sZFZhbHVlfX0iLCB3aXRoIHRoZSBuZXcgdmFsdWUgInt7Lk5ld1ZhbHVlfX0iPwplbnZfaW5oZXJpdF9pbmhlcml0X2Fib3J0ZWQ6CiAgb3RoZXI6ICJVbmFibGUgdG8gaW5oZXJpdCBmcm9tIGN1cnJlbnQgZW52aXJvbm1lbnQ6IGFib3J0ZWQuIgpzaG93X3Byb2plY3Q6CiAgb3RoZXI6IFNob3dzIGluZm9ybWF0aW9uIGFib3V0IGEgcHJvamVjdC4KYXJnX3N0YXRlX3Nob3dfcmVtb3RlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBQYXRoIHRvIHByb2plY3QKZXJyX3N0YXRlX3Nob3dfcGF0aF9kb2VzX25vdF9leGlzdDoKICBvdGhlcjogRGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LgplcnJfc3RhdGVfc2hvd19ub19jb25maWc6CiAgb3RoZXI6IGFjdGl2ZXN0YXRlLnlhbWwgZmlsZSBub3QgZm91bmQgaW4gdGhlIGdpdmVuIGxvY2F0aW9uLgplcnJfc3RhdGVfc2hvd19wcm9qZWN0X3BhcnNlOgogIG90aGVyOiBDb3VsZCBub3QgcGFyc2UgYWN0aXZlc3RhdGUueWFtbC4KcHJpbnRfc3RhdGVfc2hvd19uYW1lOgogIG90aGVyOiBOYW1lCnByaW50X3N0YXRlX3Nob3dfb3JnYW5pemF0aW9uOgogIG90aGVyOiBPcmdhbml6YXRpb24KcHJpbnRfc3RhdGVfc2hvd191cmw6CiAgb3RoZXI6IFVSTApwcmludF9zdGF0ZV9zaG93X3BsYXRmb3JtczoKICBvdGhlcjogUGxhdGZvcm1zCnByaW50X3N0YXRlX3Nob3dfZXZlbnRzOgogIG90aGVyOiBFdmVudHMgdGhhdCB3aWxsIHJ1bgpwcmludF9zdGF0ZV9zaG93X3NjcmlwdHM6CiAgb3RoZXI6IFNjcmlwdHMKcHJpbnRfc3RhdGVfc2hvd19sYW5ndWFnZXM6CiAgb3RoZXI6IExhbmd1YWdlcwpwcmludF9zdGF0ZV9zaG93X3BhY2thZ2VzOgogIG90aGVyOiBwYWNrYWdlcwpwcmludF9zdGF0ZV9zaG93X2Vudl92YXJzOgogIG90aGVyOiBFbnZpcm9ubWVudCB2YXJpYWJsZXMKcHJpbnRfc3RhdGVfc2hvd19zZWNyZXRzOgogIG90aGVyOiBTZWNyZXQgc3BlY2lmaWNhdGlvbnMKZXJyX2Nhbm5vdF9vYnRhaW5fZGlzdDoKICBvdGhlcjogIkNvdWxkIG5vdCBvYnRhaW4gZGlzdHJpYnV0aW9uIGZvciBsYW5ndWFnZToge3suVjB9fSIKY29uZmlnX3ZhcmlhYmxlX3Byb21wdF92YWx1ZToKICBvdGhlcjogIlZhcmlhYmxlICd7ey5OYW1lfX0nIHVuZGVmaW5lZC4gUGxlYXNlIGVudGVyIGEgdmFsdWU6IgplcnJfYWxyZWFkeV9hY3RpdmU6CiAgb3RoZXI6ICJZb3UgY2Fubm90IGFjdGl2YXRlIGEgbmV3IHN0YXRlIHdoZW4geW91IGFyZSBhbHJlYWR5IGluIGFuIGFjdGl2YXRlZCBzdGF0ZS4gWW91IGFyZSBpbiBhbiBhY3RpdmF0ZWQgc3RhdGUgZm9yIHByb2plY3Q6IHt7LlYwfX0iCnJ1bl9saXN0aW5nX3NjcmlwdHM6CiAgb3RoZXI6ICJBdmFpbGFibGUgU2NyaXB0czogIgoKdmFyaWFibGVzX2NtZF9kZXNjcmlwdGlvbjoKICBvdGhlcjogTWFuYWdlIFlvdXIgVmFyaWFibGVzCnZhcmlhYmxlc19nZXRfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBHZXQgdGhlIHZhbHVlIG9mIGEgdmFyaWFibGUKdmFyaWFibGVzX2dldF9hcmdfbmFtZV9uYW1lOgogIG90aGVyOiB2YXJpYWJsZS1uYW1lCnZhcmlhYmxlc19nZXRfYXJnX25hbWVfZGVzY3JpcHRpb246CiAgb3RoZXI6IE5hbWUgb2YgVmFyaWFibGUKdmFyaWFibGVzX3NldF9jbWRfZGVzY3JpcHRpb246CiAgb3RoZXI6IFNldCB0aGUgdmFsdWUgb2YgYSB2YXJpYWJsZQp2YXJpYWJsZXNfc2V0X2FyZ19uYW1lX25hbWU6CiAgb3RoZXI6IHZhcmlhYmxlLW5hbWUKdmFyaWFibGVzX3NldF9hcmdfbmFtZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTmFtZSBvZiBWYXJpYWJsZQp2YXJpYWJsZXNfc2V0X2FyZ192YWx1ZV9uYW1lOgogIG90aGVyOiB2YXJpYWJsZS12YWx1ZQp2YXJpYWJsZXNfc2V0X2FyZ192YWx1ZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogVmFsdWUgb2YgdW5lbmNyeXB0ZWQgVmFyaWFibGUKdmFyaWFibGVzX3NldF9mbGFnX3Byb2plY3Q6CiAgb3RoZXI6IFNjb3BlIHRoZSB2YXJpYWJsZSB0byB0aGUgY3VycmVudCBwcm9qZWN0CnZhcmlhYmxlc19zZXRfZmxhZ191c2VyOgogIG90aGVyOiBTY29wZSB0aGUgdmFyaWFibGUgdG8gdGhlIGN1cnJlbnQgdXNlcgp2YXJpYWJsZXNfc2hhcmVfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBTaGFyZSB5b3VyIG9yZ2FuaXphdGlvbiBhbmQgcHJvamVjdCB2YXJpYWJsZXMgd2l0aCBhbm90aGVyIHVzZXIKdmFyaWFibGVzX3NoYXJlX2FyZ191c2VyX25hbWU6CiAgb3RoZXI6IHVzZXItaGFuZGxlCnZhcmlhYmxlc19zaGFyZV9hcmdfdXNlcl9kZXNjcmlwdGlvbjoKICBvdGhlcjogVXNlcm5hbWUgb2YgdXNlciBpbiB5b3VyIG9yZ2FuaXphdGlvbgp2YXJpYWJsZXNfc3luY19jbWRfZGVzY3JpcHRpb246CiAgb3RoZXI6IFN5bmNocm9uaXplIHlvdXIgc2hhcmVhYmxlIHZhcmlhYmxlcyBvcmdhbml6YXRpb24td2lkZQp2YXJpYWJsZXNfc3luY19yZXN1bHRzX21lc3NhZ2U6CiAgb3RoZXI6IFN1Y2Nlc3NmdWxseSBzeW5jaHJvbml6ZWQge3suVjB9fSB1c2VycyBvZiB0aGUge3suVjF9fSBvcmdhbml6YXRpb24KdmFyaWFibGVzX2NvbF9uYW1lOgogIG90aGVyOiBOYW1lCnZhcmlhYmxlc19jb2xfdmFsdWU6CiAgb3RoZXI6IFZhbHVlCnZhcmlhYmxlc19jb2xfZW5jcnlwdGVkOgogIG90aGVyOiBFbmNyeXB0ZWQKdmFyaWFibGVzX2NvbF9zaGFyZWQ6CiAgb3RoZXI6IFNoYXJlZAp2YXJpYWJsZXNfY29sX3N0b3JlOgogIG90aGVyOiBTdG9yZQp2YXJpYWJsZXNfdmFsdWVfc2VjcmV0X3VuZGVmaW5lZDoKICBvdGhlcjogPHVuZGVmaW5lZD4KdmFyaWFibGVzX3ZhbHVlX3NlY3JldDoKICBvdGhlcjogPGVuY3J5cHRlZD4KdmFyaWFibGVzX2VycjoKICBvdGhlcjogRXJyb3IgbWFuYWdpbmcgdXNlcidzIFZhcmlhYmxlcwp2YXJpYWJsZXNfZXJyX25vX3ZhcmlhYmxlc19mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgYW55IFZhcmlhYmxlcyBmb3IgVXNlcgp2YXJpYWJsZXNfZXJyX2VuY3J5cHRpbmc6CiAgb3RoZXI6ICJFcnJvciBlbmNyeXB0aW5nIGEgdXNlcidzIFZhcmlhYmxlOiB7ey5WMH19Igp2YXJpYWJsZXNfZXJyX2RlY3J5cHRpbmc6CiAgb3RoZXI6ICJFcnJvciBkZWNyeXB0aW5nIGEgdXNlcidzIFZhcmlhYmxlOiB7ey5WMH19Igp2YXJpYWJsZXNfZXJyX3NhdmU6CiAgb3RoZXI6IEVycm9yIHVwZGF0aW5nIHVzZXIncyBWYXJpYWJsZXMKdmFyaWFibGVzX2Vycl9iYXNlNjRfZGVjb2Rpbmc6CiAgb3RoZXI6IEVycm9yIGJhc2U2NCBkZWNvZGluZyB2YXJpYWJsZSB2YWx1ZQp2YXJpYWJsZXNfZXJyX25vX3B1YmxpY2tleV9mb3VuZDoKICBvdGhlcjogVW5hYmxlIHRvIGZpbmQgYW55IHB1YmxpYy1rZXkgZm9yIFVzZXIKdmFyaWFibGVzX2Vycl92YWx1ZV9wcm9tcHQ6CiAgb3RoZXI6IFRoZSBwcm92aWRlZCB2YXJpYWJsZSB2YWx1ZSBpcyBpbnZhbGlkIAp2YXJpYWJsZXNfZXhwYW5kX2Vycl91bmRlZmluZWQ6CiAgb3RoZXI6ICJWYXJpYWJsZSBge3suVjB9fWAgbm90IGRlZmluZWQgaW4gcHJvamVjdCIKdmFyaWFibGVzX2V4cGFuZF9lcnJfbm90X2ZvdW5kOgogIG90aGVyOiAidW5hYmxlIHRvIG9idGFpbiB2YWx1ZSBmb3IgdmFyaWFibGUgYHt7LlYwfX1gIgp2YXJpYWJsZV9lcnJfdW5kZWZpbmVkOgogIG90aGVyOiAiVmFyaWFibGUgYHt7LlYwfX1gIG5vdCBkZWZpbmVkIGluIHByb2plY3QiCnZhcmlhYmxlc19lcnJfaW52YWxpZF9wdWxsZnJvbToKICBvdGhlcjogIkludmFsaWQgcHVsbGZyb20gdXNlZCBmb3IgdmFyaWFibGUsIHZhbHVlIHVzZWQ6IHt7LlYwfX0sIHNob3VsZCBiZSBvbmUgb2Y6IHt7LlYxfX0iCnZhcmlhYmxlc19lcnJfaW52YWxpZF9zaGFyZToKICBvdGhlcjogIkludmFsaWQgc2hhcmUgbGV2ZWwgdXNlZCBmb3IgdmFyaWFibGUsIHZhbHVlIHVzZWQ6IHt7LlYwfX0sIHNob3VsZCBiZSBvbmUgb2Y6IHt7LlYxfX0iCnZhcmlhYmxlc19lcnJfdmFsdWVfd2l0aF9wdWxsOgogIG90aGVyOiAiVmFyaWFibGUgc2hvdWxkIG5vdCBoYXZlIGEgbG9jYWwgdmFsdWUgZGVmaW5lZCBpbiB0aGUgYWN0aXZlc3RhdGUueWFtbCBpZiBpdCdzIHNldHRpbmcgdGhlIHNoYXJlIG9yIHB1bGxmcm9tIGZpZWxkczoge3suVjB9fSIKdmFyaWFibGVzX2Vycl9pbnZhbGlkX3ZhbHVlOgogIG90aGVyOiAiVmFyaWFibGUgJ3t7LlYwfX0nIGhhcyBhbiBpbnZhbGlkIHZhbHVlOiB7ey5WMX19Igp2YXJpYWJsZXNfZXJyX3ZhbHVlX2VtcHR5OgogIG90aGVyOiAiVmFyaWFibGUgaGFzIG5vIHZhbHVlIGRlZmluZWQ6IHt7LlYwfX0iCmtleXBhaXJfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNYW5hZ2UgWW91ciBLZXlwYWlyCmtleXBhaXJfZ2VuZXJhdGVfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBHZW5lcmF0ZSBhbmQgdXBsb2FkIGEgbmV3IEtleXBhaXIKa2V5cGFpcl9nZW5lcmF0ZV9mbGFnX2JpdHM6CiAgb3RoZXI6IEJpdC1sZW5ndGggb2Yga2V5cGFpciB0byBnZW5lcmF0ZQprZXlwYWlyX2dlbmVyYXRlX2ZsYWdfZHJ5cnVuOgogIG90aGVyOiBEbyBub3Qgc2F2ZSBhbnkgY2hhbmdlcwprZXlwYWlyX2dlbmVyYXRlX2ZsYWdfc2tpcHBhc3NwaHJhc2U6CiAgb3RoZXI6IERvIG5vdCByZXF1aXJlIGEgcGFzc3BocmFzZSBmb3IgbmV3IEtleXBhaXIgKGltcGxpZXMgLS1kcnktcnVuKQprZXlwYWlyX2dlbmVyYXRlX3N1Y2Nlc3M6CiAgb3RoZXI6IEtleXBhaXIgZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseQprZXlwYWlyX2F1dGhfY21kX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBBdXRoZW50aWNhdGUgZXhpc3RpbmcgS2V5cGFpciBmb3IgZnV0dXJlIHNlc3Npb25zCmtleXBhaXJfZXJyOgogIG90aGVyOiBVbmFibGUgdG8gYWNjZXNzIHVzZXIncyBLZXlwYWlyCmtleXBhaXJfZXJyX25vdF9mb3VuZDoKICBvdGhlcjogS2V5cGFpciBub3QgeWV0IGdlbmVyYXRlZAprZXlwYWlyX2Vycl9zYXZlOgogIG90aGVyOiBLZXlwYWlyIGNvdWxkIG5vdCBiZSBzYXZlZAprZXlwYWlyX2Vycl9wdWJsaWNrZXlfbm90X2ZvdW5kOgogIG90aGVyOiBObyBwdWJsaWMta2V5IGZvdW5kIGZvciB1c2VyIGB7ey5WMH19YCAoe3suVjF9fSkKa2V5cGFpcl9lcnJfcGFzc3BocmFzZV9wcm9tcHQ6CiAgb3RoZXI6IFRoZSBwcm92aWRlZCBwYXNzcGhyYXNlIGlzIGludmFsaWQKa2V5cGFpcl9lcnJfcmVxdWlyZV9hdXRoOgogIG90aGVyOiBZb3VyIGtleXBhaXIgaXMgbm90IGF1dGhlbnRpY2F0ZWQsIHJ1biBgc3RhdGUgYXV0aGAgZmlyc3QKCmtleXBhaXJzX2Vycl9iaXRsZW5ndGhfdG9vX3Nob3J0OgogIG90aGVyOiBiaXQtbGVuZ3RoIHRvbyBzaG9ydAprZXlwYWlyc19lcnJfcGVtX2VuY29kaW5nOgogIG90aGVyOiBpbnZhbGlkIFBFTSBlbmNvZGluZwprZXlwYWlyc19lcnJfcGFzc3BocmFzZV9pbmNvcnJlY3Q6CiAgb3RoZXI6IHByb3ZpZGVkIHBhc3NwaHJhc2UgaXMgaW5jb3JyZWN0CmtleXBhaXJzX2Vycl9pbnZhbGlkX3JzYV9wdWJsaWNrZXk6CiAgb3RoZXI6IHByb3ZpZGVkIGtleSBub3QgYW4gUlNBIHB1YmxpYy1rZXkKa2V5cGFpcnNfZXJyX2xvYWRfbm90X2ZvdW5kOgogIG90aGVyOiBBdXRob3JpemVkIGtleXBhaXIgbm90IGZvdW5kCmtleXBhaXJzX2Vycl9sb2FkX3JlcXVpcmVzX21vZGU6CiAgb3RoZXI6ICJLZXlwYWlyIGB7ey5WMH19YCBmaWxlIGlzIHRvbyBwZXJtaXNzaXZlLCBleHBlY3RzIG5vIG1vcmUgdGhhbiBge3suVjF9fWAgcGVybWlzc2lvbnMiCmtleXBhaXJzX2Vycl9iYXNlNjRfZGVjb2Rpbmc6CiAgb3RoZXI6IE1lc3NhZ2UgaXMgbm90IGJhc2UtNjQgZW5jb2RlZAplcnJfY29tbWFuZF9yZXF1aXJlc19hdXRoOgogIG90aGVyOiBZb3UgbmVlZCB0byBiZSBhdXRoZW50aWNhdGVkIHRvIHJ1biB0aGlzIGNvbW1hbmQuIEF1dGhlbnRpY2F0ZSBieSBydW5uaW5nIGBzdGF0ZSBhdXRoYC4Kd2Fybl9zY3JpcHRfbmFtZV9pbl91c2U6CiAgb3RoZXI6IHwgCiAgICBUaGUgZm9sbG93aW5nIHNjcmlwdCBuYW1lcyBhcmUgYWxyZWFkeSBpbiB1c2U6CiAgICAgCiAgICAgIC0ge3suVjB9fQogICAgCiAgICBUaGlzIG1heSBjYXVzZSBjb25mbGljdHMsIGlkZWFsbHkgdGhlc2UgY29uZmxpY3RzIHNob3VsZCBiZSByZXNvbHZlZCBieSByZW5hbWluZyB0aGVzZSBzY3JpcHRzIGluIHlvdXIgYWN0aXZlc3RhdGUueWFtbC4KICAgIAogICAgTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyBhY2Nlc3Mgc2NyaXB0cyBieSBwcmVmaXhpbmcgdGhlaXIgc2NyaXB0IHdpdGggeW91ciBwcm9qZWN0IG5hbWUgKHt7LlYxfX0pLCBlZy4gYHt7LlYyfX1gCgplcnJfZmlsZV9ub3RfZm91bmRfaW5fcGF0aDoKICBvdGhlcjogY291bGQgbm90IGZpbmQgZmlsZT17ey5WMH19IGluIHBhdGg9e3suVjF9fQoKc2VjcmV0c19lcnJfZXhwYW5kX25vcHJvamVjdDoKICBvdGhlcjogRXhwYW5kaW5nIG9mIHZhcmlhYmxlIGZhaWxlZCBiZWNhdXNlIGEgcHJvamVjdCB3YXMgbm90IHBhc3NlZCBhbG9uZy4gVGhpcyBpbmRpY2F0ZXMgYSBwcm9ibGVtIGluIHRoZSB1bmRlcmx5aW5nIGNvZGUsIGFuZCBpcyB1bmxpa2VseSB0byBiZSBzb21ldGhpbmcgYW4gZW5kLXVzZXIgY2FuIGFkZHJlc3MuCmRldmVsb3Blcl9lcnJfcHJvamVjdF9tYXRjaDoKICBvdGhlcjogRW5jb3VudGVyZWQgYSBzaXR1YXRpb24gd2hlcmUgdGhlIHRvb2wgaXMgZ2l2ZW4gZGlmZmVyZW50IHByb2plY3QgcGF0aHMuIFRoaXMgaW5kaWNhdGVzIGEgYnVnIGluIG91ciBjb2RlLCBwbGVhc2UgY29uc2lkZXIgcmVwb3J0aW5nIGl0LgoKZXJyX3ZlcnNpb25fcGFyc2U6CiAgb3RoZXI6IENvdWxkIG5vdCBwYXJzZSB0aGUgdmVyc2lvbiBmaWVsZCBmcm9tIHlvdXIgYWN0aXZlc3RhdGUueWFtbAplcnJfaW52YWxpZF92ZXJzaW9uOgogIG90aGVyOiAiSW52YWxpZCB2ZXJzaW9uIHNwZWNpZmllZCBpbiB5b3VyIGFjdGl2ZXN0YXRlLnlhbWwsIHNob3VsZCBiZSBpbiB0aGUgZm9ybWF0IG9mOiB7bnVtYmVyfS57bnVtYmVyfS57bnVtYmVyfS17bnVtYmVyfSIKZG93bmxvYWRpbmdfc3RhdGVfdmVyc2lvbjoKICBvdGhlcjogIkRvd25sb2FkaW5nIHN0YXRlIHRvb2wgdmVyc2lvbiB7ey5WMH19LCBhcyBzcGVjaWZpZWQgYnkgeW91ciBhY3RpdmVzdGF0ZS55YW1sICh0aGlzIG9ubHkgbmVlZHMgdG8gaGFwcGVuIG9uY2UgZm9yIGVhY2ggdmVyc2lvbiB5b3Ugc3BlY2lmeSkuIgpmb3J3YXJkX2ZhaWw6CiAgb3RoZXI6IENvdWxkIG5vdCBmb3J3YXJkIGNvbW1hbmQgdG8gdGhlIGFwcHJvcHJpYXRlIHN0YXRlIHRvb2wgdmVyc2lvbgpmb3J3YXJkX2ZhaWxfZG93bmxvYWQ6CiAgb3RoZXI6IENvdWxkIG5vdCBmb3J3YXJkIGNvbW1hbmQgdG8gdGhlIGFwcHJvcHJpYXRlIHN0YXRlIHRvb2wgdmVyc2lvbiwgZG93bmxvYWQgZmFpbGVkCmZvcndhcmRfZmFpbF9wZXJtOgogIG90aGVyOiBDb3VsZCBub3QgZm9yd2FyZCBjb21tYW5kIHRvIHRoZSBhcHByb3ByaWF0ZSBzdGF0ZSB0b29sIHZlcnNpb24sIGNvdWxkIG5vdCBtYWtlIGZpbGUgZXhlY3V0YWJsZQpmbGFnX3VwZGF0ZV9sb2NrX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBMb2NrIHRoZSBzdGF0ZSB0b29sIGF0IHRoZSBjdXJyZW50IHZlcnNpb24sIHRoaXMgZGlzYWJsZXMgYXV0b21hdGljIHVwZGF0ZXMuIFlvdSBjYW4gc3RpbGwgZm9yY2UgYW4gdXBkYXRlIGJ5IG1hbnVhbGx5IHJ1bm5pbmcgdGhlIHVwZGF0ZSBjb21tYW5kLgplcnJfbG9ja19mYWlsZWQ6CiAgb3RoZXI6IExvY2tpbmcgdGhlIHZlcnNpb24gZmFpbGVkCmxvY2tpbmdfdmVyc2lvbjoKICBvdGhlcjogTG9ja2luZyBzdGF0ZSB0b29sIHRvIHRoZSBjdXJyZW50IHZlcnNpb24KdmVyc2lvbl9sb2NrZWQ6CiAgb3RoZXI6IFZlcnNpb24gbG9ja2VkIGF0IHt7LlYwfX0KdXBkYXRlX2F2YWlsYWJsZToKICBvdGhlcjogfAogICAgQSBuZXcgdXBkYXRlIGlzIGF2YWlsYWJsZSEKCiAgICBZb3VyIHZlcnNpb246IHt7LlYwfX0KICAgIEF2YWlsYWJsZSBWZXJzaW9uOiB7ey5WMX19CgogICAgWW91IGNhbiB1cGRhdGUgYnkgcnVubmluZyBgc3RhdGUgc2VsZi11cGRhdGVgCmVycl9ub19jcmVkZW50aWFsczoKICBvdGhlcjogQ2Fubm90IGF1dGhlbnRpY2F0ZSB3aXRob3V0IGNyZWRlbnRpYWxzCmVycl90b2tlbl9saXN0OgogIG90aGVyOiAiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbHN0IHRyeWluZyB0byByZXRyaWV2ZSBhcGkgdG9rZW5zOiB7ey5WMH19IgplcnJfdG9rZW5fZGVsZXRlOgogIG90aGVyOiAiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbHN0IHRyeWluZyB0byBkZWxldGUgYW4gYXBpIHRva2VuOiB7ey5WMH19IgplcnJfdG9rZW5fY3JlYXRlOgogIG90aGVyOiAiU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbHN0IHRyeWluZyB0byBjcmVhdGUgYW4gYXBpIHRva2VuOiB7ey5WMH19IgppbnN0YWxsZXJfZXJyX2luc3RhbGxkaXJfaXNmaWxlOgogIG90aGVyOiBFeHBlY3RlZCBpbnN0YWxsYXRpb24gcGF0aCAne3suVjB9fScgdG8gYmUgYSBkaXJlY3RvcnkKaW5zdGFsbGVyX2Vycl9pbnN0YWxsZGlyX25vdGVtcHR5OgogIG90aGVyOiBJbnN0YWxsYXRpb24gcGF0aCAne3suVjB9fScgaXMgbm90IGVtcHR5Cmluc3RhbGxlcl9lcnJfYXJjaGl2ZV9ub3Rmb3VuZDoKICBvdGhlcjogRGlzdHJpYnV0aW9uIGFyY2hpdmUgJ3t7LlYwfX0nIGRvZXMgbm90IGV4aXN0Cmluc3RhbGxlcl9lcnJfYXJjaGl2ZV9iYWRleHQ6CiAgb3RoZXI6IEV4cGVjdGVkIHJ1bnRpbWUgYXJjaGl2ZSAne3suVjB9fScgdG8gaGF2ZSAudGFyLmd6IG9yIC50Z3ogZXh0ZW5zaW9uCmluc3RhbGxlcl9lcnJfcnVudGltZV9taXNzaW5nX2luc3RhbGxfZGlyOgogIG90aGVyOiBFeHBlY3RlZCBydW50aW1lICd7ey5WMH19JyB0byBjb250YWluIGRpcmVjdG9yeSBuYW1lZCBvbmUgb2YgJ3t7LlYxfX0nCmluc3RhbGxlcl9lcnJfcnVudGltZV9taXNzaW5nX21ldGFfZmlsZToKICBvdGhlcjogfCAKICAgIFRoZSByZXF1ZXN0ZWQgcnVudGltZSBkb2VzIG5vdCBhcHBlYXIgdG8gaGF2ZSBhIG1ldGFkYXRhIGZpbGUsIHRoaXMgdXN1YWxseSBtZWFucyB5b3UncmUgdHJ5aW5nIHRvIHVzZSBhIG11Y2ggb2xkZXIgYnVpbGQgCiAgICB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyB2ZXJzaW9uIG9mIHRoZSBTdGF0ZSBUb29sLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSBwcm9kdWNlIGEgbmV3IGJ1aWxkLgppbnN0YWxsZXJfZXJyX3J1bnRpbWVfbm9fZXhlY3V0YWJsZToKICBvdGhlcjogRXhwZWN0ZWQgcnVudGltZSBpbnN0YWxsZXIgJ3t7LlYwfX0nIHRvIGluY2x1ZGUgJ3t7LlYxfX0nIG9yICd7ey5WMn19JwppbnN0YWxsZXJfZXJyX3J1bnRpbWVfbm9fZmlsZToKICBvdGhlcjogRXhwZWN0ZWQgcnVudGltZSBpbnN0YWxsZXIgJ3t7LlYwfX0nIHRvIGluY2x1ZGUgJ3t7LlYxfX0nJwppbnN0YWxsZXJfZXJyX3J1bnRpbWVfZXhlY3V0YWJsZV9ub3RfZXhlYzoKICBvdGhlcjogRXhlY3V0YWJsZSAne3suVjF9fScgZG9lcyBub3QgaGF2ZSBleGVjdXRlIHBlcm1pc3Npb25zIGZvciBydW50aW1lICd7ey5WMH19JwppbnN0YWxsZXJfZXJyX2ZhaWxfb2J0YWluX3ByZWZpeGVzOgogIG90aGVyOiBVbmFibGUgdG8gb2J0YWluIHJlbG9jYXRpb24gcHJlZml4ZXMgZm9yIHJ1bnRpbWUgJ3t7LlYwfX0nCmluc3RhbGxlcl9lcnJfcnVudGltZV9hbHJlYWR5X2V4aXN0czoKICBvdGhlcjogQSBydW50aW1lIGlzIGFscmVhZHkgaW5zdGFsbGVkIGF0ICd7ey5WMH19JwppbnN0YWxsZXJfZXJyX3J1bnRpbWVfbW92ZV9maWxlc19mYWlsZWQ6CiAgb3RoZXI6IFVuYWJsZSB0byBtb3ZlIHJ1bnRpbWUgZmlsZXMgZnJvbSAne3suVjB9fScKaW5zdGFsbGVyX2Vycl9ydW50aW1lX3JtX2luc3RhbGxkaXI6CiAgb3RoZXI6IFVuYWJsZSB0byByZW1vdmUgJ3t7LlYwfX0nIGFmdGVyIHVucGFja2luZyBydW50aW1lCgplcnJfbm9fZGVmYXVsdF9icmFuY2g6CiAgb3RoZXI6IFRoaXMgcHJvamVjdCBoYXMgbm8gZGVmYXVsdCBicmFuY2guIFRoaXMgaW5kaWNhdGVzIG1hbGZvcm1lZCBkYXRhLCBwbGVhc2UgY29udGFjdCBzdXBwb3J0IQplcnJfbm9fY29tbWl0OgogIG90aGVyOiBQcm9qZWN0IGJyYW5jaCBoYXMgbm8gY29tbWl0cwplcnJfZ2V0X2NoZWNrcG9pbnQ6CiAgb3RoZXI6ICJFcnJvciBvY2N1cnJlZCB3aGlsZSB0cnlpbmcgdG8gcmV0cmlldmUgdGhlIGNoZWNrcG9pbnQgZm9yIHlvdXIgcHJvamVjdDoge3suVjB9fSIKZXJyX25vX2VmZmVjdGl2ZV9yZWNpcGU6CiAgb3RoZXI6IFlvdXIgcHJvamVjdCBkb2VzIG5vdCBoYXZlIGEgY29uZmlndXJhdGlvbiB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCB5b3VyIHBsYXRmb3JtCmVycl9ub19hcnRpZmFjdHM6CiAgb3RoZXI6IFlvdXIgcHJvamVjdCBkb2VzIG5vdCBzZWVtIHRvIHByb2R1Y2UgYW55IGFydGlmYWN0cwplcnJfbm9fdmFsaWRfYXJ0aWZhY3Q6CiAgb3RoZXI6IFlvdXIgcHJvamVjdCBpcyBub3QgcHJvZHVjaW5nIGFueSB1c2FibGUgYXJ0aWZhY3RzLCBpcyB5b3VyIHN0YXRlIHRvb2wgdXAgdG8gZGF0ZT8KZXJyX3J1bnRpbWVfZG93bmxvYWRfbm9fcmVzcG9uc2U6CiAgb3RoZXI6IENvdWxkIG5vdCBmaW5kIGJpdHMgYXNzb2NpYXRlZCB3aXRoIHlvdXIgcnVudGltZSBlbnZpcm9ubWVudCwgcGxlYXNlIGNvbnRhY3Qgc3VwcG9ydAplcnJfc2lnbnMzX2ludmFsaWRfdXJsOgogIG90aGVyOiBBUEkgUmVzcG9uZGVkIHdpdGggYW4gaW52YWxpZCBTMyBVUkwsIHBsZWFzZSBjb250YWN0IHN1cHBvcnQKZXJyX2FydGlmYWN0X2ludmFsaWRfdXJsOgogIG90aGVyOiBBUEkgUmVzcG9uZGVkIHdpdGggYW4gaW52YWxpZCBhcnRpZmFjdCBVUkwsIHBsZWFzZSBjb250YWN0IHN1cHBvcnQKZXJyX2FjdGl2YXRlX25hbWVzcGFjZToKICBvdGhlcjogQ291bGQgbm90IGFjdGl2YXRlIHByb2plY3QgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2UKZXJyX2ludmFsaWRfbmFtZXNwYWNlOgogIG90aGVyOiAiSW52YWxpZCBuYW1lc3BhY2U6IHt7LlYwfX0uIFNob3VsZCBiZSBpbiB0aGUgZm9ybWF0IG9mIE9SR0FOSVNBVElPTl9OQU1FL1BST0pFQ1RfTkFNRS4gTmFtZXMgc2hvdWxkIGJlIGFscGhhbnVtZXJpYyBhbmQgbWF5IGNvbnRhaW4gZGFzaGVzIGFuZCBwZXJpb2RzLiIKZXJyX25hbWVzcGFjZV9kaXJfZXhpc3RzOgogIG90aGVyOiAiVGFyZ2V0IGRpcmVjdG9yeSBhbHJlYWR5IGV4aXN0cyIKYWN0aXZhdGVfbmFtZXNwYWNlX2V4aXN0aW5nOgogIG90aGVyOiAiWW91IGFscmVhZHkgaGF2ZSB0aGlzIHByb2plY3QgY2hlY2tlZCBvdXQsIHdoaWNoIG9uZSB3b3VsZCB5b3UgbGlrZSB0byBhY3RpdmF0ZT8iCmFjdGl2YXRlX3NlbGVjdF9vcHRvdXQ6CiAgb3RoZXI6ICJOb25lLCBJIHdhbnQgdG8gY3JlYXRlIGEgbmV3IGNoZWNrb3V0IgphY3RpdmF0ZV9uYW1lc3BhY2VfbG9jYXRpb246CiAgb3RoZXI6IFdoZXJlIHdvdWxkIHlvdSBsaWtlIHRvIGNoZWNrb3V0IHt7LlYwfX0/Cndhcm5fZGVwcmVjYXRpb246CiAgb3RoZXI6IHwgCiAgICBZb3UgYXJlIHJ1bm5pbmcgYSBkZXByZWNhdGVkIHZlcnNpb24gb2YgdGhlIHN0YXRlIHRvb2wuIFRoaXMgdmVyc2lvbiB3aWxsIHN0b3Agd29ya2luZyBhcyBvZiB7ey5WMH19LiAKICAgIAogICAgUmVhc29uIGZvciBkZXByZWNhdGlvbjogCiAgICAgIHt7LlYxfX0KICAgIAogICAgUGxlYXNlIHVwZGF0ZSBzb29uIQplcnJfZGVwcmVjYXRpb246CiAgb3RoZXI6IHwKICAgIFlvdSBhcmUgcnVubmluZyBhIHZlcnNpb24gb2YgdGhlIHN0YXRlIHRvb2wgdGhhdCBpcyBubyBsb25nZXIgc3VwcG9ydGVkISBZb3Ugd2lsbCBiZSBlbmNvdW50ZXJpbmcgaXNzdWVzLiAKICAgIAogICAgUmVhc29uIGZvciBkZXByZWNhdGlvbjogCiAgICAgIHt7LlYxfX0KICAgICAgCiAgICBQbGVhc2UgdXBkYXRlIG5vdyEiCmVycl9hdXRoX3JlcXVpcmVkOgogIG90aGVyOiBBdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZAphdXRoX3JlcXVpcmVkX2FjdGl2YXRlOgogIG90aGVyOiBZb3UgbmVlZCB0byBiZSBhdXRoZW50aWNhdGVkIHRvIGFjdGl2YXRlIGFuIEFjdGl2ZVN0YXRlIFBsYXRmb3JtIHByb2plY3QKcHJvbXB0X2xvZ2luX29yX3NpZ251cDoKICBvdGhlcjogV291bGQgeW91IGxpa2UgdG8gbG9naW4gdG8gYW4gZXhpc3RpbmcgQWN0aXZlU3RhdGUgUGxhdGZvcm0gYWNjb3VudCwgb3IgY3JlYXRlIGEgbmV3IGFjY291bnQ/CnByb21wdF9sb2dpbl9hY3Rpb246CiAgb3RoZXI6IExvZ2luIHdpdGggbXkgZXhpc3RpbmcgYWNjb3VudApwcm9tcHRfc2lnbnVwX2FjdGlvbjoKICBvdGhlcjogU2lnbnVwIGZvciBhIG5ldyBhY2NvdW50CnByb21wdF9zaWdudXBfYnJvd3Nlcl9hY3Rpb246CiAgb3RoZXI6IFNpZ251cCBmb3IgYSBuZXcgYWNjb3VudCB1c2luZyB0aGUgQWN0aXZlU3RhdGUgUGxhdGZvcm0gd2Vic2l0ZQpwcm9tcHRfbG9naW5fYWZ0ZXJfYnJvd3Nlcl9zaWdudXA6CiAgb3RoZXI6IFBsZWFzZSBsb2dpbiBvbmNlIHlvdSd2ZSByZWdpc3RlcmVkIHlvdXIgYWNjb3VudAplcnJfYnJvd3Nlcl9vcGVuOgogIG90aGVyOiAiQ291bGQgbm90IG9wZW4geW91ciBicm93c2VyLCBwbGVhc2UgbWFudWFsbHkgb3BlbiB0aGUgZm9sbG93aW5nIFVSTCBpbiB5b3VyIGJyb3dzZXI6IHt7LlYwfX0iCmVycl9hY3RpdmF0ZV9hdXRoX3JlcXVpcmVkOgogIG90aGVyOiBBY3RpdmF0aW5nIGEgcHJvamVjdCByZXF1aXJlcyB5b3UgdG8gYmUgYXV0aGVudGljYXRlZCBhZ2FpbnN0IHRoZSBBY3RpdmVTdGF0ZSBQbGF0Zm9ybQplcnJfb3Nfbm90X2FfZGlyZWN0b3J5OgogIG90aGVyOiBFeHBlY3RlZCAne3suVjB9fScgdG8gYmUgYSB2YWxpZCBkaXJlY3RvcnkKc2NyaXB0c19ub19zY3JpcHRzOgogIG90aGVyOiBObyBzY3JpcHRzIGluIHlvdXIgJ2FjdGl2ZXN0YXRlLnlhbWwnIG9yIG5vIHNjcmlwdHMgdG8gcnVuIGluIGZvciB5b3VyIGVudmlyb25tZW50CnVuc3RhYmxlX3ZlcnNpb25fd2FybmluZzoKICBvdGhlcjogVGhlIFN0YXRlIFRvb2wgaXMgY3VycmVudGx5IGluIGEgcHJldmlldyBwZXJpb2QsIHdlIGFyZSBhY3RpdmVseSBjaGFuZ2luZyBhbmQgYWRkaW5nIGZlYXR1cmVzIGJhc2VkIG9uIGRldmVsb3BlciBmZWVkYmFjay4KdXBkYXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBVcGRhdGVzIHRoZSBzdGF0ZSB0b29sIHRvIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHZlcnNpb24KZG93bmxvYWRpbmdfYXJ0aWZhY3RzOgogIG90aGVyOiBEb3dubG9hZGluZyByZXF1aXJlZCBhcnRpZmFjdHMKaW5zdGFsbGluZ19hcnRpZmFjdHM6CiAgb3RoZXI6IEluc3RhbGxpbmcgcmVxdWlyZWQgYXJ0aWZhY3RzCmZpbGV1dGlsc19lcnJfYW1tZW5kX2ZpbGU6CiAgb3RoZXI6ICJDb3VsZCBub3QgZWRpdCBmaWxlOiAne3suVjB9fSciCmVycl9hdXRoX2ZhaWxfdG90cDoKICBvdGhlcjogRmFpbGVkIHRvIHJlY2VpdmUgQXV0aGVudGljYXRpb24gVG9rZW4gaW5wdXQKZmFpbF9wcm9tcHRfYmFkX2ZsYWc6CiAgb3RoZXI6IENvdWxkIG5vdCB2YWxpZGF0ZSBpbnB1dCBkdWUgdG8gYW4gdW5leHBlY3RlZCBmbGFnLCBwbGVhc2UgY29udGFjdCBzdXBwb3J0IGlmIHRoaXMgcHJvYmxlbSBwZXJzaXN0cwplcnJfaW52YWxpZF9wcm9qZWN0X25hbWVfb3duZXI6CiAgb3RoZXI6IFlvdXIgYWN0aXZlc3RhdGUueWFtbCBpcyBtaXNzaW5nIGEgbmFtZSBhbmQvb3Igb3duZXIgZmllbGQuCmVycl9wZXJzaXN0X2ludmFsaWRfcHJvamVjdDoKICBvdGhlcjogVHJ5aW5nIHRvIHBlcnNpc3QgYW4gaW52YWxpZCBwcm9qZWN0Cg==\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"dW5kZWZpbmVkOgogIG90aGVyOiBvbmJlcGFhbGQKCnN0YXRlX2Rlc2NyaXB0aW9uOgogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbgphY3RpdmF0ZV9wcm9qZWN0OiAKICBvdGhlcjogYWN0aXZlZXIgZWVuIHByb2plY3QKdXNhZ2VfdHBsOiAKICBvdGhlcjogIgpHZWJydWlrOgogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0KICBbWy5Vc2VMaW5lXV0KICBbW2VuZF1dCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQogICAgW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0KICBbW2VuZF1dCgpbW2lmIGd0IChsZW4gLkFsaWFzZXMpIDBdXQpbW0JSXV1bW0JSXV0KQWxpYXNzZW46W1tCUl1dCiAgW1suTmFtZUFuZEFsaWFzZXNdXVtbZW5kXV0KCltbaWYgLkhhc0V4YW1wbGVdXQpbW0JSXV1bW0JSXV0KVm9vcmJlZWxkZW46W1tCUl1dCiAgW1suRXhhbXBsZV1dCltbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoKW1tyYW5nZSAuQ29tbWFuZHNdXVtbaWYgKG9yIC5Jc0F2YWlsYWJsZUNvbW1hbmQgKGVxIC5OYW1lIFwiaGVscFwiKSldXVtbQlJdXQogIFtbcnBhZCAuTmFtZSAuTmFtZVBhZGRpbmcgXV0gW1suU2hvcnRdXQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0KCltbaWYgLkhhc0F2YWlsYWJsZUxvY2FsRmxhZ3NdXQpbW0JSXV1bW0JSXV0KRmxhZ3M6CltbQlJdXVtbLkxvY2FsRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlSW5oZXJpdGVkRmxhZ3NdXQpbW0JSXV1bW0JSXV0KR2xvYmFsZSBGbGFnczogCltbQlJdXVtbLkluaGVyaXRlZEZsYWdzLkZsYWdVc2FnZXMgfCB0cmltVHJhaWxpbmdXaGl0ZXNwYWNlc11dCltbZW5kXV0KCltbaWYgLkhhc0hlbHBTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpNZWVyZGVyZSBoZWxwIHRvcGljczogW1tyYW5nZSAuQ29tbWFuZHNdXQpbW2lmIC5Jc0FkZGl0aW9uYWxIZWxwVG9waWNDb21tYW5kXV1bW0JSXV0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQpbW0JSXV1bW0JSXV0KR2VicnVpayBcIltbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdIC0taGVscFwiIHZvb3IgbWVlciBpbmZvcm1hdGllIG92ZXIgZWVuIGNvbW1hbmQuW1tlbmRdXVtbQlJdXSIKZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IExva2FsaXNhdGllCg==\"")
}

package locale

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../locale", "en-us.yaml", "\"\"")
	packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"c3RhdGVfZGVzY3JpcHRpb246CiAgb3RoZXI6IE1ldCBkZSBBY3RpdmVTdGF0ZSBDTEkga2FuIGplIG1ha2tlbGlqayB0dXNzZW4gamUgQWN0aXZlU3RhdGUgZW52aXJvbm1lbnRzIHdpc3NlbGVuCmFjdGl2YXRlX3Byb2plY3Q6IAogIG90aGVyOiBhY3RpdmVlciBlZW4gcHJvamVjdAp1c2FnZV90cGw6IAogIG90aGVyOiAiCkdlYnJ1aWs6CiAgW1tpZiAuUnVubmFibGVdXVtbQlJdXQogIFtbLlVzZUxpbmVdXQogIFtbZW5kXV0KICBbW2lmIC5IYXNBdmFpbGFibGVTdWJDb21tYW5kc11dW1tCUl1dCiAgICBbWy5Db21tYW5kUGF0aF1dIFtjb21tYW5kXQogIFtbZW5kXV0KCltbaWYgZ3QgKGxlbiAuQWxpYXNlcykgMF1dCltbQlJdXVtbQlJdXQpBbGlhc3NlbjpbW0JSXV0KICBbWy5OYW1lQW5kQWxpYXNlc11dW1tlbmRdXQoKW1tpZiAuSGFzRXhhbXBsZV1dCltbQlJdXVtbQlJdXQpWb29yYmVlbGRlbjpbW0JSXV0KICBbWy5FeGFtcGxlXV0KW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXVtbQlJdXUJlc2NoaWtiYXJlIENvbW1hbmRzOgpbW3JhbmdlIC5Db21tYW5kc11dW1tpZiAob3IgLklzQXZhaWxhYmxlQ29tbWFuZCAoZXEgLk5hbWUgXCJoZWxwXCIpKV1dW1tCUl1dCiAgW1tycGFkIC5OYW1lIC5OYW1lUGFkZGluZyBdXSBbWy5TaG9ydF1dCltbZW5kXV1bW2VuZF1dW1tlbmRdXQoKW1tpZiAuSGFzQXZhaWxhYmxlTG9jYWxGbGFnc11dCltbQlJdXVtbQlJdXQpGbGFnczoKW1tCUl1dW1suTG9jYWxGbGFncy5GbGFnVXNhZ2VzIHwgdHJpbVRyYWlsaW5nV2hpdGVzcGFjZXNdXQpbW2VuZF1dCgpbW2lmIC5IYXNBdmFpbGFibGVJbmhlcml0ZWRGbGFnc11dCltbQlJdXVtbQlJdXQpHbG9iYWxlIEZsYWdzOiAKW1tCUl1dW1suSW5oZXJpdGVkRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0KW1tlbmRdXQoKW1tpZiAuSGFzSGVscFN1YkNvbW1hbmRzXV0KW1tCUl1dW1tCUl1dCk1lZXJkZXJlIGhlbHAgdG9waWNzOiBbW3JhbmdlIC5Db21tYW5kc11dCltbaWYgLklzQWRkaXRpb25hbEhlbHBUb3BpY0NvbW1hbmRdXVtbQlJdXQogIFtbcnBhZCAuQ29tbWFuZFBhdGggLkNvbW1hbmRQYXRoUGFkZGluZ11dIFtbLlNob3J0XV0KW1tlbmRdXVtbZW5kXV1bW2VuZF1dCgpbW2lmIC5IYXNBdmFpbGFibGVTdWJDb21tYW5kc11dCltbQlJdXVtbQlJdXQpHZWJydWlrIFwiW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0gLS1oZWxwXCIgdm9vciBtZWVyIGluZm9ybWF0aWUgb3ZlciBlZW4gY29tbWFuZC5bW2VuZF1dW1tCUl1dIgpmbGFnX3N0YXRlX2xvY2FsZV9kZXNjcmlwdGlvbjoKICBvdGhlcjogTG9rYWxpc2F0aWUK\"")
}

package locale

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("../../locale", "en-us.yaml", "\"\"")
		packr.PackJSONBytes("../../locale", "nl-nl.yaml", "\"c3RhdGVfZGVzY3JpcHRpb246DQogIG90aGVyOiBNZXQgZGUgQWN0aXZlU3RhdGUgQ0xJIGthbiBqZSBtYWtrZWxpamsgdHVzc2VuIGplIEFjdGl2ZVN0YXRlIGVudmlyb25tZW50cyB3aXNzZWxlbg0KYWN0aXZhdGVfcHJvamVjdDogDQogIG90aGVyOiBhY3RpdmVlciBlZW4gcHJvamVjdA0KdXNhZ2VfdHBsOiANCiAgb3RoZXI6ICINCkdlYnJ1aWs6DQogIFtbaWYgLlJ1bm5hYmxlXV1bW0JSXV0NCiAgW1suVXNlTGluZV1dDQogIFtbZW5kXV0NCiAgW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXVtbQlJdXQ0KICAgIFtbLkNvbW1hbmRQYXRoXV0gW2NvbW1hbmRdDQogIFtbZW5kXV0NCg0KW1tpZiBndCAobGVuIC5BbGlhc2VzKSAwXV0NCltbQlJdXVtbQlJdXQ0KQWxpYXNzZW46W1tCUl1dDQogIFtbLk5hbWVBbmRBbGlhc2VzXV1bW2VuZF1dDQoNCltbaWYgLkhhc0V4YW1wbGVdXQ0KW1tCUl1dW1tCUl1dDQpWb29yYmVlbGRlbjpbW0JSXV0NCiAgW1suRXhhbXBsZV1dDQpbW2VuZF1dDQoNCltbaWYgLkhhc0F2YWlsYWJsZVN1YkNvbW1hbmRzXV1bW0JSXV1bW0JSXV1CZXNjaGlrYmFyZSBDb21tYW5kczoNCltbcmFuZ2UgLkNvbW1hbmRzXV1bW2lmIChvciAuSXNBdmFpbGFibGVDb21tYW5kIChlcSAuTmFtZSBcImhlbHBcIikpXV1bW0JSXV0NCiAgW1tycGFkIC5OYW1lIC5OYW1lUGFkZGluZyBdXSBbWy5TaG9ydF1dDQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0NCg0KW1tpZiAuSGFzQXZhaWxhYmxlTG9jYWxGbGFnc11dDQpbW0JSXV1bW0JSXV0NCkZsYWdzOg0KW1tCUl1dW1suTG9jYWxGbGFncy5GbGFnVXNhZ2VzIHwgdHJpbVRyYWlsaW5nV2hpdGVzcGFjZXNdXQ0KW1tlbmRdXQ0KDQpbW2lmIC5IYXNBdmFpbGFibGVJbmhlcml0ZWRGbGFnc11dDQpbW0JSXV1bW0JSXV0NCkdsb2JhbGUgRmxhZ3M6IA0KW1tCUl1dW1suSW5oZXJpdGVkRmxhZ3MuRmxhZ1VzYWdlcyB8IHRyaW1UcmFpbGluZ1doaXRlc3BhY2VzXV0NCltbZW5kXV0NCg0KW1tpZiAuSGFzSGVscFN1YkNvbW1hbmRzXV0NCltbQlJdXVtbQlJdXQ0KTWVlcmRlcmUgaGVscCB0b3BpY3M6IFtbcmFuZ2UgLkNvbW1hbmRzXV0NCltbaWYgLklzQWRkaXRpb25hbEhlbHBUb3BpY0NvbW1hbmRdXVtbQlJdXQ0KICBbW3JwYWQgLkNvbW1hbmRQYXRoIC5Db21tYW5kUGF0aFBhZGRpbmddXSBbWy5TaG9ydF1dDQpbW2VuZF1dW1tlbmRdXVtbZW5kXV0NCg0KW1tpZiAuSGFzQXZhaWxhYmxlU3ViQ29tbWFuZHNdXQ0KW1tCUl1dW1tCUl1dDQpHZWJydWlrIFwiW1suQ29tbWFuZFBhdGhdXSBbY29tbWFuZF0gLS1oZWxwXCIgdm9vciBtZWVyIGluZm9ybWF0aWUgb3ZlciBlZW4gY29tbWFuZC5bW2VuZF1dW1tCUl1dIg0KZmxhZ19zdGF0ZV9sb2NhbGVfZGVzY3JpcHRpb246DQogIG90aGVyOiBMb2thbGlzYXRpZQ0K\"")
}

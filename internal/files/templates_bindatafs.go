// Code generated by go-bindata.
// sources:
// ../internal/files/templates/shells/bashrc.sh
// ../internal/files/templates/shells/config.bat
// ../internal/files/templates/shells/zshrc.sh
// DO NOT EDIT!

// +build bindatafs

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shellsBashrcSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x4a\xc3\x40\x14\x45\xf7\x81\xfc\xc3\x65\xc8\xd2\x4e\x2b\xdd\xb5\x64\x51\xac\xab\x92\x26\x88\xd4\x45\x47\x64\x9c\xbe\x98\x08\x99\x91\xc9\x18\x85\xc7\xf3\xdb\xc5\x2c\xd4\xed\xb9\xf7\xc0\xe9\x5b\x9c\xb1\x68\xf1\xb5\xd4\xcf\x76\xec\xa2\xc3\xe3\x16\xa9\x23\x8f\x31\xbc\x47\x47\x7f\xc3\x16\x6d\x9f\x67\xf4\xf9\x16\x62\x42\x73\x57\x57\xcd\xfd\xd3\x4d\x5d\x55\xbb\xe3\xbe\x54\xe4\xba\x80\x05\xc1\x28\xb3\x5a\xaf\xcf\xd7\xc3\xce\xa5\x7e\x22\x8c\xc9\x26\xda\x80\x59\x37\x31\xbc\x92\x4b\xba\xfe\xf0\x14\x45\x96\xff\xd0\xd1\x0e\x24\x62\x66\x73\x35\x18\x95\x67\x2a\xcf\x98\xa3\xf5\x2f\x84\xe2\x70\x85\xe2\x84\x4d\x09\x7d\xeb\x27\x91\xdf\x04\xe6\xe2\x20\x52\x2a\xe6\xe2\x24\x32\x1b\xe4\x2f\x3f\x07\x77\x81\x62\xd6\x0f\xfb\x19\x7f\x07\x00\x00\xff\xff\xb7\x8b\x53\x29\xe2\x00\x00\x00")

func shellsBashrcShBytes() ([]byte, error) {
	return bindataRead(
		_shellsBashrcSh,
		"shells/bashrc.sh",
	)
}

func shellsBashrcSh() (*asset, error) {
	bytes, err := shellsBashrcShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shells/bashrc.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shellsConfigBat = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x48\x4d\xce\xc8\x57\xc8\x4f\x4b\xe3\xe5\x0a\x76\x0d\x51\x08\x08\xf2\xf7\x0d\x08\xb1\x55\x09\x50\x09\xae\xae\xd6\xf3\x2f\xcf\x4b\x2d\xaa\xad\x8d\x89\xa9\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x71\xe7\xe5\x4a\x4e\x51\xa8\xae\xd6\x0b\x77\xa9\xad\x05\x04\x00\x00\xff\xff\x47\x79\x89\x6f\x3d\x00\x00\x00")

func shellsConfigBatBytes() ([]byte, error) {
	return bindataRead(
		_shellsConfigBat,
		"shells/config.bat",
	)
}

func shellsConfigBat() (*asset, error) {
	bytes, err := shellsConfigBatBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shells/config.bat", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shellsZshrcSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x4f\x6b\x83\x40\x10\x05\xf0\xbb\xe0\x77\x18\x96\x3d\xb6\xab\xc5\x9b\xe0\x41\x6a\x4f\xe2\x1f\x4a\xb1\x87\x2e\x14\x59\x87\xda\x82\xbb\x65\xdd\x98\x90\x61\xf2\xd9\x83\x39\x84\xdc\x1e\x3f\x78\xbc\xb7\xba\x83\x37\x08\x97\x44\x9d\xd7\xd9\x9b\x38\xc2\xd3\xbf\xf3\x01\xfa\xf7\xae\xe9\x3f\xbe\x5f\xbb\xa6\x29\xdb\xaa\x10\x68\x66\x07\xcf\x08\x5a\xe8\x34\xcb\xbe\x5e\x96\xd2\x84\xdf\x0d\x61\x0d\x63\xc0\x1c\x88\x54\xef\xdd\x1f\x9a\xa0\xba\xa3\x45\xcf\x9c\x3c\x50\x3b\x2e\xc8\xac\x6f\xcd\x74\xd1\x22\x8e\x44\x1c\x11\xf9\xd1\xfe\x20\xc8\xfa\x09\xe4\x00\x79\x01\xea\xcd\x6e\xcc\xf7\x0b\x44\xb2\x66\x2e\x88\xe4\xb0\x2b\x11\xda\x69\x0f\x66\xda\xe7\x3e\x2b\xe6\x6b\x00\x00\x00\xff\xff\x9d\x05\x0a\x21\xbd\x00\x00\x00")

func shellsZshrcShBytes() ([]byte, error) {
	return bindataRead(
		_shellsZshrcSh,
		"shells/zshrc.sh",
	)
}

func shellsZshrcSh() (*asset, error) {
	bytes, err := shellsZshrcShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shells/zshrc.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shells/bashrc.sh": shellsBashrcSh,
	"shells/config.bat": shellsConfigBat,
	"shells/zshrc.sh": shellsZshrcSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shells": &bintree{nil, map[string]*bintree{
		"bashrc.sh": &bintree{shellsBashrcSh, map[string]*bintree{}},
		"config.bat": &bintree{shellsConfigBat, map[string]*bintree{}},
		"zshrc.sh": &bintree{shellsZshrcSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


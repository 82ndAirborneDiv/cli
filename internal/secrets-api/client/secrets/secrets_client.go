// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUserSecret deletes a specific user s secret

Delete a specific user's secret
*/
func (a *Client) DeleteUserSecret(params *DeleteUserSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserSecret",
		Method:             "DELETE",
		PathPattern:        "/user_secrets/{secretID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserSecretNoContent), nil

}

/*
GetAllUserSecrets alls user s secrets for an organization

Return a user's secrets from a specific organization
*/
func (a *Client) GetAllUserSecrets(params *GetAllUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUserSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUserSecrets",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationID}/user_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllUserSecretsOK), nil

}

/*
SaveAllUserSecrets saves a collection of user secrets

Update the user's vault with the provided collection of secrets
*/
func (a *Client) SaveAllUserSecrets(params *SaveAllUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*SaveAllUserSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveAllUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveAllUserSecrets",
		Method:             "PATCH",
		PathPattern:        "/organizations/{organizationID}/user_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveAllUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveAllUserSecretsNoContent), nil

}

/*
SaveOtherUserSecrets saves a collection of user secrets for a different user

Update another user's vault with any of the provided non-user scoped secrets
*/
func (a *Client) SaveOtherUserSecrets(params *SaveOtherUserSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*SaveOtherUserSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveOtherUserSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveOtherUserSecrets",
		Method:             "PATCH",
		PathPattern:        "/organizations/{organizationID}/user_secrets/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveOtherUserSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveOtherUserSecretsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
